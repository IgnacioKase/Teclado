

Microchip Technology PIC LITE Macro Assembler V1.44 build -154322312 
                                                                                               Tue Nov 14 13:12:02 2017

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	16F628A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	maintext,global,class=CODE,split=1,delta=2
    10                           	psect	text1,local,class=CODE,merge=1,delta=2
    11                           	psect	text2,local,class=CODE,merge=1,delta=2
    12                           	psect	text3,local,class=CODE,merge=1,delta=2
    13                           	psect	intentry,global,class=CODE,delta=2
    14                           	psect	text4,local,class=CODE,merge=1,delta=2
    15                           	dabs	1,0x7E,2
    16  0000                     
    17                           ; Version 1.44
    18                           ; Generated 14/09/2017 GMT
    19                           ; 
    20                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    21                           ; All rights reserved.
    22                           ; 
    23                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    24                           ; 
    25                           ; Redistribution and use in source and binary forms, with or without modification, are
    26                           ; permitted provided that the following conditions are met:
    27                           ; 
    28                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    29                           ;        conditions and the following disclaimer.
    30                           ; 
    31                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    32                           ;        of conditions and the following disclaimer in the documentation and/or other
    33                           ;        materials provided with the distribution.
    34                           ; 
    35                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    36                           ;        software without specific prior written permission.
    37                           ; 
    38                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    39                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    40                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    41                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    42                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    43                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    44                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    45                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    46                           ; 
    47                           ; 
    48                           ; Code-generator required, PIC16F628A Definitions
    49                           ; 
    50                           ; SFR Addresses
    51  0000                     	;# 
    52  0001                     	;# 
    53  0002                     	;# 
    54  0003                     	;# 
    55  0004                     	;# 
    56  0005                     	;# 
    57  0006                     	;# 
    58  000A                     	;# 
    59  000B                     	;# 
    60  000C                     	;# 
    61  000E                     	;# 
    62  000E                     	;# 
    63  000F                     	;# 
    64  0010                     	;# 
    65  0011                     	;# 
    66  0012                     	;# 
    67  0015                     	;# 
    68  0015                     	;# 
    69  0016                     	;# 
    70  0017                     	;# 
    71  0018                     	;# 
    72  0019                     	;# 
    73  001A                     	;# 
    74  001F                     	;# 
    75  0081                     	;# 
    76  0085                     	;# 
    77  0086                     	;# 
    78  008C                     	;# 
    79  008E                     	;# 
    80  0092                     	;# 
    81  0098                     	;# 
    82  0099                     	;# 
    83  009A                     	;# 
    84  009B                     	;# 
    85  009C                     	;# 
    86  009D                     	;# 
    87  009F                     	;# 
    88  0000                     	;# 
    89  0001                     	;# 
    90  0002                     	;# 
    91  0003                     	;# 
    92  0004                     	;# 
    93  0005                     	;# 
    94  0006                     	;# 
    95  000A                     	;# 
    96  000B                     	;# 
    97  000C                     	;# 
    98  000E                     	;# 
    99  000E                     	;# 
   100  000F                     	;# 
   101  0010                     	;# 
   102  0011                     	;# 
   103  0012                     	;# 
   104  0015                     	;# 
   105  0015                     	;# 
   106  0016                     	;# 
   107  0017                     	;# 
   108  0018                     	;# 
   109  0019                     	;# 
   110  001A                     	;# 
   111  001F                     	;# 
   112  0081                     	;# 
   113  0085                     	;# 
   114  0086                     	;# 
   115  008C                     	;# 
   116  008E                     	;# 
   117  0092                     	;# 
   118  0098                     	;# 
   119  0099                     	;# 
   120  009A                     	;# 
   121  009B                     	;# 
   122  009C                     	;# 
   123  009D                     	;# 
   124  009F                     	;# 
   125  0019                     _TXREG	set	25
   126  001F                     _CMCON	set	31
   127  001A                     _RCREG	set	26
   128  0064                     _TXIF	set	100
   129  00C6                     _RX9	set	198
   130  00C5                     _SREN	set	197
   131  00C7                     _SPEN	set	199
   132  005E                     _PEIE	set	94
   133  005F                     _GIE	set	95
   134  0036                     _RB6	set	54
   135  0037                     _RB7	set	55
   136  00C4                     _CREN	set	196
   137  00C1                     _OERR	set	193
   138  0065                     _RCIF	set	101
   139  002A                     _RA2	set	42
   140  0029                     _RA1	set	41
   141  0028                     _RA0	set	40
   142  0099                     _SPBRG	set	153
   143  0086                     _TRISB	set	134
   144  0085                     _TRISA	set	133
   145  04C5                     _TXEN	set	1221
   146  04C6                     _TX9	set	1222
   147  0465                     _RCIE	set	1125
   148  0464                     _TXIE	set	1124
   149  04C4                     _SYNC	set	1220
   150  04C2                     _BRGH	set	1218
   151                           
   152                           ; #config settings
   153  0000                     
   154                           	psect	cinit
   155  0011                     start_initialization:	
   156  0011                     __initialization:	
   157                           
   158                           ; Clear objects allocated to COMMON
   159  0011  01F0               	clrf	__pbssCOMMON& (0+127)
   160  0012  01F1               	clrf	(__pbssCOMMON+1)& (0+127)
   161  0013  01F2               	clrf	(__pbssCOMMON+2)& (0+127)
   162  0014  01F3               	clrf	(__pbssCOMMON+3)& (0+127)
   163  0015  01F4               	clrf	(__pbssCOMMON+4)& (0+127)
   164  0016  01F5               	clrf	(__pbssCOMMON+5)& (0+127)
   165                           
   166                           ; Clear objects allocated to BANK0
   167  0017  1283               	bcf	3,5	;RP0=0, select bank0
   168  0018  1303               	bcf	3,6	;RP1=0, select bank0
   169  0019  01B4               	clrf	__pbssBANK0& (0+127)
   170  001A  01B5               	clrf	(__pbssBANK0+1)& (0+127)
   171  001B  01B6               	clrf	(__pbssBANK0+2)& (0+127)
   172  001C  01B7               	clrf	(__pbssBANK0+3)& (0+127)
   173  001D                     end_of_initialization:	
   174                           ;End of C runtime variable initialization code
   175                           
   176  001D                     __end_of__initialization:	
   177  001D  0183               	clrf	3
   178  001E  28F0               	ljmp	_main	;jump to C main() function
   179                           
   180                           	psect	bssCOMMON
   181  0070                     __pbssCOMMON:	
   182  0070                     _palabra:	
   183  0070                     	ds	4
   184  0074                     _dataLength:	
   185  0074                     	ds	2
   186                           
   187                           	psect	bssBANK0
   188  0034                     __pbssBANK0:	
   189  0034                     _x:	
   190  0034                     	ds	4
   191                           
   192                           	psect	cstackCOMMON
   193  0076                     __pcstackCOMMON:	
   194  0076                     ?_InitUART:	
   195  0076                     ?_escribirSalida:	
   196                           ; 1 bytes @ 0x0
   197                           
   198  0076                     ??_escribirSalida:	
   199                           ; 1 bytes @ 0x0
   200                           
   201  0076                     ?_ISR:	
   202                           ; 1 bytes @ 0x0
   203                           
   204  0076                     ?_main:	
   205                           ; 1 bytes @ 0x0
   206                           
   207                           
   208                           ; 1 bytes @ 0x0
   209  0076                     	ds	4
   210  007A                     escribirSalida@i:	
   211                           
   212                           ; 2 bytes @ 0x4
   213  007A                     	ds	2
   214                           
   215                           	psect	cstackBANK0
   216  0020                     __pcstackBANK0:	
   217  0020                     ??_ISR:	
   218                           
   219                           ; 1 bytes @ 0x0
   220  0020                     	ds	15
   221  002F                     ??_InitUART:	
   222  002F                     ?_resetearSalidas:	
   223                           ; 1 bytes @ 0xF
   224                           
   225  002F                     resetearSalidas@cantidadSalidas:	
   226                           ; 1 bytes @ 0xF
   227                           
   228                           
   229                           ; 2 bytes @ 0xF
   230  002F                     	ds	2
   231  0031                     ??_resetearSalidas:	
   232                           
   233                           ; 1 bytes @ 0x11
   234  0031                     	ds	1
   235  0032                     resetearSalidas@i:	
   236                           
   237                           ; 2 bytes @ 0x12
   238  0032                     	ds	2
   239  0034                     ??_main:	
   240                           
   241                           	psect	maintext
   242  00F0                     __pmaintext:	
   243                           ; 1 bytes @ 0x14
   244 ;;
   245 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   246 ;;
   247 ;; *************** function _main *****************
   248 ;; Defined at:
   249 ;;		line 76 in file "main.c"
   250 ;; Parameters:    Size  Location     Type
   251 ;;		None
   252 ;; Auto vars:     Size  Location     Type
   253 ;;		None
   254 ;; Return value:  Size  Location     Type
   255 ;;                  1    wreg      void 
   256 ;; Registers used:
   257 ;;		wreg, status,2, status,0, pclath, cstack
   258 ;; Tracked objects:
   259 ;;		On entry : B00/0
   260 ;;		On exit  : 0/0
   261 ;;		Unchanged: 0/0
   262 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   263 ;;      Params:         0       0       0       0
   264 ;;      Locals:         0       0       0       0
   265 ;;      Temps:          0       0       0       0
   266 ;;      Totals:         0       0       0       0
   267 ;;Total ram usage:        0 bytes
   268 ;; Hardware stack levels required when called:    3
   269 ;; This function calls:
   270 ;;		_InitUART
   271 ;;		_resetearSalidas
   272 ;; This function is called by:
   273 ;;		Startup code after reset
   274 ;; This function uses a non-reentrant model
   275 ;;
   276                           
   277                           
   278                           ;psect for function _main
   279  00F0                     _main:	
   280                           
   281                           ;main.c: 78: CMCON = 0x07;
   282                           
   283                           ;incstack = 0
   284                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   285  00F0  3007               	movlw	7
   286  00F1  1283               	bcf	3,5	;RP0=0, select bank0
   287  00F2  1303               	bcf	3,6	;RP1=0, select bank0
   288  00F3  009F               	movwf	31	;volatile
   289                           
   290                           ;main.c: 79: TRISA = 0b00000000;
   291  00F4  1683               	bsf	3,5	;RP0=1, select bank1
   292  00F5  1303               	bcf	3,6	;RP1=0, select bank1
   293  00F6  0185               	clrf	5	;volatile
   294                           
   295                           ;main.c: 80: TRISB = 0b00111111;
   296  00F7  303F               	movlw	63
   297  00F8  0086               	movwf	6	;volatile
   298                           
   299                           ;main.c: 81: RB7=0;
   300  00F9  1283               	bcf	3,5	;RP0=0, select bank0
   301  00FA  1303               	bcf	3,6	;RP1=0, select bank0
   302  00FB  1386               	bcf	6,7	;volatile
   303                           
   304                           ;main.c: 82: RB6=0;
   305  00FC  1306               	bcf	6,6	;volatile
   306                           
   307                           ;main.c: 83: InitUART();
   308  00FD  2108               	fcall	_InitUART
   309                           
   310                           ;main.c: 85: GIE = 1;
   311  00FE  178B               	bsf	11,7	;volatile
   312                           
   313                           ;main.c: 86: PEIE = 1;
   314  00FF  170B               	bsf	11,6	;volatile
   315                           
   316                           ;main.c: 88: resetearSalidas(61);
   317  0100  303D               	movlw	61
   318  0101  1283               	bcf	3,5	;RP0=0, select bank0
   319  0102  1303               	bcf	3,6	;RP1=0, select bank0
   320  0103  00AF               	movwf	resetearSalidas@cantidadSalidas
   321  0104  3000               	movlw	0
   322  0105  00B0               	movwf	resetearSalidas@cantidadSalidas+1
   323  0106  20CD               	fcall	_resetearSalidas
   324  0107                     l62:	
   325                           ;main.c: 90: while(1)
   326                           
   327                           
   328                           ;main.c: 91: {
   329  0107  2907               	goto	l62
   330  0108                     __end_of_main:	
   331                           
   332                           	psect	text1
   333  00CD                     __ptext1:	
   334 ;; *************** function _resetearSalidas *****************
   335 ;; Defined at:
   336 ;;		line 23 in file "main.c"
   337 ;; Parameters:    Size  Location     Type
   338 ;;  cantidadSali    2   15[BANK0 ] int 
   339 ;; Auto vars:     Size  Location     Type
   340 ;;  i               2   18[BANK0 ] int 
   341 ;; Return value:  Size  Location     Type
   342 ;;                  1    wreg      void 
   343 ;; Registers used:
   344 ;;		wreg, status,2, status,0
   345 ;; Tracked objects:
   346 ;;		On entry : 0/0
   347 ;;		On exit  : 0/0
   348 ;;		Unchanged: 0/0
   349 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   350 ;;      Params:         0       2       0       0
   351 ;;      Locals:         0       2       0       0
   352 ;;      Temps:          0       1       0       0
   353 ;;      Totals:         0       5       0       0
   354 ;;Total ram usage:        5 bytes
   355 ;; Hardware stack levels used:    1
   356 ;; Hardware stack levels required when called:    2
   357 ;; This function calls:
   358 ;;		Nothing
   359 ;; This function is called by:
   360 ;;		_main
   361 ;; This function uses a non-reentrant model
   362 ;;
   363                           
   364                           
   365                           ;psect for function _resetearSalidas
   366  00CD                     _resetearSalidas:	
   367                           
   368                           ;main.c: 25: for(int i = 0; i < cantidadSalidas; i = i + 1)
   369                           
   370                           ;incstack = 0
   371                           ; Regs used in _resetearSalidas: [wreg+status,2+status,0]
   372  00CD  1283               	bcf	3,5	;RP0=0, select bank0
   373  00CE  1303               	bcf	3,6	;RP1=0, select bank0
   374  00CF  01B2               	clrf	resetearSalidas@i
   375  00D0  01B3               	clrf	resetearSalidas@i+1
   376  00D1                     l751:	
   377  00D1  0833               	movf	resetearSalidas@i+1,w
   378  00D2  3A80               	xorlw	128
   379  00D3  00B1               	movwf	??_resetearSalidas
   380  00D4  0830               	movf	resetearSalidas@cantidadSalidas+1,w
   381  00D5  3A80               	xorlw	128
   382  00D6  0231               	subwf	??_resetearSalidas,w
   383  00D7  1D03               	skipz
   384  00D8  28DB               	goto	u275
   385  00D9  082F               	movf	resetearSalidas@cantidadSalidas,w
   386  00DA  0232               	subwf	resetearSalidas@i,w
   387  00DB                     u275:	
   388  00DB  1803               	btfsc	3,0
   389  00DC  28EB               	goto	l41
   390                           
   391                           ;main.c: 26: {
   392                           ;main.c: 27: RA0 = 0;
   393  00DD  1283               	bcf	3,5	;RP0=0, select bank0
   394  00DE  1303               	bcf	3,6	;RP1=0, select bank0
   395  00DF  1005               	bcf	5,0	;volatile
   396                           
   397                           ;main.c: 28: RA1 = 1;
   398  00E0  1485               	bsf	5,1	;volatile
   399                           
   400                           ;main.c: 29: RA1 = 0;
   401  00E1  1085               	bcf	5,1	;volatile
   402  00E2  0832               	movf	resetearSalidas@i,w
   403  00E3  3E01               	addlw	1
   404  00E4  00B2               	movwf	resetearSalidas@i
   405  00E5  0833               	movf	resetearSalidas@i+1,w
   406  00E6  1803               	skipnc
   407  00E7  3E01               	addlw	1
   408  00E8  3E00               	addlw	0
   409  00E9  00B3               	movwf	resetearSalidas@i+1
   410  00EA  28D1               	goto	l751
   411  00EB                     l41:	
   412                           
   413                           ;main.c: 30: }
   414                           ;main.c: 31: RA2 = 1;
   415  00EB  1283               	bcf	3,5	;RP0=0, select bank0
   416  00EC  1303               	bcf	3,6	;RP1=0, select bank0
   417  00ED  1505               	bsf	5,2	;volatile
   418                           
   419                           ;main.c: 32: RA2 = 0;
   420  00EE  1105               	bcf	5,2	;volatile
   421  00EF  0008               	return
   422  00F0                     __end_of_resetearSalidas:	
   423                           
   424                           	psect	text2
   425  0108                     __ptext2:	
   426 ;; *************** function _InitUART *****************
   427 ;; Defined at:
   428 ;;		line 3 in file "UART.c"
   429 ;; Parameters:    Size  Location     Type
   430 ;;		None
   431 ;; Auto vars:     Size  Location     Type
   432 ;;		None
   433 ;; Return value:  Size  Location     Type
   434 ;;                  1    wreg      void 
   435 ;; Registers used:
   436 ;;		wreg
   437 ;; Tracked objects:
   438 ;;		On entry : 0/0
   439 ;;		On exit  : 0/0
   440 ;;		Unchanged: 0/0
   441 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   442 ;;      Params:         0       0       0       0
   443 ;;      Locals:         0       0       0       0
   444 ;;      Temps:          0       0       0       0
   445 ;;      Totals:         0       0       0       0
   446 ;;Total ram usage:        0 bytes
   447 ;; Hardware stack levels used:    1
   448 ;; Hardware stack levels required when called:    2
   449 ;; This function calls:
   450 ;;		Nothing
   451 ;; This function is called by:
   452 ;;		_main
   453 ;; This function uses a non-reentrant model
   454 ;;
   455                           
   456                           
   457                           ;psect for function _InitUART
   458  0108                     _InitUART:	
   459                           
   460                           ;UART.c: 6: SPBRG = 12;
   461                           
   462                           ;incstack = 0
   463                           ; Regs used in _InitUART: [wreg]
   464  0108  300C               	movlw	12
   465  0109  1683               	bsf	3,5	;RP0=1, select bank1
   466  010A  1303               	bcf	3,6	;RP1=0, select bank1
   467  010B  0099               	movwf	25	;volatile
   468                           
   469                           ;UART.c: 7: BRGH = 1;
   470  010C  1518               	bsf	24,2	;volatile
   471                           
   472                           ;UART.c: 8: SYNC = 0;
   473  010D  1218               	bcf	24,4	;volatile
   474                           
   475                           ;UART.c: 9: SPEN = 1;
   476  010E  1283               	bcf	3,5	;RP0=0, select bank0
   477  010F  1303               	bcf	3,6	;RP1=0, select bank0
   478  0110  1798               	bsf	24,7	;volatile
   479                           
   480                           ;UART.c: 10: CREN = 1;
   481  0111  1618               	bsf	24,4	;volatile
   482                           
   483                           ;UART.c: 11: SREN = 0;
   484  0112  1298               	bcf	24,5	;volatile
   485                           
   486                           ;UART.c: 12: TXIE = 0;
   487  0113  1683               	bsf	3,5	;RP0=1, select bank1
   488  0114  1303               	bcf	3,6	;RP1=0, select bank1
   489  0115  120C               	bcf	12,4	;volatile
   490                           
   491                           ;UART.c: 13: RCIE = 1;
   492  0116  168C               	bsf	12,5	;volatile
   493                           
   494                           ;UART.c: 14: TX9 = 0;
   495  0117  1318               	bcf	24,6	;volatile
   496                           
   497                           ;UART.c: 15: RX9 = 0;
   498  0118  1283               	bcf	3,5	;RP0=0, select bank0
   499  0119  1303               	bcf	3,6	;RP1=0, select bank0
   500  011A  1318               	bcf	24,6	;volatile
   501                           
   502                           ;UART.c: 16: TXEN = 0;
   503  011B  1683               	bsf	3,5	;RP0=1, select bank1
   504  011C  1303               	bcf	3,6	;RP1=0, select bank1
   505  011D  1298               	bcf	24,5	;volatile
   506                           
   507                           ;UART.c: 17: TXEN = 1;
   508  011E  1698               	bsf	24,5	;volatile
   509  011F  0008               	return
   510  0120                     __end_of_InitUART:	
   511                           
   512                           	psect	text3
   513  001F                     __ptext3:	
   514 ;; *************** function _ISR *****************
   515 ;; Defined at:
   516 ;;		line 48 in file "main.c"
   517 ;; Parameters:    Size  Location     Type
   518 ;;		None
   519 ;; Auto vars:     Size  Location     Type
   520 ;;		None
   521 ;; Return value:  Size  Location     Type
   522 ;;                  1    wreg      void 
   523 ;; Registers used:
   524 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   525 ;; Tracked objects:
   526 ;;		On entry : 0/0
   527 ;;		On exit  : 0/0
   528 ;;		Unchanged: 0/0
   529 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   530 ;;      Params:         0       0       0       0
   531 ;;      Locals:         0       0       0       0
   532 ;;      Temps:          0      15       0       0
   533 ;;      Totals:         0      15       0       0
   534 ;;Total ram usage:       15 bytes
   535 ;; Hardware stack levels used:    1
   536 ;; Hardware stack levels required when called:    1
   537 ;; This function calls:
   538 ;;		_escribirSalida
   539 ;; This function is called by:
   540 ;;		Interrupt level 1
   541 ;; This function uses a non-reentrant model
   542 ;;
   543                           
   544                           
   545                           ;psect for function _ISR
   546  001F                     _ISR:	
   547                           
   548                           ;main.c: 51: if(RCIF)
   549  001F  1E8C               	btfss	12,5	;volatile
   550  0020  287D               	goto	i1l57
   551                           
   552                           ;main.c: 52: {
   553                           ;main.c: 53: x=RCREG;
   554  0021  081A               	movf	26,w	;volatile
   555  0022  00A0               	movwf	??_ISR
   556  0023  01A1               	clrf	??_ISR+1
   557  0024  01A2               	clrf	??_ISR+2
   558  0025  01A3               	clrf	??_ISR+3
   559  0026  0823               	movf	??_ISR+3,w
   560  0027  00B7               	movwf	_x+3
   561  0028  0822               	movf	??_ISR+2,w
   562  0029  00B6               	movwf	_x+2
   563  002A  0821               	movf	??_ISR+1,w
   564  002B  00B5               	movwf	_x+1
   565  002C  0820               	movf	??_ISR,w
   566  002D  00B4               	movwf	_x
   567                           
   568                           ;main.c: 54: if(OERR)
   569  002E  1C98               	btfss	24,1	;volatile
   570  002F  2832               	goto	i1l715
   571                           
   572                           ;main.c: 55: {
   573                           ;main.c: 56: CREN = 0;
   574  0030  1218               	bcf	24,4	;volatile
   575                           
   576                           ;main.c: 57: CREN = 1;
   577  0031  1618               	bsf	24,4	;volatile
   578  0032                     i1l715:	
   579                           
   580                           ;main.c: 58: }
   581                           ;main.c: 59: if(dataLength > 0)
   582  0032  0874               	movf	_dataLength,w
   583  0033  0475               	iorwf	_dataLength+1,w
   584  0034  1903               	btfsc	3,2
   585  0035  2870               	goto	i1l54
   586                           
   587                           ;main.c: 60: {
   588                           ;main.c: 61: RB7=1;
   589  0036  1786               	bsf	6,7	;volatile
   590                           
   591                           ;main.c: 62: dataLength--;
   592  0037  3001               	movlw	1
   593  0038  02F4               	subwf	_dataLength,f
   594  0039  3000               	movlw	0
   595  003A  1C03               	skipc
   596  003B  03F5               	decf	_dataLength+1,f
   597  003C  02F5               	subwf	_dataLength+1,f
   598                           
   599                           ;main.c: 63: palabra = palabra | (1 << x);
   600  003D  0870               	movf	_palabra,w
   601  003E  00A0               	movwf	??_ISR
   602  003F  0871               	movf	_palabra+1,w
   603  0040  00A1               	movwf	??_ISR+1
   604  0041  0872               	movf	_palabra+2,w
   605  0042  00A2               	movwf	??_ISR+2
   606  0043  0873               	movf	_palabra+3,w
   607  0044  00A3               	movwf	??_ISR+3
   608  0045  0A34               	incf	_x,w
   609  0046  00A4               	movwf	??_ISR+4
   610  0047  3001               	movlw	1
   611  0048  00A5               	movwf	??_ISR+5
   612  0049  3000               	movlw	0
   613  004A  00A6               	movwf	??_ISR+6
   614  004B  284F               	goto	u25_24
   615  004C                     u25_25:	
   616  004C  1003               	clrc
   617  004D  0DA5               	rlf	??_ISR+5,f
   618  004E  0DA6               	rlf	??_ISR+6,f
   619  004F                     u25_24:	
   620  004F  0BA4               	decfsz	??_ISR+4,f
   621  0050  284C               	goto	u25_25
   622  0051  0825               	movf	??_ISR+5,w
   623  0052  00A7               	movwf	??_ISR+7
   624  0053  0826               	movf	??_ISR+6,w
   625  0054  00A8               	movwf	??_ISR+8
   626  0055  3000               	movlw	0
   627  0056  1BA8               	btfsc	??_ISR+8,7
   628  0057  30FF               	movlw	255
   629  0058  00A9               	movwf	??_ISR+9
   630  0059  00AA               	movwf	??_ISR+10
   631  005A  0827               	movf	??_ISR+7,w
   632  005B  04A0               	iorwf	??_ISR,f
   633  005C  0828               	movf	??_ISR+8,w
   634  005D  04A1               	iorwf	??_ISR+1,f
   635  005E  0829               	movf	??_ISR+9,w
   636  005F  04A2               	iorwf	??_ISR+2,f
   637  0060  082A               	movf	??_ISR+10,w
   638  0061  04A3               	iorwf	??_ISR+3,f
   639  0062  0823               	movf	??_ISR+3,w
   640  0063  00F3               	movwf	_palabra+3
   641  0064  0822               	movf	??_ISR+2,w
   642  0065  00F2               	movwf	_palabra+2
   643  0066  0821               	movf	??_ISR+1,w
   644  0067  00F1               	movwf	_palabra+1
   645  0068  0820               	movf	??_ISR,w
   646  0069  00F0               	movwf	_palabra
   647                           
   648                           ;main.c: 65: if(dataLength <= 0) escribirSalida();
   649  006A  0874               	movf	_dataLength,w
   650  006B  0475               	iorwf	_dataLength+1,w
   651  006C  1D03               	btfss	3,2
   652  006D  287D               	goto	i1l57
   653  006E  208A               	fcall	_escribirSalida
   654                           
   655                           ;main.c: 66: }
   656  006F  287D               	goto	i1l57
   657  0070                     i1l54:	
   658                           
   659                           ;main.c: 67: else
   660                           ;main.c: 68: {
   661                           ;main.c: 69: RB6=1;
   662  0070  1706               	bsf	6,6	;volatile
   663                           
   664                           ;main.c: 70: palabra = 0;
   665  0071  3000               	movlw	0
   666  0072  00F3               	movwf	_palabra+3
   667  0073  3000               	movlw	0
   668  0074  00F2               	movwf	_palabra+2
   669  0075  3000               	movlw	0
   670  0076  00F1               	movwf	_palabra+1
   671  0077  3000               	movlw	0
   672  0078  00F0               	movwf	_palabra
   673                           
   674                           ;main.c: 71: dataLength = x;
   675  0079  0835               	movf	_x+1,w
   676  007A  00F5               	movwf	_dataLength+1
   677  007B  0834               	movf	_x,w
   678  007C  00F4               	movwf	_dataLength
   679  007D                     i1l57:	
   680  007D  1283               	bcf	3,5	;RP0=0, select bank0
   681  007E  1303               	bcf	3,6	;RP1=0, select bank0
   682  007F  082E               	movf	??_ISR+14,w
   683  0080  00FF               	movwf	127
   684  0081  082D               	movf	??_ISR+13,w
   685  0082  008A               	movwf	10
   686  0083  082C               	movf	??_ISR+12,w
   687  0084  0084               	movwf	4
   688  0085  0E2B               	swapf	(??_ISR+11)^0,w
   689  0086  0083               	movwf	3
   690  0087  0EFE               	swapf	126,f
   691  0088  0E7E               	swapf	126,w
   692  0089  0009               	retfie
   693  008A                     __end_of_ISR:	
   694                           
   695                           	psect	intentry
   696  0004                     __pintentry:	
   697                           ;incstack = 0
   698                           ; Regs used in _ISR: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   699                           
   700  0004                     interrupt_function:	
   701  007E                     saved_w	set	btemp
   702  0004  00FE               	movwf	btemp
   703  0005  0E03               	swapf	3,w
   704  0006  1283               	bcf	3,5	;RP0=0, select bank0
   705  0007  1303               	bcf	3,6	;RP1=0, select bank0
   706  0008  00AB               	movwf	??_ISR+11
   707  0009  0804               	movf	4,w
   708  000A  00AC               	movwf	??_ISR+12
   709  000B  080A               	movf	10,w
   710  000C  00AD               	movwf	??_ISR+13
   711  000D  087F               	movf	btemp+1,w
   712  000E  00AE               	movwf	??_ISR+14
   713  000F  281F               	ljmp	_ISR
   714                           
   715                           	psect	text4
   716  008A                     __ptext4:	
   717 ;; *************** function _escribirSalida *****************
   718 ;; Defined at:
   719 ;;		line 35 in file "main.c"
   720 ;; Parameters:    Size  Location     Type
   721 ;;		None
   722 ;; Auto vars:     Size  Location     Type
   723 ;;  i               2    4[COMMON] int 
   724 ;; Return value:  Size  Location     Type
   725 ;;                  1    wreg      void 
   726 ;; Registers used:
   727 ;;		wreg, status,2, status,0, btemp+1
   728 ;; Tracked objects:
   729 ;;		On entry : 0/0
   730 ;;		On exit  : 0/0
   731 ;;		Unchanged: 0/0
   732 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   733 ;;      Params:         0       0       0       0
   734 ;;      Locals:         2       0       0       0
   735 ;;      Temps:          4       0       0       0
   736 ;;      Totals:         6       0       0       0
   737 ;;Total ram usage:        6 bytes
   738 ;; Hardware stack levels used:    1
   739 ;; This function calls:
   740 ;;		Nothing
   741 ;; This function is called by:
   742 ;;		_ISR
   743 ;; This function uses a non-reentrant model
   744 ;;
   745                           
   746                           
   747                           ;psect for function _escribirSalida
   748  008A                     _escribirSalida:	
   749                           
   750                           ;main.c: 37: for(int i = 0; i < 61; i++)
   751                           
   752                           ;incstack = 0
   753                           ; Regs used in _escribirSalida: [wreg+status,2+status,0+btemp+1]
   754  008A  01FA               	clrf	escribirSalida@i
   755  008B  01FB               	clrf	escribirSalida@i+1
   756  008C  087B               	movf	escribirSalida@i+1,w
   757  008D  3A80               	xorlw	128
   758  008E  00FF               	movwf	127
   759  008F  3080               	movlw	128
   760  0090  027F               	subwf	127,w
   761  0091  1D03               	skipz
   762  0092  2895               	goto	u17_25
   763  0093  303D               	movlw	61
   764  0094  027A               	subwf	escribirSalida@i,w
   765  0095                     u17_25:	
   766  0095  1803               	btfsc	3,0
   767  0096  28C8               	goto	i1l46
   768  0097                     i1l697:	
   769                           
   770                           ;main.c: 38: {
   771                           ;main.c: 39: RA0 = ((palabra >> (61 - i)) & 1);
   772  0097  0870               	movf	_palabra,w
   773  0098  00F6               	movwf	??_escribirSalida
   774  0099  0871               	movf	_palabra+1,w
   775  009A  00F7               	movwf	??_escribirSalida+1
   776  009B  0872               	movf	_palabra+2,w
   777  009C  00F8               	movwf	??_escribirSalida+2
   778  009D  0873               	movf	_palabra+3,w
   779  009E  00F9               	movwf	??_escribirSalida+3
   780  009F  037A               	decf	escribirSalida@i,w
   781  00A0  3AFF               	xorlw	255
   782  00A1  3E3D               	addlw	61
   783  00A2  3E01               	addlw	1
   784  00A3  28A9               	goto	u18_20
   785  00A4                     u18_25:	
   786  00A4  1003               	clrc
   787  00A5  0CF9               	rrf	??_escribirSalida+3,f
   788  00A6  0CF8               	rrf	??_escribirSalida+2,f
   789  00A7  0CF7               	rrf	??_escribirSalida+1,f
   790  00A8  0CF6               	rrf	??_escribirSalida,f
   791  00A9                     u18_20:	
   792  00A9  3EFF               	addlw	-1
   793  00AA  1D03               	skipz
   794  00AB  28A4               	goto	u18_25
   795  00AC  1C76               	btfss	??_escribirSalida,0
   796  00AD  28B2               	goto	u19_20
   797  00AE  1283               	bcf	3,5	;RP0=0, select bank0
   798  00AF  1303               	bcf	3,6	;RP1=0, select bank0
   799  00B0  1405               	bsf	5,0	;volatile
   800  00B1  28B5               	goto	i1l699
   801  00B2                     u19_20:	
   802  00B2  1283               	bcf	3,5	;RP0=0, select bank0
   803  00B3  1303               	bcf	3,6	;RP1=0, select bank0
   804  00B4  1005               	bcf	5,0	;volatile
   805  00B5                     i1l699:	
   806                           
   807                           ;main.c: 40: RA1 = 1;
   808  00B5  1485               	bsf	5,1	;volatile
   809                           
   810                           ;main.c: 41: RA1 = 0;
   811  00B6  1085               	bcf	5,1	;volatile
   812  00B7  3001               	movlw	1
   813  00B8  07FA               	addwf	escribirSalida@i,f
   814  00B9  1803               	skipnc
   815  00BA  0AFB               	incf	escribirSalida@i+1,f
   816  00BB  3000               	movlw	0
   817  00BC  07FB               	addwf	escribirSalida@i+1,f
   818  00BD  087B               	movf	escribirSalida@i+1,w
   819  00BE  3A80               	xorlw	128
   820  00BF  00FF               	movwf	127
   821  00C0  3080               	movlw	128
   822  00C1  027F               	subwf	127,w
   823  00C2  1D03               	skipz
   824  00C3  28C6               	goto	u21_25
   825  00C4  303D               	movlw	61
   826  00C5  027A               	subwf	escribirSalida@i,w
   827  00C6                     u21_25:	
   828  00C6  1C03               	skipc
   829  00C7  2897               	goto	i1l697
   830  00C8                     i1l46:	
   831                           
   832                           ;main.c: 42: }
   833                           ;main.c: 43: RA2 = 1;
   834  00C8  1283               	bcf	3,5	;RP0=0, select bank0
   835  00C9  1303               	bcf	3,6	;RP1=0, select bank0
   836  00CA  1505               	bsf	5,2	;volatile
   837                           
   838                           ;main.c: 44: RA2 = 0;
   839  00CB  1105               	bcf	5,2	;volatile
   840  00CC  0008               	return
   841  00CD                     __end_of_escribirSalida:	
   842  007E                     btemp	set	126	;btemp
   843  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         10
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      12
    BANK0            80     20      24
    BANK1            80      0       0
    BANK2            48      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_escribirSalida

Critical Paths under _main in BANK0

    _main->_resetearSalidas

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     164
                           _InitUART
                    _resetearSalidas
 ---------------------------------------------------------------------------------
 (1) _resetearSalidas                                      5     3      2     164
                                             15 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (1) _InitUART                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _ISR                                                 15    15      0      68
                                              0 BANK0     15    15      0
                     _escribirSalida
 ---------------------------------------------------------------------------------
 (3) _escribirSalida                                       6     6      0      68
                                              0 COMMON     6     6      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _InitUART
   _resetearSalidas

 _ISR (ROOT)
   _escribirSalida

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA              80      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      6       C       1       85.7%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BANK0               50     14      18       3       30.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      24       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK2            30      0       0       8        0.0%
BANK2               30      0       0       9        0.0%
DATA                 0      0      24      10        0.0%


Microchip Technology PIC Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Tue Nov 14 13:12:02 2017

                             _x 0034                     __CFG_CP$OFF 0000                              l41 00EB  
                            l62 0107         __size_of_escribirSalida 0043                             l751 00D1  
                           _GIE 005F                             _RA0 0028                             _RA1 0029  
                           _RA2 002A                             _RB6 0036                             _RB7 0037  
                  __CFG_CPD$OFF 0000                             u275 00DB                             _ISR 001F  
                           _RX9 00C6                             _TX9 04C6                             fsr0 0004  
                  __CFG_LVP$OFF 0000                            ?_ISR 0076                            _BRGH 04C2  
                          _CREN 00C4                            _PEIE 005E                            _RCIE 0465  
                          _RCIF 0065                            i1l46 00C8                            i1l54 0070  
                          i1l57 007D                            _OERR 00C1                            _SPEN 00C7  
                          _SREN 00C5                            _TXIE 0464                            _TXEN 04C5  
                          _TXIF 0064                            _SYNC 04C4                            _main 00F0  
                          btemp 007E                   __CFG_BOREN$ON 0000                            start 0010  
                         ??_ISR 0020                           ?_main 0076                   __CFG_WDTE$OFF 0000  
                         _CMCON 001F                           i1l715 0032                           i1l697 0097  
                         i1l699 00B5                           _RCREG 001A                           u21_25 00C6  
                         u25_24 004F                           u17_25 0095                           u25_25 004C  
                         u18_20 00A9                           _SPBRG 0099                           u18_25 00A4  
                         u19_20 00B2                           _TRISA 0085                           _TRISB 0086  
                         _TXREG 0019                           pclath 000A                           status 0003  
                         wtemp0 007E                  __CFG_MCLRE$OFF 0000                 __initialization 0011  
              ?_resetearSalidas 002F                    __end_of_main 0108                __end_of_InitUART 0120  
                        ??_main 0034                  __CFG_PWRTE$OFF 0000                  _escribirSalida 008A  
                        saved_w 007E         __end_of__initialization 001D                  __pcstackCOMMON 0076  
        __end_of_escribirSalida 00CD                      _dataLength 0074                      __pbssBANK0 0034  
                     ?_InitUART 0076                      __pmaintext 00F0                      __pintentry 0004  
               ?_escribirSalida 0076                      ??_InitUART 002F                         __ptext1 00CD  
                       __ptext2 0108                         __ptext3 001F                         __ptext4 008A  
                  __size_of_ISR 006B                         _palabra 0070            end_of_initialization 001D  
      __size_of_resetearSalidas 0023             start_initialization 0011                     __end_of_ISR 008A  
             __size_of_InitUART 0018                ??_escribirSalida 0076                     __pbssCOMMON 0070  
                     ___latbits 0000                   __pcstackBANK0 0020               ??_resetearSalidas 0031  
              resetearSalidas@i 0032               interrupt_function 0004                        _InitUART 0108  
                 __size_of_main 0018                 _resetearSalidas 00CD                        intlevel1 0000  
resetearSalidas@cantidadSalidas 002F                 escribirSalida@i 007A              __CFG_FOSC$INTOSCIO 0000  
       __end_of_resetearSalidas 00F0  
