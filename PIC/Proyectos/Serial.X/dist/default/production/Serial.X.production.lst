

Microchip Technology PIC LITE Macro Assembler V1.44 build -154322312 
                                                                                               Fri Nov 17 08:34:56 2017

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	16F628A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	clrtext,global,class=CODE,delta=2
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	maintext,global,class=CODE,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2
    13                           	psect	text3,local,class=CODE,merge=1,delta=2
    14                           	psect	text4,local,class=CODE,merge=1,delta=2
    15                           	psect	intentry,global,class=CODE,delta=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2
    18                           	dabs	1,0x7E,2
    19  0000                     
    20                           ; Version 1.44
    21                           ; Generated 14/09/2017 GMT
    22                           ; 
    23                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    24                           ; All rights reserved.
    25                           ; 
    26                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    27                           ; 
    28                           ; Redistribution and use in source and binary forms, with or without modification, are
    29                           ; permitted provided that the following conditions are met:
    30                           ; 
    31                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    32                           ;        conditions and the following disclaimer.
    33                           ; 
    34                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    35                           ;        of conditions and the following disclaimer in the documentation and/or other
    36                           ;        materials provided with the distribution.
    37                           ; 
    38                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    39                           ;        software without specific prior written permission.
    40                           ; 
    41                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    42                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    43                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    44                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    45                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    46                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    47                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    48                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    49                           ; 
    50                           ; 
    51                           ; Code-generator required, PIC16F628A Definitions
    52                           ; 
    53                           ; SFR Addresses
    54  0000                     	;# 
    55  0001                     	;# 
    56  0002                     	;# 
    57  0003                     	;# 
    58  0004                     	;# 
    59  0005                     	;# 
    60  0006                     	;# 
    61  000A                     	;# 
    62  000B                     	;# 
    63  000C                     	;# 
    64  000E                     	;# 
    65  000E                     	;# 
    66  000F                     	;# 
    67  0010                     	;# 
    68  0011                     	;# 
    69  0012                     	;# 
    70  0015                     	;# 
    71  0015                     	;# 
    72  0016                     	;# 
    73  0017                     	;# 
    74  0018                     	;# 
    75  0019                     	;# 
    76  001A                     	;# 
    77  001F                     	;# 
    78  0081                     	;# 
    79  0085                     	;# 
    80  0086                     	;# 
    81  008C                     	;# 
    82  008E                     	;# 
    83  0092                     	;# 
    84  0098                     	;# 
    85  0099                     	;# 
    86  009A                     	;# 
    87  009B                     	;# 
    88  009C                     	;# 
    89  009D                     	;# 
    90  009F                     	;# 
    91  001A                     _RCREG	set	26
    92  001F                     _CMCON	set	31
    93  00C1                     _OERR	set	193
    94  00C6                     _RX9	set	198
    95  00C5                     _SREN	set	197
    96  00C4                     _CREN	set	196
    97  00C7                     _SPEN	set	199
    98  002A                     _RA2	set	42
    99  0029                     _RA1	set	41
   100  0028                     _RA0	set	40
   101  0065                     _RCIF	set	101
   102  002C                     _RA4	set	44
   103  005E                     _PEIE	set	94
   104  005F                     _GIE	set	95
   105  002B                     _RA3	set	43
   106  0099                     _SPBRG	set	153
   107  0085                     _TRISA	set	133
   108  04C5                     _TXEN	set	1221
   109  04C6                     _TX9	set	1222
   110  0465                     _RCIE	set	1125
   111  0464                     _TXIE	set	1124
   112  04C4                     _SYNC	set	1220
   113  04C2                     _BRGH	set	1218
   114                           
   115                           ; #config settings
   116  0000                     
   117                           	psect	cinit
   118  0011                     start_initialization:	
   119  0011                     __initialization:	
   120                           
   121                           ; Clear objects allocated to COMMON
   122  0011  3077               	movlw	low __pbssCOMMON
   123  0012  0084               	movwf	4
   124  0013  307D               	movlw	low (__pbssCOMMON+6)
   125  0014  21CF               	fcall	clear_ram0
   126                           
   127                           ; Clear objects allocated to BANK0
   128  0015  1383               	bcf	3,7	;select IRP bank0
   129  0016  3038               	movlw	low __pbssBANK0
   130  0017  0084               	movwf	4
   131  0018  3042               	movlw	low (__pbssBANK0+10)
   132  0019  21CF               	fcall	clear_ram0
   133  001A                     end_of_initialization:	
   134                           ;End of C runtime variable initialization code
   135                           
   136  001A                     __end_of__initialization:	
   137  001A  0183               	clrf	3
   138  001B  296A               	ljmp	_main	;jump to C main() function
   139                           
   140                           	psect	bssCOMMON
   141  0077                     __pbssCOMMON:	
   142  0077                     _lectura:	
   143  0077                     	ds	2
   144  0079                     _dataLength:	
   145  0079                     	ds	2
   146  007B                     _indice:	
   147  007B                     	ds	2
   148                           
   149                           	psect	bssBANK0
   150  0038                     __pbssBANK0:	
   151  0038                     _palabras:	
   152  0038                     	ds	8
   153  0040                     _trama:	
   154  0040                     	ds	2
   155                           
   156                           	psect	clrtext
   157  01CF                     clear_ram0:	
   158                           ;	Called with FSR containing the base address, and
   159                           ;	W with the last address+1
   160                           
   161  01CF  0064               	clrwdt	;clear the watchdog before getting into this loop
   162  01D0                     clrloop0:	
   163  01D0  0180               	clrf	0	;clear RAM location pointed to by FSR
   164  01D1  0A84               	incf	4,f	;increment pointer
   165  01D2  0604               	xorwf	4,w	;XOR with final address
   166  01D3  1903               	btfsc	3,2	;have we reached the end yet?
   167  01D4  3400               	retlw	0	;all done for this memory range, return
   168  01D5  0604               	xorwf	4,w	;XOR again to restore value
   169  01D6  29D0               	goto	clrloop0	;do the next byte
   170                           
   171                           	psect	cstackCOMMON
   172  0070                     __pcstackCOMMON:	
   173  0070                     ?_InitUART:	
   174  0070                     ?_resetDatos:	
   175                           ; 1 bytes @ 0x0
   176                           
   177  0070                     ?_ReceiveByteSerially:	
   178                           ; 1 bytes @ 0x0
   179                           
   180  0070                     ??_ReceiveByteSerially:	
   181                           ; 1 bytes @ 0x0
   182                           
   183  0070                     ?_escribirSalida:	
   184                           ; 1 bytes @ 0x0
   185                           
   186  0070                     ??_escribirSalida:	
   187                           ; 1 bytes @ 0x0
   188                           
   189  0070                     ?_main:	
   190                           ; 1 bytes @ 0x0
   191                           
   192  0070                     ?_ISR:	
   193                           ; 1 bytes @ 0x0
   194                           
   195                           
   196                           ; 1 bytes @ 0x0
   197  0070                     	ds	3
   198  0073                     escribirSalida@i:	
   199                           
   200                           ; 2 bytes @ 0x3
   201  0073                     	ds	2
   202  0075                     escribirSalida@k:	
   203                           
   204                           ; 2 bytes @ 0x5
   205  0075                     	ds	2
   206                           
   207                           	psect	cstackBANK0
   208  0020                     __pcstackBANK0:	
   209  0020                     ??_ISR:	
   210                           
   211                           ; 1 bytes @ 0x0
   212  0020                     	ds	14
   213  002E                     ??_InitUART:	
   214  002E                     ?_resetearSalidas:	
   215                           ; 1 bytes @ 0xE
   216                           
   217  002E                     ??_resetDatos:	
   218                           ; 1 bytes @ 0xE
   219                           
   220  002E                     resetearSalidas@cantidadSalidas:	
   221                           ; 1 bytes @ 0xE
   222                           
   223                           
   224                           ; 2 bytes @ 0xE
   225  002E                     	ds	2
   226  0030                     ??_resetearSalidas:	
   227                           
   228                           ; 1 bytes @ 0x10
   229  0030                     	ds	1
   230  0031                     resetearSalidas@i:	
   231  0031                     resetDatos@i:	
   232                           ; 2 bytes @ 0x11
   233                           
   234                           
   235                           ; 2 bytes @ 0x11
   236  0031                     	ds	2
   237  0033                     resetDatos@j:	
   238                           
   239                           ; 2 bytes @ 0x13
   240  0033                     	ds	2
   241  0035                     ??_main:	
   242                           
   243                           ; 1 bytes @ 0x15
   244  0035                     	ds	3
   245                           
   246                           	psect	maintext
   247  016A                     __pmaintext:	
   248 ;;
   249 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   250 ;;
   251 ;; *************** function _main *****************
   252 ;; Defined at:
   253 ;;		line 35 in file "main.c"
   254 ;; Parameters:    Size  Location     Type
   255 ;;		None
   256 ;; Auto vars:     Size  Location     Type
   257 ;;		None
   258 ;; Return value:  Size  Location     Type
   259 ;;                  1    wreg      void 
   260 ;; Registers used:
   261 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   262 ;; Tracked objects:
   263 ;;		On entry : B00/0
   264 ;;		On exit  : 0/0
   265 ;;		Unchanged: 0/0
   266 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   267 ;;      Params:         0       0       0       0
   268 ;;      Locals:         0       0       0       0
   269 ;;      Temps:          0       3       0       0
   270 ;;      Totals:         0       3       0       0
   271 ;;Total ram usage:        3 bytes
   272 ;; Hardware stack levels required when called:    3
   273 ;; This function calls:
   274 ;;		_InitUART
   275 ;;		_resetDatos
   276 ;;		_resetearSalidas
   277 ;; This function is called by:
   278 ;;		Startup code after reset
   279 ;; This function uses a non-reentrant model
   280 ;;
   281                           
   282                           
   283                           ;psect for function _main
   284  016A                     _main:	
   285                           
   286                           ;main.c: 37: CMCON = 0x07;
   287                           
   288                           ;incstack = 0
   289                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   290  016A  3007               	movlw	7
   291  016B  1283               	bcf	3,5	;RP0=0, select bank0
   292  016C  1303               	bcf	3,6	;RP1=0, select bank0
   293  016D  009F               	movwf	31	;volatile
   294                           
   295                           ;main.c: 38: TRISA = 0b00010000;
   296  016E  3010               	movlw	16
   297  016F  1683               	bsf	3,5	;RP0=1, select bank1
   298  0170  1303               	bcf	3,6	;RP1=0, select bank1
   299  0171  0085               	movwf	5	;volatile
   300                           
   301                           ;main.c: 39: RA3 = 0;
   302  0172  1283               	bcf	3,5	;RP0=0, select bank0
   303  0173  1303               	bcf	3,6	;RP1=0, select bank0
   304  0174  1185               	bcf	5,3	;volatile
   305                           
   306                           ;main.c: 41: InitUART();
   307  0175  21B7               	fcall	_InitUART
   308                           
   309                           ;main.c: 43: GIE = 1;
   310  0176  178B               	bsf	11,7	;volatile
   311                           
   312                           ;main.c: 44: PEIE = 1;
   313  0177  170B               	bsf	11,6	;volatile
   314                           
   315                           ;main.c: 46: resetearSalidas(64);
   316  0178  3040               	movlw	64
   317  0179  1283               	bcf	3,5	;RP0=0, select bank0
   318  017A  1303               	bcf	3,6	;RP1=0, select bank0
   319  017B  00AE               	movwf	resetearSalidas@cantidadSalidas
   320  017C  3000               	movlw	0
   321  017D  00AF               	movwf	resetearSalidas@cantidadSalidas+1
   322  017E  2194               	fcall	_resetearSalidas
   323  017F                     l881:	
   324                           ;main.c: 48: while(1)
   325                           
   326                           
   327                           ;main.c: 49: {
   328                           ;main.c: 50: if(RA4)
   329  017F  1283               	bcf	3,5	;RP0=0, select bank0
   330  0180  1303               	bcf	3,6	;RP1=0, select bank0
   331  0181  1E05               	btfss	5,4	;volatile
   332  0182  297F               	goto	l881
   333                           
   334                           ;main.c: 51: {
   335                           ;main.c: 52: resetDatos();
   336  0183  2104               	fcall	_resetDatos
   337                           
   338                           ;main.c: 53: _delay((unsigned long)((500)*(4000000/4000.0)));
   339  0184  3003               	movlw	3
   340  0185  1283               	bcf	3,5	;RP0=0, select bank0
   341  0186  1303               	bcf	3,6	;RP1=0, select bank0
   342  0187  00B7               	movwf	??_main+2
   343  0188  308A               	movlw	138
   344  0189  00B6               	movwf	??_main+1
   345  018A  3055               	movlw	85
   346  018B  00B5               	movwf	??_main
   347  018C                     u507:	
   348  018C  0BB5               	decfsz	??_main,f
   349  018D  298C               	goto	u507
   350  018E  0BB6               	decfsz	??_main+1,f
   351  018F  298C               	goto	u507
   352  0190  0BB7               	decfsz	??_main+2,f
   353  0191  298C               	goto	u507
   354  0192  0000               	nop
   355  0193  297F               	goto	l881
   356  0194                     __end_of_main:	
   357                           
   358                           	psect	text1
   359  0194                     __ptext1:	
   360 ;; *************** function _resetearSalidas *****************
   361 ;; Defined at:
   362 ;;		line 101 in file "main.c"
   363 ;; Parameters:    Size  Location     Type
   364 ;;  cantidadSali    2   14[BANK0 ] int 
   365 ;; Auto vars:     Size  Location     Type
   366 ;;  i               2   17[BANK0 ] int 
   367 ;; Return value:  Size  Location     Type
   368 ;;                  1    wreg      void 
   369 ;; Registers used:
   370 ;;		wreg, status,2, status,0
   371 ;; Tracked objects:
   372 ;;		On entry : 0/0
   373 ;;		On exit  : 0/0
   374 ;;		Unchanged: 0/0
   375 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   376 ;;      Params:         0       2       0       0
   377 ;;      Locals:         0       2       0       0
   378 ;;      Temps:          0       1       0       0
   379 ;;      Totals:         0       5       0       0
   380 ;;Total ram usage:        5 bytes
   381 ;; Hardware stack levels used:    1
   382 ;; Hardware stack levels required when called:    2
   383 ;; This function calls:
   384 ;;		Nothing
   385 ;; This function is called by:
   386 ;;		_main
   387 ;; This function uses a non-reentrant model
   388 ;;
   389                           
   390                           
   391                           ;psect for function _resetearSalidas
   392  0194                     _resetearSalidas:	
   393                           
   394                           ;main.c: 103: for(int i = 0; i < cantidadSalidas; i = i + 1)
   395                           
   396                           ;incstack = 0
   397                           ; Regs used in _resetearSalidas: [wreg+status,2+status,0]
   398  0194  1283               	bcf	3,5	;RP0=0, select bank0
   399  0195  1303               	bcf	3,6	;RP1=0, select bank0
   400  0196  01B1               	clrf	resetearSalidas@i
   401  0197  01B2               	clrf	resetearSalidas@i+1
   402  0198                     l729:	
   403  0198  0832               	movf	resetearSalidas@i+1,w
   404  0199  3A80               	xorlw	128
   405  019A  00B0               	movwf	??_resetearSalidas
   406  019B  082F               	movf	resetearSalidas@cantidadSalidas+1,w
   407  019C  3A80               	xorlw	128
   408  019D  0230               	subwf	??_resetearSalidas,w
   409  019E  1D03               	skipz
   410  019F  29A2               	goto	u255
   411  01A0  082E               	movf	resetearSalidas@cantidadSalidas,w
   412  01A1  0231               	subwf	resetearSalidas@i,w
   413  01A2                     u255:	
   414  01A2  1803               	btfsc	3,0
   415  01A3  29B2               	goto	l101
   416                           
   417                           ;main.c: 104: {
   418                           ;main.c: 105: RA0 = 0;
   419  01A4  1283               	bcf	3,5	;RP0=0, select bank0
   420  01A5  1303               	bcf	3,6	;RP1=0, select bank0
   421  01A6  1005               	bcf	5,0	;volatile
   422                           
   423                           ;main.c: 106: RA1 = 1;
   424  01A7  1485               	bsf	5,1	;volatile
   425                           
   426                           ;main.c: 107: RA1 = 0;
   427  01A8  1085               	bcf	5,1	;volatile
   428  01A9  0831               	movf	resetearSalidas@i,w
   429  01AA  3E01               	addlw	1
   430  01AB  00B1               	movwf	resetearSalidas@i
   431  01AC  0832               	movf	resetearSalidas@i+1,w
   432  01AD  1803               	skipnc
   433  01AE  3E01               	addlw	1
   434  01AF  3E00               	addlw	0
   435  01B0  00B2               	movwf	resetearSalidas@i+1
   436  01B1  2998               	goto	l729
   437  01B2                     l101:	
   438                           
   439                           ;main.c: 108: }
   440                           ;main.c: 109: RA2 = 1;
   441  01B2  1283               	bcf	3,5	;RP0=0, select bank0
   442  01B3  1303               	bcf	3,6	;RP1=0, select bank0
   443  01B4  1505               	bsf	5,2	;volatile
   444                           
   445                           ;main.c: 110: RA2 = 0;
   446  01B5  1105               	bcf	5,2	;volatile
   447  01B6  0008               	return
   448  01B7                     __end_of_resetearSalidas:	
   449                           
   450                           	psect	text2
   451  0104                     __ptext2:	
   452 ;; *************** function _resetDatos *****************
   453 ;; Defined at:
   454 ;;		line 143 in file "main.c"
   455 ;; Parameters:    Size  Location     Type
   456 ;;		None
   457 ;; Auto vars:     Size  Location     Type
   458 ;;  j               2   19[BANK0 ] int 
   459 ;;  i               2   17[BANK0 ] int 
   460 ;; Return value:  Size  Location     Type
   461 ;;                  1    wreg      void 
   462 ;; Registers used:
   463 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
   464 ;; Tracked objects:
   465 ;;		On entry : 0/0
   466 ;;		On exit  : 0/0
   467 ;;		Unchanged: 0/0
   468 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   469 ;;      Params:         0       0       0       0
   470 ;;      Locals:         0       4       0       0
   471 ;;      Temps:          0       3       0       0
   472 ;;      Totals:         0       7       0       0
   473 ;;Total ram usage:        7 bytes
   474 ;; Hardware stack levels used:    1
   475 ;; Hardware stack levels required when called:    2
   476 ;; This function calls:
   477 ;;		Nothing
   478 ;; This function is called by:
   479 ;;		_main
   480 ;; This function uses a non-reentrant model
   481 ;;
   482                           
   483                           
   484                           ;psect for function _resetDatos
   485  0104                     _resetDatos:	
   486                           
   487                           ;main.c: 145: for(int i = 0; i < 5; i++)
   488                           
   489                           ;incstack = 0
   490                           ; Regs used in _resetDatos: [wreg-fsr0h+status,2+status,0+btemp+1]
   491  0104  1283               	bcf	3,5	;RP0=0, select bank0
   492  0105  1303               	bcf	3,6	;RP1=0, select bank0
   493  0106  01B1               	clrf	resetDatos@i
   494  0107  01B2               	clrf	resetDatos@i+1
   495  0108                     L1:	
   496  0108  0832               	movf	resetDatos@i+1,w
   497  0109  3A80               	xorlw	128
   498  010A  00FF               	movwf	127
   499  010B  3080               	movlw	128
   500  010C  027F               	subwf	127,w
   501  010D  1D03               	skipz
   502  010E  2911               	goto	u265
   503  010F  3005               	movlw	5
   504  0110  0231               	subwf	resetDatos@i,w
   505  0111                     u265:	
   506  0111  1803               	btfsc	3,0
   507  0112  0008               	return
   508                           
   509                           ;main.c: 146: {
   510                           ;main.c: 147: if(RA4)
   511  0113  1283               	bcf	3,5	;RP0=0, select bank0
   512  0114  1303               	bcf	3,6	;RP1=0, select bank0
   513  0115  1E05               	btfss	5,4	;volatile
   514  0116  2961               	goto	l757
   515                           
   516                           ;main.c: 148: {
   517                           ;main.c: 149: RA3 = 1;
   518  0117  1585               	bsf	5,3	;volatile
   519                           
   520                           ;main.c: 150: _delay((unsigned long)((200)*(4000000/4000.0)));
   521  0118  3002               	movlw	2
   522  0119  1283               	bcf	3,5	;RP0=0, select bank0
   523  011A  1303               	bcf	3,6	;RP1=0, select bank0
   524  011B  00B0               	movwf	??_resetDatos+2
   525  011C  3004               	movlw	4
   526  011D  00AF               	movwf	??_resetDatos+1
   527  011E  30BA               	movlw	186
   528  011F  00AE               	movwf	??_resetDatos
   529  0120                     u517:	
   530  0120  0BAE               	decfsz	??_resetDatos,f
   531  0121  2920               	goto	u517
   532  0122  0BAF               	decfsz	??_resetDatos+1,f
   533  0123  2920               	goto	u517
   534  0124  0BB0               	decfsz	??_resetDatos+2,f
   535  0125  2920               	goto	u517
   536                           
   537                           ;main.c: 151: RA3 = 0;
   538  0126  1283               	bcf	3,5	;RP0=0, select bank0
   539  0127  1303               	bcf	3,6	;RP1=0, select bank0
   540  0128  1185               	bcf	5,3	;volatile
   541                           
   542                           ;main.c: 152: if(i >= 4)
   543  0129  0832               	movf	resetDatos@i+1,w
   544  012A  3A80               	xorlw	128
   545  012B  00FF               	movwf	127
   546  012C  3080               	movlw	128
   547  012D  027F               	subwf	127,w
   548  012E  1D03               	skipz
   549  012F  2932               	goto	u285
   550  0130  3004               	movlw	4
   551  0131  0231               	subwf	resetDatos@i,w
   552  0132                     u285:	
   553  0132  1C03               	skipc
   554  0133  2961               	goto	l757
   555                           
   556                           ;main.c: 153: {
   557                           ;main.c: 154: dataLength = 0;
   558  0134  01F9               	clrf	_dataLength
   559  0135  01FA               	clrf	_dataLength+1
   560                           
   561                           ;main.c: 155: for(int j = 0; j < 4; j++)
   562  0136  1283               	bcf	3,5	;RP0=0, select bank0
   563  0137  1303               	bcf	3,6	;RP1=0, select bank0
   564  0138  01B3               	clrf	resetDatos@j
   565  0139  01B4               	clrf	resetDatos@j+1
   566  013A  0834               	movf	resetDatos@j+1,w
   567  013B  3A80               	xorlw	128
   568  013C  00FF               	movwf	127
   569  013D  3080               	movlw	128
   570  013E  027F               	subwf	127,w
   571  013F  1D03               	skipz
   572  0140  2943               	goto	u295
   573  0141  3004               	movlw	4
   574  0142  0233               	subwf	resetDatos@j,w
   575  0143                     u295:	
   576  0143  1803               	btfsc	3,0
   577  0144  2961               	goto	l757
   578  0145                     l751:	
   579                           
   580                           ;main.c: 156: {
   581                           ;main.c: 157: palabras[j] = 0;
   582  0145  1283               	bcf	3,5	;RP0=0, select bank0
   583  0146  1303               	bcf	3,6	;RP1=0, select bank0
   584  0147  0833               	movf	resetDatos@j,w
   585  0148  00AE               	movwf	??_resetDatos
   586  0149  072E               	addwf	??_resetDatos,w
   587  014A  3E38               	addlw	(low (_palabras| 0))& (0+255)
   588  014B  0084               	movwf	4
   589  014C  1383               	bcf	3,7	;select IRP bank0
   590  014D  0180               	clrf	0
   591  014E  0A84               	incf	4,f
   592  014F  0180               	clrf	0
   593  0150  3001               	movlw	1
   594  0151  07B3               	addwf	resetDatos@j,f
   595  0152  1803               	skipnc
   596  0153  0AB4               	incf	resetDatos@j+1,f
   597  0154  3000               	movlw	0
   598  0155  07B4               	addwf	resetDatos@j+1,f
   599  0156  0834               	movf	resetDatos@j+1,w
   600  0157  3A80               	xorlw	128
   601  0158  00FF               	movwf	127
   602  0159  3080               	movlw	128
   603  015A  027F               	subwf	127,w
   604  015B  1D03               	skipz
   605  015C  295F               	goto	u305
   606  015D  3004               	movlw	4
   607  015E  0233               	subwf	resetDatos@j,w
   608  015F                     u305:	
   609  015F  1C03               	skipc
   610  0160  2945               	goto	l751
   611  0161                     l757:	
   612  0161  3001               	movlw	1
   613  0162  1283               	bcf	3,5	;RP0=0, select bank0
   614  0163  1303               	bcf	3,6	;RP1=0, select bank0
   615  0164  07B1               	addwf	resetDatos@i,f
   616  0165  1803               	skipnc
   617  0166  0AB2               	incf	resetDatos@i+1,f
   618  0167  3000               	movlw	0
   619  0168  07B2               	addwf	resetDatos@i+1,f
   620  0169  2908               	goto	L1
   621  016A                     __end_of_resetDatos:	
   622                           
   623                           	psect	text3
   624  01B7                     __ptext3:	
   625 ;; *************** function _InitUART *****************
   626 ;; Defined at:
   627 ;;		line 113 in file "main.c"
   628 ;; Parameters:    Size  Location     Type
   629 ;;		None
   630 ;; Auto vars:     Size  Location     Type
   631 ;;		None
   632 ;; Return value:  Size  Location     Type
   633 ;;                  1    wreg      void 
   634 ;; Registers used:
   635 ;;		wreg
   636 ;; Tracked objects:
   637 ;;		On entry : 0/0
   638 ;;		On exit  : 0/0
   639 ;;		Unchanged: 0/0
   640 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   641 ;;      Params:         0       0       0       0
   642 ;;      Locals:         0       0       0       0
   643 ;;      Temps:          0       0       0       0
   644 ;;      Totals:         0       0       0       0
   645 ;;Total ram usage:        0 bytes
   646 ;; Hardware stack levels used:    1
   647 ;; Hardware stack levels required when called:    2
   648 ;; This function calls:
   649 ;;		Nothing
   650 ;; This function is called by:
   651 ;;		_main
   652 ;; This function uses a non-reentrant model
   653 ;;
   654                           
   655                           
   656                           ;psect for function _InitUART
   657  01B7                     _InitUART:	
   658                           
   659                           ;main.c: 115: SPBRG = ((4000000/16)/19200) - 1;
   660                           
   661                           ;incstack = 0
   662                           ; Regs used in _InitUART: [wreg]
   663  01B7  300C               	movlw	12
   664  01B8  1683               	bsf	3,5	;RP0=1, select bank1
   665  01B9  1303               	bcf	3,6	;RP1=0, select bank1
   666  01BA  0099               	movwf	25	;volatile
   667                           
   668                           ;main.c: 116: BRGH = 1;
   669  01BB  1518               	bsf	24,2	;volatile
   670                           
   671                           ;main.c: 117: SYNC = 0;
   672  01BC  1218               	bcf	24,4	;volatile
   673                           
   674                           ;main.c: 118: SPEN = 1;
   675  01BD  1283               	bcf	3,5	;RP0=0, select bank0
   676  01BE  1303               	bcf	3,6	;RP1=0, select bank0
   677  01BF  1798               	bsf	24,7	;volatile
   678                           
   679                           ;main.c: 119: CREN = 1;
   680  01C0  1618               	bsf	24,4	;volatile
   681                           
   682                           ;main.c: 120: SREN = 0;
   683  01C1  1298               	bcf	24,5	;volatile
   684                           
   685                           ;main.c: 121: TXIE = 0;
   686  01C2  1683               	bsf	3,5	;RP0=1, select bank1
   687  01C3  1303               	bcf	3,6	;RP1=0, select bank1
   688  01C4  120C               	bcf	12,4	;volatile
   689                           
   690                           ;main.c: 122: RCIE = 1;
   691  01C5  168C               	bsf	12,5	;volatile
   692                           
   693                           ;main.c: 123: TX9 = 0;
   694  01C6  1318               	bcf	24,6	;volatile
   695                           
   696                           ;main.c: 124: RX9 = 0;
   697  01C7  1283               	bcf	3,5	;RP0=0, select bank0
   698  01C8  1303               	bcf	3,6	;RP1=0, select bank0
   699  01C9  1318               	bcf	24,6	;volatile
   700                           
   701                           ;main.c: 125: TXEN = 0;
   702  01CA  1683               	bsf	3,5	;RP0=1, select bank1
   703  01CB  1303               	bcf	3,6	;RP1=0, select bank1
   704  01CC  1298               	bcf	24,5	;volatile
   705                           
   706                           ;main.c: 126: TXEN = 1;
   707  01CD  1698               	bsf	24,5	;volatile
   708  01CE  0008               	return
   709  01CF                     __end_of_InitUART:	
   710                           
   711                           	psect	text4
   712  001C                     __ptext4:	
   713 ;; *************** function _ISR *****************
   714 ;; Defined at:
   715 ;;		line 59 in file "main.c"
   716 ;; Parameters:    Size  Location     Type
   717 ;;		None
   718 ;; Auto vars:     Size  Location     Type
   719 ;;		None
   720 ;; Return value:  Size  Location     Type
   721 ;;                  1    wreg      void 
   722 ;; Registers used:
   723 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   724 ;; Tracked objects:
   725 ;;		On entry : 0/0
   726 ;;		On exit  : 0/0
   727 ;;		Unchanged: 0/0
   728 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   729 ;;      Params:         0       0       0       0
   730 ;;      Locals:         0       0       0       0
   731 ;;      Temps:          0      14       0       0
   732 ;;      Totals:         0      14       0       0
   733 ;;Total ram usage:       14 bytes
   734 ;; Hardware stack levels used:    1
   735 ;; Hardware stack levels required when called:    1
   736 ;; This function calls:
   737 ;;		_ReceiveByteSerially
   738 ;;		_escribirSalida
   739 ;; This function is called by:
   740 ;;		Interrupt level 1
   741 ;; This function uses a non-reentrant model
   742 ;;
   743                           
   744                           
   745                           ;psect for function _ISR
   746  001C                     _ISR:	
   747                           
   748                           ;main.c: 61: if(RCIF)
   749  001C  1E8C               	btfss	12,5	;volatile
   750  001D  288C               	goto	i1l89
   751                           
   752                           ;main.c: 62: {
   753                           ;main.c: 63: lectura = ReceiveByteSerially();
   754  001E  21D7               	fcall	_ReceiveByteSerially
   755  001F  1283               	bcf	3,5	;RP0=0, select bank0
   756  0020  1303               	bcf	3,6	;RP1=0, select bank0
   757  0021  00A0               	movwf	??_ISR
   758  0022  01A1               	clrf	??_ISR+1
   759  0023  0820               	movf	??_ISR,w
   760  0024  00F7               	movwf	_lectura
   761  0025  0821               	movf	??_ISR+1,w
   762  0026  00F8               	movwf	_lectura+1
   763                           
   764                           ;main.c: 64: RA3 = !RA3;
   765  0027  3008               	movlw	8
   766  0028  0685               	xorwf	5,f
   767                           
   768                           ;main.c: 65: if (lectura == 255) trama = 1;
   769  0029  0A77               	incf	_lectura,w
   770  002A  0478               	iorwf	_lectura+1,w
   771  002B  1D03               	btfss	3,2
   772  002C  2831               	goto	i1l825
   773  002D  3001               	movlw	1
   774  002E  00C0               	movwf	_trama
   775  002F  3000               	movlw	0
   776  0030  00C1               	movwf	_trama+1
   777  0031                     i1l825:	
   778                           
   779                           ;main.c: 66: if (lectura == 0) trama = 0;
   780  0031  0877               	movf	_lectura,w
   781  0032  0478               	iorwf	_lectura+1,w
   782  0033  1D03               	btfss	3,2
   783  0034  2837               	goto	i1l829
   784  0035  01C0               	clrf	_trama
   785  0036  01C1               	clrf	_trama+1
   786  0037                     i1l829:	
   787                           
   788                           ;main.c: 67: if(trama)
   789  0037  0840               	movf	_trama,w
   790  0038  0441               	iorwf	_trama+1,w
   791  0039  1903               	btfsc	3,2
   792  003A  288C               	goto	i1l89
   793                           
   794                           ;main.c: 68: {
   795                           ;main.c: 69: if(dataLength > 0)
   796  003B  0879               	movf	_dataLength,w
   797  003C  047A               	iorwf	_dataLength+1,w
   798  003D  1903               	btfsc	3,2
   799  003E  2888               	goto	i1l843
   800                           
   801                           ;main.c: 70: {
   802                           ;main.c: 71: indice = lectura/16;
   803  003F  0E77               	swapf	_lectura,w
   804  0040  390F               	andlw	15
   805  0041  00FB               	movwf	_indice
   806  0042  0E78               	swapf	_lectura+1,w
   807  0043  39F0               	andlw	240
   808  0044  04FB               	iorwf	_indice,f
   809  0045  0E78               	swapf	_lectura+1,w
   810  0046  390F               	andlw	15
   811  0047  00FC               	movwf	_indice+1
   812                           
   813                           ;main.c: 72: dataLength--;
   814  0048  3001               	movlw	1
   815  0049  02F9               	subwf	_dataLength,f
   816  004A  3000               	movlw	0
   817  004B  1C03               	skipc
   818  004C  03FA               	decf	_dataLength+1,f
   819  004D  02FA               	subwf	_dataLength+1,f
   820                           
   821                           ;main.c: 73: palabras[ indice ] = palabras[ indice ] | (1 << (lectura - (indice * 16)));
   822  004E  087B               	movf	_indice,w
   823  004F  00A0               	movwf	??_ISR
   824  0050  0720               	addwf	??_ISR,w
   825  0051  3E38               	addlw	(low (_palabras| 0))& (0+255)
   826  0052  0084               	movwf	4
   827  0053  1383               	bcf	3,7	;select IRP bank0
   828  0054  0800               	movf	0,w
   829  0055  00A1               	movwf	??_ISR+1
   830  0056  0A84               	incf	4,f
   831  0057  0800               	movf	0,w
   832  0058  00A2               	movwf	??_ISR+2
   833  0059  087B               	movf	_indice,w
   834  005A  00A3               	movwf	??_ISR+3
   835  005B  3003               	movlw	3
   836  005C                     u46_25:	
   837  005C  1003               	clrc
   838  005D  0DA3               	rlf	??_ISR+3,f
   839  005E  3EFF               	addlw	-1
   840  005F  1D03               	skipz
   841  0060  285C               	goto	u46_25
   842  0061  1003               	clrc
   843  0062  0D23               	rlf	??_ISR+3,w
   844  0063  3AFF               	xorlw	255
   845  0064  3E01               	addlw	1
   846  0065  0777               	addwf	_lectura,w
   847  0066  00A4               	movwf	??_ISR+4
   848  0067  0AA4               	incf	??_ISR+4,f
   849  0068  3001               	movlw	1
   850  0069  00A5               	movwf	??_ISR+5
   851  006A  3000               	movlw	0
   852  006B  00A6               	movwf	??_ISR+6
   853  006C  2870               	goto	u47_24
   854  006D                     u47_25:	
   855  006D  1003               	clrc
   856  006E  0DA5               	rlf	??_ISR+5,f
   857  006F  0DA6               	rlf	??_ISR+6,f
   858  0070                     u47_24:	
   859  0070  0BA4               	decfsz	??_ISR+4,f
   860  0071  286D               	goto	u47_25
   861  0072  0821               	movf	??_ISR+1,w
   862  0073  0425               	iorwf	??_ISR+5,w
   863  0074  00A7               	movwf	??_ISR+7
   864  0075  0822               	movf	??_ISR+2,w
   865  0076  0426               	iorwf	??_ISR+6,w
   866  0077  00A8               	movwf	??_ISR+8
   867  0078  087B               	movf	_indice,w
   868  0079  00A9               	movwf	??_ISR+9
   869  007A  0729               	addwf	??_ISR+9,w
   870  007B  3E38               	addlw	(low (_palabras| 0))& (0+255)
   871  007C  0084               	movwf	4
   872  007D  0827               	movf	??_ISR+7,w
   873  007E  0080               	movwf	0
   874  007F  0A84               	incf	4,f
   875  0080  0828               	movf	??_ISR+8,w
   876  0081  0080               	movwf	0
   877                           
   878                           ;main.c: 74: if( dataLength <= 0 ) escribirSalida();
   879  0082  0879               	movf	_dataLength,w
   880  0083  047A               	iorwf	_dataLength+1,w
   881  0084  1D03               	btfss	3,2
   882  0085  288C               	goto	i1l89
   883  0086  2099               	fcall	_escribirSalida
   884                           
   885                           ;main.c: 75: }
   886  0087  288C               	goto	i1l89
   887  0088                     i1l843:	
   888                           
   889                           ;main.c: 76: else
   890                           ;main.c: 77: {
   891                           ;main.c: 78: dataLength = lectura;
   892  0088  0878               	movf	_lectura+1,w
   893  0089  00FA               	movwf	_dataLength+1
   894  008A  0877               	movf	_lectura,w
   895  008B  00F9               	movwf	_dataLength
   896  008C                     i1l89:	
   897  008C  1283               	bcf	3,5	;RP0=0, select bank0
   898  008D  1303               	bcf	3,6	;RP1=0, select bank0
   899  008E  082D               	movf	??_ISR+13,w
   900  008F  00FF               	movwf	127
   901  0090  082C               	movf	??_ISR+12,w
   902  0091  008A               	movwf	10
   903  0092  082B               	movf	??_ISR+11,w
   904  0093  0084               	movwf	4
   905  0094  0E2A               	swapf	(??_ISR+10)^0,w
   906  0095  0083               	movwf	3
   907  0096  0EFE               	swapf	126,f
   908  0097  0E7E               	swapf	126,w
   909  0098  0009               	retfie
   910  0099                     __end_of_ISR:	
   911                           
   912                           	psect	intentry
   913  0004                     __pintentry:	
   914                           ;incstack = 0
   915                           ; Regs used in _ISR: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   916                           
   917  0004                     interrupt_function:	
   918  007E                     saved_w	set	btemp
   919  0004  00FE               	movwf	btemp
   920  0005  0E03               	swapf	3,w
   921  0006  1283               	bcf	3,5	;RP0=0, select bank0
   922  0007  1303               	bcf	3,6	;RP1=0, select bank0
   923  0008  00AA               	movwf	??_ISR+10
   924  0009  0804               	movf	4,w
   925  000A  00AB               	movwf	??_ISR+11
   926  000B  080A               	movf	10,w
   927  000C  00AC               	movwf	??_ISR+12
   928  000D  087F               	movf	btemp+1,w
   929  000E  00AD               	movwf	??_ISR+13
   930  000F  281C               	ljmp	_ISR
   931                           
   932                           	psect	text5
   933  0099                     __ptext5:	
   934 ;; *************** function _escribirSalida *****************
   935 ;; Defined at:
   936 ;;		line 84 in file "main.c"
   937 ;; Parameters:    Size  Location     Type
   938 ;;		None
   939 ;; Auto vars:     Size  Location     Type
   940 ;;  i               2    3[COMMON] int 
   941 ;;  k               2    5[COMMON] int 
   942 ;; Return value:  Size  Location     Type
   943 ;;                  1    wreg      void 
   944 ;; Registers used:
   945 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
   946 ;; Tracked objects:
   947 ;;		On entry : 0/0
   948 ;;		On exit  : 0/0
   949 ;;		Unchanged: 0/0
   950 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   951 ;;      Params:         0       0       0       0
   952 ;;      Locals:         4       0       0       0
   953 ;;      Temps:          3       0       0       0
   954 ;;      Totals:         7       0       0       0
   955 ;;Total ram usage:        7 bytes
   956 ;; Hardware stack levels used:    1
   957 ;; This function calls:
   958 ;;		Nothing
   959 ;; This function is called by:
   960 ;;		_ISR
   961 ;; This function uses a non-reentrant model
   962 ;;
   963                           
   964                           
   965                           ;psect for function _escribirSalida
   966  0099                     _escribirSalida:	
   967                           
   968                           ;main.c: 86: for(int k = 0; k < 4; k++)
   969                           
   970                           ;incstack = 0
   971                           ; Regs used in _escribirSalida: [wreg-fsr0h+status,2+status,0+btemp+1]
   972  0099  01F5               	clrf	escribirSalida@k
   973  009A  01F6               	clrf	escribirSalida@k+1
   974  009B  0876               	movf	escribirSalida@k+1,w
   975  009C  3A80               	xorlw	128
   976  009D  00FF               	movwf	127
   977  009E  3080               	movlw	128
   978  009F  027F               	subwf	127,w
   979  00A0  1D03               	skipz
   980  00A1  28A4               	goto	u33_25
   981  00A2  3004               	movlw	4
   982  00A3  0275               	subwf	escribirSalida@k,w
   983  00A4                     u33_25:	
   984  00A4  1803               	btfsc	3,0
   985  00A5  28FF               	goto	i1l93
   986  00A6                     i1l775:	
   987                           
   988                           ;main.c: 87: {
   989                           ;main.c: 88: for(int i = 0; i < 16; i++)
   990  00A6  01F3               	clrf	escribirSalida@i
   991  00A7  01F4               	clrf	escribirSalida@i+1
   992  00A8  0874               	movf	escribirSalida@i+1,w
   993  00A9  3A80               	xorlw	128
   994  00AA  00FF               	movwf	127
   995  00AB  3080               	movlw	128
   996  00AC  027F               	subwf	127,w
   997  00AD  1D03               	skipz
   998  00AE  28B1               	goto	u34_25
   999  00AF  3010               	movlw	16
  1000  00B0  0273               	subwf	escribirSalida@i,w
  1001  00B1                     u34_25:	
  1002  00B1  1803               	btfsc	3,0
  1003  00B2  28E5               	goto	i1l791
  1004  00B3                     i1l781:	
  1005                           
  1006                           ;main.c: 89: {
  1007                           ;main.c: 90: RA0 = ((palabras[k] >> (16 - i)) & 1);
  1008  00B3  0875               	movf	escribirSalida@k,w
  1009  00B4  00F0               	movwf	??_escribirSalida
  1010  00B5  0770               	addwf	??_escribirSalida,w
  1011  00B6  3E38               	addlw	(low (_palabras| 0))& (0+255)
  1012  00B7  0084               	movwf	4
  1013  00B8  1383               	bcf	3,7	;select IRP bank0
  1014  00B9  0800               	movf	0,w
  1015  00BA  00F1               	movwf	??_escribirSalida+1
  1016  00BB  0A84               	incf	4,f
  1017  00BC  0800               	movf	0,w
  1018  00BD  00F2               	movwf	??_escribirSalida+2
  1019  00BE  0373               	decf	escribirSalida@i,w
  1020  00BF  3AFF               	xorlw	255
  1021  00C0  3E10               	addlw	16
  1022  00C1  3E01               	addlw	1
  1023  00C2  28C6               	goto	u35_24
  1024  00C3                     u35_25:	
  1025  00C3  1003               	clrc
  1026  00C4  0CF2               	rrf	??_escribirSalida+2,f
  1027  00C5  0CF1               	rrf	??_escribirSalida+1,f
  1028  00C6                     u35_24:	
  1029  00C6  3EFF               	addlw	-1
  1030  00C7  1D03               	skipz
  1031  00C8  28C3               	goto	u35_25
  1032  00C9  1C71               	btfss	??_escribirSalida+1,0
  1033  00CA  28CF               	goto	u36_20
  1034  00CB  1283               	bcf	3,5	;RP0=0, select bank0
  1035  00CC  1303               	bcf	3,6	;RP1=0, select bank0
  1036  00CD  1405               	bsf	5,0	;volatile
  1037  00CE  28D2               	goto	i1l783
  1038  00CF                     u36_20:	
  1039  00CF  1283               	bcf	3,5	;RP0=0, select bank0
  1040  00D0  1303               	bcf	3,6	;RP1=0, select bank0
  1041  00D1  1005               	bcf	5,0	;volatile
  1042  00D2                     i1l783:	
  1043                           
  1044                           ;main.c: 91: RA1 = 1;
  1045  00D2  1485               	bsf	5,1	;volatile
  1046                           
  1047                           ;main.c: 92: RA1 = 0;
  1048  00D3  1085               	bcf	5,1	;volatile
  1049  00D4  3001               	movlw	1
  1050  00D5  07F3               	addwf	escribirSalida@i,f
  1051  00D6  1803               	skipnc
  1052  00D7  0AF4               	incf	escribirSalida@i+1,f
  1053  00D8  3000               	movlw	0
  1054  00D9  07F4               	addwf	escribirSalida@i+1,f
  1055  00DA  0874               	movf	escribirSalida@i+1,w
  1056  00DB  3A80               	xorlw	128
  1057  00DC  00FF               	movwf	127
  1058  00DD  3080               	movlw	128
  1059  00DE  027F               	subwf	127,w
  1060  00DF  1D03               	skipz
  1061  00E0  28E3               	goto	u38_25
  1062  00E1  3010               	movlw	16
  1063  00E2  0273               	subwf	escribirSalida@i,w
  1064  00E3                     u38_25:	
  1065  00E3  1C03               	skipc
  1066  00E4  28B3               	goto	i1l781
  1067  00E5                     i1l791:	
  1068                           
  1069                           ;main.c: 93: }
  1070                           ;main.c: 94: palabras[k] = 0;
  1071  00E5  0875               	movf	escribirSalida@k,w
  1072  00E6  00F0               	movwf	??_escribirSalida
  1073  00E7  0770               	addwf	??_escribirSalida,w
  1074  00E8  3E38               	addlw	(low (_palabras| 0))& (0+255)
  1075  00E9  0084               	movwf	4
  1076  00EA  1383               	bcf	3,7	;select IRP bank0
  1077  00EB  0180               	clrf	0
  1078  00EC  0A84               	incf	4,f
  1079  00ED  0180               	clrf	0
  1080  00EE  3001               	movlw	1
  1081  00EF  07F5               	addwf	escribirSalida@k,f
  1082  00F0  1803               	skipnc
  1083  00F1  0AF6               	incf	escribirSalida@k+1,f
  1084  00F2  3000               	movlw	0
  1085  00F3  07F6               	addwf	escribirSalida@k+1,f
  1086  00F4  0876               	movf	escribirSalida@k+1,w
  1087  00F5  3A80               	xorlw	128
  1088  00F6  00FF               	movwf	127
  1089  00F7  3080               	movlw	128
  1090  00F8  027F               	subwf	127,w
  1091  00F9  1D03               	skipz
  1092  00FA  28FD               	goto	u39_25
  1093  00FB  3004               	movlw	4
  1094  00FC  0275               	subwf	escribirSalida@k,w
  1095  00FD                     u39_25:	
  1096  00FD  1C03               	skipc
  1097  00FE  28A6               	goto	i1l775
  1098  00FF                     i1l93:	
  1099                           
  1100                           ;main.c: 95: }
  1101                           ;main.c: 97: RA2 = 1;
  1102  00FF  1283               	bcf	3,5	;RP0=0, select bank0
  1103  0100  1303               	bcf	3,6	;RP1=0, select bank0
  1104  0101  1505               	bsf	5,2	;volatile
  1105                           
  1106                           ;main.c: 98: RA2 = 0;
  1107  0102  1105               	bcf	5,2	;volatile
  1108  0103  0008               	return
  1109  0104                     __end_of_escribirSalida:	
  1110                           
  1111                           	psect	text6
  1112  01D7                     __ptext6:	
  1113 ;; *************** function _ReceiveByteSerially *****************
  1114 ;; Defined at:
  1115 ;;		line 129 in file "main.c"
  1116 ;; Parameters:    Size  Location     Type
  1117 ;;		None
  1118 ;; Auto vars:     Size  Location     Type
  1119 ;;		None
  1120 ;; Return value:  Size  Location     Type
  1121 ;;                  1    wreg      unsigned char 
  1122 ;; Registers used:
  1123 ;;		wreg
  1124 ;; Tracked objects:
  1125 ;;		On entry : 0/0
  1126 ;;		On exit  : 0/0
  1127 ;;		Unchanged: 0/0
  1128 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1129 ;;      Params:         0       0       0       0
  1130 ;;      Locals:         0       0       0       0
  1131 ;;      Temps:          0       0       0       0
  1132 ;;      Totals:         0       0       0       0
  1133 ;;Total ram usage:        0 bytes
  1134 ;; Hardware stack levels used:    1
  1135 ;; This function calls:
  1136 ;;		Nothing
  1137 ;; This function is called by:
  1138 ;;		_ISR
  1139 ;; This function uses a non-reentrant model
  1140 ;;
  1141                           
  1142                           
  1143                           ;psect for function _ReceiveByteSerially
  1144  01D7                     _ReceiveByteSerially:	
  1145                           
  1146                           ;main.c: 131: if(OERR)
  1147                           
  1148                           ;incstack = 0
  1149                           ; Regs used in _ReceiveByteSerially: [wreg]
  1150  01D7  1283               	bcf	3,5	;RP0=0, select bank0
  1151  01D8  1303               	bcf	3,6	;RP1=0, select bank0
  1152  01D9  1C98               	btfss	24,1	;volatile
  1153  01DA  29DD               	goto	i1l765
  1154                           
  1155                           ;main.c: 132: {
  1156                           ;main.c: 133: CREN = 0;
  1157  01DB  1218               	bcf	24,4	;volatile
  1158                           
  1159                           ;main.c: 134: CREN = 1;
  1160  01DC  1618               	bsf	24,4	;volatile
  1161  01DD                     i1l765:	
  1162                           
  1163                           ;main.c: 135: }
  1164                           ;main.c: 136: return RCREG;
  1165  01DD  081A               	movf	26,w	;volatile
  1166  01DE  0008               	return
  1167  01DF                     __end_of_ReceiveByteSerially:	
  1168  007E                     btemp	set	126	;btemp
  1169  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         16
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7      13
    BANK0            80     24      34
    BANK1            80      0       0
    BANK2            48      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_escribirSalida

Critical Paths under _main in BANK0

    _main->_resetDatos

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0     257
                                             21 BANK0      3     3      0
                           _InitUART
                         _resetDatos
                    _resetearSalidas
 ---------------------------------------------------------------------------------
 (1) _resetearSalidas                                      5     3      2     121
                                             14 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (1) _resetDatos                                           7     7      0     136
                                             14 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (1) _InitUART                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _ISR                                                 14    14      0     158
                                              0 BANK0     14    14      0
                _ReceiveByteSerially
                     _escribirSalida
 ---------------------------------------------------------------------------------
 (3) _escribirSalida                                       7     7      0     158
                                              0 COMMON     7     7      0
 ---------------------------------------------------------------------------------
 (3) _ReceiveByteSerially                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _InitUART
   _resetDatos
   _resetearSalidas

 _ISR (ROOT)
   _ReceiveByteSerially
   _escribirSalida

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA              80      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      7       D       1       92.9%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BANK0               50     18      22       3       42.5%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      2F       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK2            30      0       0       8        0.0%
BANK2               30      0       0       9        0.0%
DATA                 0      0      2F      10        0.0%


Microchip Technology PIC Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Fri Nov 17 08:34:56 2017

                   __CFG_CP$OFF 0000                              fsr 0004                             l101 01B2  
       __size_of_escribirSalida 006B                             l751 0145                             l729 0198  
                           l757 0161                             l881 017F                             _GIE 005F  
                           _RA0 0028                             _RA1 0029                             _RA2 002A  
                           _RA3 002B                             _RA4 002C                             u305 015F  
                           u255 01A2                             u265 0111                    __CFG_CPD$OFF 0000  
                           u507 018C                             _ISR 001C                             u285 0132  
                           u517 0120                             u295 0143                             _RX9 00C6  
                           _TX9 04C6                             fsr0 0004                             indf 0000  
                  __CFG_LVP$OFF 0000                            ?_ISR 0070                            _BRGH 04C2  
                          _CREN 00C4                            _PEIE 005E                            _RCIE 0465  
                          _RCIF 0065                            i1l93 00FF                            i1l89 008C  
                          _OERR 00C1                            _SPEN 00C7                            _SREN 00C5  
                          _TXIE 0464                            _TXEN 04C5                            _SYNC 04C4  
                          _main 016A                            btemp 007E                   __CFG_BOREN$ON 0000  
                          start 0010                           ??_ISR 0020                           ?_main 0070  
                 __CFG_WDTE$OFF 0000                           _CMCON 001F                           i1l825 0031  
                         i1l843 0088                           i1l765 01DD                           i1l781 00B3  
                         i1l829 0037                           i1l783 00D2                           i1l791 00E5  
                         i1l775 00A6                           _RCREG 001A                           u33_25 00A4  
                         _SPBRG 0099                           u34_25 00B1                           u35_24 00C6  
                         u35_25 00C3                           u36_20 00CF                           u38_25 00E3  
                         u46_25 005C                           u47_24 0070                           u39_25 00FD  
                         u47_25 006D                           _TRISA 0085                           _trama 0040  
                         pclath 000A                           status 0003                           wtemp0 007E  
                __CFG_MCLRE$OFF 0000                 __initialization 0011                ?_resetearSalidas 002E  
                  __end_of_main 0194                __end_of_InitUART 01CF                          ??_main 0035  
                __CFG_PWRTE$OFF 0000                          _indice 007B                  _escribirSalida 0099  
                        saved_w 007E         __end_of__initialization 001A     __end_of_ReceiveByteSerially 01DF  
                __pcstackCOMMON 0070          __end_of_escribirSalida 0104                      _dataLength 0079  
                    __pbssBANK0 0038                       ?_InitUART 0070                      __pmaintext 016A  
                    __pintentry 0004                 ?_escribirSalida 0070                      ??_InitUART 002E  
                   resetDatos@i 0031                     resetDatos@j 0033                         __ptext1 0194  
                       __ptext2 0104                         __ptext3 01B7                         __ptext4 001C  
                       __ptext5 0099                         __ptext6 01D7                    __size_of_ISR 007D  
                       _lectura 0077                         clrloop0 01D0            end_of_initialization 001A  
                    _resetDatos 0104        __size_of_resetearSalidas 0023             start_initialization 0011  
                   __end_of_ISR 0099               __size_of_InitUART 0018                     ?_resetDatos 0070  
              ??_escribirSalida 0070    __size_of_ReceiveByteSerially 0008                     __pbssCOMMON 0077  
                     ___latbits 0000                   __pcstackBANK0 0020               ??_resetearSalidas 0030  
           __size_of_resetDatos 0066                resetearSalidas@i 0031               interrupt_function 0004  
                     clear_ram0 01CF                        _InitUART 01B7             _ReceiveByteSerially 01D7  
                      _palabras 0038                   __size_of_main 002A                    ??_resetDatos 002E  
          ?_ReceiveByteSerially 0070                 _resetearSalidas 0194              __end_of_resetDatos 016A  
                      intlevel1 0000           ??_ReceiveByteSerially 0070  resetearSalidas@cantidadSalidas 002E  
               escribirSalida@i 0073                 escribirSalida@k 0075              __CFG_FOSC$INTOSCIO 0000  
       __end_of_resetearSalidas 01B7  
