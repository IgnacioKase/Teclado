

Microchip Technology PIC LITE Macro Assembler V1.42 build -159332390 
                                                                                               Sun Nov 19 01:49:13 2017

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	16F628A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	clrtext,global,class=CODE,delta=2
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	maintext,global,class=CODE,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2
    13                           	psect	text3,local,class=CODE,merge=1,delta=2
    14                           	psect	text4,local,class=CODE,merge=1,delta=2
    15                           	psect	intentry,global,class=CODE,delta=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2
    18                           	dabs	1,0x7E,2
    19  0000                     
    20                           ; Version 1.42
    21                           ; Generated 13/04/2017 GMT
    22                           ; 
    23                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    24                           ; All rights reserved.
    25                           ; 
    26                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    27                           ; 
    28                           ; Redistribution and use in source and binary forms, with or without modification, are
    29                           ; permitted provided that the following conditions are met:
    30                           ; 
    31                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    32                           ;        conditions and the following disclaimer.
    33                           ; 
    34                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    35                           ;        of conditions and the following disclaimer in the documentation and/or other
    36                           ;        materials provided with the distribution.
    37                           ; 
    38                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    39                           ;        software without specific prior written permission.
    40                           ; 
    41                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    42                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    43                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    44                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    45                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    46                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    47                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    48                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    49                           ; 
    50                           ; 
    51                           ; Code-generator required, PIC16F628A Definitions
    52                           ; 
    53                           ; SFR Addresses
    54  0000                     	;# 
    55  0001                     	;# 
    56  0002                     	;# 
    57  0003                     	;# 
    58  0004                     	;# 
    59  0005                     	;# 
    60  0006                     	;# 
    61  000A                     	;# 
    62  000B                     	;# 
    63  000C                     	;# 
    64  000E                     	;# 
    65  000E                     	;# 
    66  000F                     	;# 
    67  0010                     	;# 
    68  0011                     	;# 
    69  0012                     	;# 
    70  0015                     	;# 
    71  0015                     	;# 
    72  0016                     	;# 
    73  0017                     	;# 
    74  0018                     	;# 
    75  0019                     	;# 
    76  001A                     	;# 
    77  001F                     	;# 
    78  0081                     	;# 
    79  0085                     	;# 
    80  0086                     	;# 
    81  008C                     	;# 
    82  008E                     	;# 
    83  0092                     	;# 
    84  0098                     	;# 
    85  0099                     	;# 
    86  009A                     	;# 
    87  009B                     	;# 
    88  009C                     	;# 
    89  009D                     	;# 
    90  009F                     	;# 
    91  001A                     _RCREG	set	26
    92  001F                     _CMCON	set	31
    93  00C1                     _OERR	set	193
    94  00C6                     _RX9	set	198
    95  00C5                     _SREN	set	197
    96  00C4                     _CREN	set	196
    97  00C7                     _SPEN	set	199
    98  002A                     _RA2	set	42
    99  0029                     _RA1	set	41
   100  0028                     _RA0	set	40
   101  0065                     _RCIF	set	101
   102  002C                     _RA4	set	44
   103  005E                     _PEIE	set	94
   104  005F                     _GIE	set	95
   105  002B                     _RA3	set	43
   106  0099                     _SPBRG	set	153
   107  0085                     _TRISA	set	133
   108  04C5                     _TXEN	set	1221
   109  04C6                     _TX9	set	1222
   110  0465                     _RCIE	set	1125
   111  0464                     _TXIE	set	1124
   112  04C4                     _SYNC	set	1220
   113  04C2                     _BRGH	set	1218
   114                           
   115                           ; #config settings
   116  0000                     
   117                           	psect	cinit
   118  0011                     start_initialization:	
   119  0011                     __initialization:	
   120                           
   121                           ; Clear objects allocated to COMMON
   122  0011  3077               	movlw	low __pbssCOMMON
   123  0012  0084               	movwf	4
   124  0013  307D               	movlw	low (__pbssCOMMON+6)
   125  0014  21D1               	fcall	clear_ram0
   126                           
   127                           ; Clear objects allocated to BANK0
   128  0015  1383               	bcf	3,7	;select IRP bank0
   129  0016  3038               	movlw	low __pbssBANK0
   130  0017  0084               	movwf	4
   131  0018  3042               	movlw	low (__pbssBANK0+10)
   132  0019  21D1               	fcall	clear_ram0
   133  001A                     end_of_initialization:	
   134                           ;End of C runtime variable initialization code
   135                           
   136  001A                     __end_of__initialization:	
   137  001A  0183               	clrf	3
   138  001B  296D               	ljmp	_main	;jump to C main() function
   139                           
   140                           	psect	bssCOMMON
   141  0077                     __pbssCOMMON:	
   142  0077                     _lectura:	
   143  0077                     	ds	2
   144  0079                     _dataLength:	
   145  0079                     	ds	2
   146  007B                     _indice:	
   147  007B                     	ds	2
   148                           
   149                           	psect	bssBANK0
   150  0038                     __pbssBANK0:	
   151  0038                     _palabras:	
   152  0038                     	ds	8
   153  0040                     _trama:	
   154  0040                     	ds	2
   155                           
   156                           	psect	clrtext
   157  01D1                     clear_ram0:	
   158                           ;	Called with FSR containing the base address, and
   159                           ;	W with the last address+1
   160                           
   161  01D1  0064               	clrwdt	;clear the watchdog before getting into this loop
   162  01D2                     clrloop0:	
   163  01D2  0180               	clrf	0	;clear RAM location pointed to by FSR
   164  01D3  0A84               	incf	4,f	;increment pointer
   165  01D4  0604               	xorwf	4,w	;XOR with final address
   166  01D5  1903               	btfsc	3,2	;have we reached the end yet?
   167  01D6  3400               	retlw	0	;all done for this memory range, return
   168  01D7  0604               	xorwf	4,w	;XOR again to restore value
   169  01D8  29D2               	goto	clrloop0	;do the next byte
   170                           
   171                           	psect	cstackCOMMON
   172  0070                     __pcstackCOMMON:	
   173  0070                     ?_InitUART:	
   174  0070                     ?_resetDatos:	
   175                           ; 1 bytes @ 0x0
   176                           
   177  0070                     ?_ReceiveByteSerially:	
   178                           ; 1 bytes @ 0x0
   179                           
   180  0070                     ??_ReceiveByteSerially:	
   181                           ; 1 bytes @ 0x0
   182                           
   183  0070                     ?_escribirSalida:	
   184                           ; 1 bytes @ 0x0
   185                           
   186  0070                     ??_escribirSalida:	
   187                           ; 1 bytes @ 0x0
   188                           
   189  0070                     ?_main:	
   190                           ; 1 bytes @ 0x0
   191                           
   192  0070                     ?_ISR:	
   193                           ; 1 bytes @ 0x0
   194                           
   195                           
   196                           ; 1 bytes @ 0x0
   197  0070                     	ds	3
   198  0073                     escribirSalida@i:	
   199                           
   200                           ; 2 bytes @ 0x3
   201  0073                     	ds	2
   202  0075                     escribirSalida@k:	
   203                           
   204                           ; 2 bytes @ 0x5
   205  0075                     	ds	2
   206                           
   207                           	psect	cstackBANK0
   208  0020                     __pcstackBANK0:	
   209  0020                     ??_ISR:	
   210                           
   211                           ; 1 bytes @ 0x0
   212  0020                     	ds	14
   213  002E                     ??_InitUART:	
   214  002E                     ?_resetearSalidas:	
   215                           ; 1 bytes @ 0xE
   216                           
   217  002E                     ??_resetDatos:	
   218                           ; 1 bytes @ 0xE
   219                           
   220  002E                     resetearSalidas@cantidadSalidas:	
   221                           ; 1 bytes @ 0xE
   222                           
   223                           
   224                           ; 2 bytes @ 0xE
   225  002E                     	ds	2
   226  0030                     ??_resetearSalidas:	
   227                           
   228                           ; 1 bytes @ 0x10
   229  0030                     	ds	1
   230  0031                     resetearSalidas@i:	
   231  0031                     resetDatos@i:	
   232                           ; 2 bytes @ 0x11
   233                           
   234                           
   235                           ; 2 bytes @ 0x11
   236  0031                     	ds	2
   237  0033                     resetDatos@j:	
   238                           
   239                           ; 2 bytes @ 0x13
   240  0033                     	ds	2
   241  0035                     ??_main:	
   242                           
   243                           ; 1 bytes @ 0x15
   244  0035                     	ds	3
   245                           
   246                           	psect	maintext
   247  016D                     __pmaintext:	
   248 ;;
   249 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   250 ;;
   251 ;; *************** function _main *****************
   252 ;; Defined at:
   253 ;;		line 40 in file "main.c"
   254 ;; Parameters:    Size  Location     Type
   255 ;;		None
   256 ;; Auto vars:     Size  Location     Type
   257 ;;		None
   258 ;; Return value:  Size  Location     Type
   259 ;;                  1    wreg      void 
   260 ;; Registers used:
   261 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   262 ;; Tracked objects:
   263 ;;		On entry : B00/0
   264 ;;		On exit  : 0/0
   265 ;;		Unchanged: 0/0
   266 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   267 ;;      Params:         0       0       0       0
   268 ;;      Locals:         0       0       0       0
   269 ;;      Temps:          0       3       0       0
   270 ;;      Totals:         0       3       0       0
   271 ;;Total ram usage:        3 bytes
   272 ;; Hardware stack levels required when called:    3
   273 ;; This function calls:
   274 ;;		_InitUART
   275 ;;		_resetDatos
   276 ;;		_resetearSalidas
   277 ;; This function is called by:
   278 ;;		Startup code after reset
   279 ;; This function uses a non-reentrant model
   280 ;;
   281                           
   282                           
   283                           ;psect for function _main
   284  016D                     _main:	
   285                           
   286                           ;main.c: 42: CMCON = 0x07;
   287                           
   288                           ;incstack = 0
   289                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   290  016D  3007               	movlw	7
   291  016E  1283               	bcf	3,5	;RP0=0, select bank0
   292  016F  1303               	bcf	3,6	;RP1=0, select bank0
   293  0170  009F               	movwf	31	;volatile
   294                           
   295                           ;main.c: 43: TRISA = 0b00010000;
   296  0171  3010               	movlw	16
   297  0172  1683               	bsf	3,5	;RP0=1, select bank1
   298  0173  1303               	bcf	3,6	;RP1=0, select bank1
   299  0174  0085               	movwf	5	;volatile
   300                           
   301                           ;main.c: 44: RA3 = 0;
   302  0175  1283               	bcf	3,5	;RP0=0, select bank0
   303  0176  1303               	bcf	3,6	;RP1=0, select bank0
   304  0177  1185               	bcf	5,3	;volatile
   305                           
   306                           ;main.c: 46: InitUART();
   307  0178  21B9               	fcall	_InitUART
   308                           
   309                           ;main.c: 48: GIE = 1;
   310  0179  178B               	bsf	11,7	;volatile
   311                           
   312                           ;main.c: 49: PEIE = 1;
   313  017A  170B               	bsf	11,6	;volatile
   314                           
   315                           ;main.c: 51: resetearSalidas(64);
   316  017B  3040               	movlw	64
   317  017C  1283               	bcf	3,5	;RP0=0, select bank0
   318  017D  1303               	bcf	3,6	;RP1=0, select bank0
   319  017E  00AE               	movwf	resetearSalidas@cantidadSalidas
   320  017F  3000               	movlw	0
   321  0180  00AF               	movwf	resetearSalidas@cantidadSalidas+1
   322  0181  2196               	fcall	_resetearSalidas
   323  0182                     l881:	
   324                           ;main.c: 53: while(1)
   325                           
   326                           
   327                           ;main.c: 54: {
   328                           ;main.c: 55: if(RA4)
   329  0182  1283               	bcf	3,5	;RP0=0, select bank0
   330  0183  1303               	bcf	3,6	;RP1=0, select bank0
   331  0184  1E05               	btfss	5,4	;volatile
   332  0185  2982               	goto	l881
   333                           
   334                           ;main.c: 56: {
   335                           ;main.c: 57: resetDatos();
   336  0186  2106               	fcall	_resetDatos
   337                           
   338                           ;main.c: 58: _delay((unsigned long)((500)*(20000000/4000.0)));
   339  0187  300D               	movlw	13
   340  0188  1283               	bcf	3,5	;RP0=0, select bank0
   341  0189  1303               	bcf	3,6	;RP1=0, select bank0
   342  018A  00B7               	movwf	??_main+2
   343  018B  30AF               	movlw	175
   344  018C  00B6               	movwf	??_main+1
   345  018D  30B6               	movlw	182
   346  018E  00B5               	movwf	??_main
   347  018F                     u507:	
   348  018F  0BB5               	decfsz	??_main,f
   349  0190  298F               	goto	u507
   350  0191  0BB6               	decfsz	??_main+1,f
   351  0192  298F               	goto	u507
   352  0193  0BB7               	decfsz	??_main+2,f
   353  0194  298F               	goto	u507
   354  0195  2982               	goto	l881
   355  0196                     __end_of_main:	
   356                           
   357                           	psect	text1
   358  0196                     __ptext1:	
   359 ;; *************** function _resetearSalidas *****************
   360 ;; Defined at:
   361 ;;		line 106 in file "main.c"
   362 ;; Parameters:    Size  Location     Type
   363 ;;  cantidadSali    2   14[BANK0 ] int 
   364 ;; Auto vars:     Size  Location     Type
   365 ;;  i               2   17[BANK0 ] int 
   366 ;; Return value:  Size  Location     Type
   367 ;;                  1    wreg      void 
   368 ;; Registers used:
   369 ;;		wreg, status,2, status,0
   370 ;; Tracked objects:
   371 ;;		On entry : 0/0
   372 ;;		On exit  : 0/0
   373 ;;		Unchanged: 0/0
   374 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   375 ;;      Params:         0       2       0       0
   376 ;;      Locals:         0       2       0       0
   377 ;;      Temps:          0       1       0       0
   378 ;;      Totals:         0       5       0       0
   379 ;;Total ram usage:        5 bytes
   380 ;; Hardware stack levels used:    1
   381 ;; Hardware stack levels required when called:    2
   382 ;; This function calls:
   383 ;;		Nothing
   384 ;; This function is called by:
   385 ;;		_main
   386 ;; This function uses a non-reentrant model
   387 ;;
   388                           
   389                           
   390                           ;psect for function _resetearSalidas
   391  0196                     _resetearSalidas:	
   392                           
   393                           ;main.c: 108: for(int i = 0; i < cantidadSalidas; i = i + 1)
   394                           
   395                           ;incstack = 0
   396                           ; Regs used in _resetearSalidas: [wreg+status,2+status,0]
   397  0196  1283               	bcf	3,5	;RP0=0, select bank0
   398  0197  1303               	bcf	3,6	;RP1=0, select bank0
   399  0198  01B1               	clrf	resetearSalidas@i
   400  0199  01B2               	clrf	resetearSalidas@i+1
   401  019A                     l729:	
   402  019A  0832               	movf	resetearSalidas@i+1,w
   403  019B  3A80               	xorlw	128
   404  019C  00B0               	movwf	??_resetearSalidas
   405  019D  082F               	movf	resetearSalidas@cantidadSalidas+1,w
   406  019E  3A80               	xorlw	128
   407  019F  0230               	subwf	??_resetearSalidas,w
   408  01A0  1D03               	skipz
   409  01A1  29A4               	goto	u255
   410  01A2  082E               	movf	resetearSalidas@cantidadSalidas,w
   411  01A3  0231               	subwf	resetearSalidas@i,w
   412  01A4                     u255:	
   413  01A4  1803               	btfsc	3,0
   414  01A5  29B4               	goto	l101
   415                           
   416                           ;main.c: 109: {
   417                           ;main.c: 110: RA0 = 0;
   418  01A6  1283               	bcf	3,5	;RP0=0, select bank0
   419  01A7  1303               	bcf	3,6	;RP1=0, select bank0
   420  01A8  1005               	bcf	5,0	;volatile
   421                           
   422                           ;main.c: 111: RA1 = 1;
   423  01A9  1485               	bsf	5,1	;volatile
   424                           
   425                           ;main.c: 112: RA1 = 0;
   426  01AA  1085               	bcf	5,1	;volatile
   427  01AB  0831               	movf	resetearSalidas@i,w
   428  01AC  3E01               	addlw	1
   429  01AD  00B1               	movwf	resetearSalidas@i
   430  01AE  0832               	movf	resetearSalidas@i+1,w
   431  01AF  1803               	skipnc
   432  01B0  3E01               	addlw	1
   433  01B1  3E00               	addlw	0
   434  01B2  00B2               	movwf	resetearSalidas@i+1
   435  01B3  299A               	goto	l729
   436  01B4                     l101:	
   437                           
   438                           ;main.c: 113: }
   439                           ;main.c: 114: RA2 = 1;
   440  01B4  1283               	bcf	3,5	;RP0=0, select bank0
   441  01B5  1303               	bcf	3,6	;RP1=0, select bank0
   442  01B6  1505               	bsf	5,2	;volatile
   443                           
   444                           ;main.c: 115: RA2 = 0;
   445  01B7  1105               	bcf	5,2	;volatile
   446  01B8  0008               	return
   447  01B9                     __end_of_resetearSalidas:	
   448                           
   449                           	psect	text2
   450  0106                     __ptext2:	
   451 ;; *************** function _resetDatos *****************
   452 ;; Defined at:
   453 ;;		line 148 in file "main.c"
   454 ;; Parameters:    Size  Location     Type
   455 ;;		None
   456 ;; Auto vars:     Size  Location     Type
   457 ;;  j               2   19[BANK0 ] int 
   458 ;;  i               2   17[BANK0 ] int 
   459 ;; Return value:  Size  Location     Type
   460 ;;                  1    wreg      void 
   461 ;; Registers used:
   462 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
   463 ;; Tracked objects:
   464 ;;		On entry : 0/0
   465 ;;		On exit  : 0/0
   466 ;;		Unchanged: 0/0
   467 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   468 ;;      Params:         0       0       0       0
   469 ;;      Locals:         0       4       0       0
   470 ;;      Temps:          0       3       0       0
   471 ;;      Totals:         0       7       0       0
   472 ;;Total ram usage:        7 bytes
   473 ;; Hardware stack levels used:    1
   474 ;; Hardware stack levels required when called:    2
   475 ;; This function calls:
   476 ;;		Nothing
   477 ;; This function is called by:
   478 ;;		_main
   479 ;; This function uses a non-reentrant model
   480 ;;
   481                           
   482                           
   483                           ;psect for function _resetDatos
   484  0106                     _resetDatos:	
   485                           
   486                           ;main.c: 150: for(int i = 0; i < 5; i++)
   487                           
   488                           ;incstack = 0
   489                           ; Regs used in _resetDatos: [wreg-fsr0h+status,2+status,0+btemp+1]
   490  0106  1283               	bcf	3,5	;RP0=0, select bank0
   491  0107  1303               	bcf	3,6	;RP1=0, select bank0
   492  0108  01B1               	clrf	resetDatos@i
   493  0109  01B2               	clrf	resetDatos@i+1
   494  010A                     L1:	
   495  010A  0832               	movf	resetDatos@i+1,w
   496  010B  3A80               	xorlw	128
   497  010C  00FF               	movwf	127
   498  010D  3080               	movlw	128
   499  010E  027F               	subwf	127,w
   500  010F  1D03               	skipz
   501  0110  2913               	goto	u265
   502  0111  3005               	movlw	5
   503  0112  0231               	subwf	resetDatos@i,w
   504  0113                     u265:	
   505  0113  1803               	btfsc	3,0
   506  0114  0008               	return
   507                           
   508                           ;main.c: 151: {
   509                           ;main.c: 152: if(RA4)
   510  0115  1283               	bcf	3,5	;RP0=0, select bank0
   511  0116  1303               	bcf	3,6	;RP1=0, select bank0
   512  0117  1E05               	btfss	5,4	;volatile
   513  0118  2964               	goto	l757
   514                           
   515                           ;main.c: 153: {
   516                           ;main.c: 154: RA3 = 1;
   517  0119  1585               	bsf	5,3	;volatile
   518                           
   519                           ;main.c: 155: _delay((unsigned long)((200)*(20000000/4000.0)));
   520  011A  3006               	movlw	6
   521  011B  1283               	bcf	3,5	;RP0=0, select bank0
   522  011C  1303               	bcf	3,6	;RP1=0, select bank0
   523  011D  00B0               	movwf	??_resetDatos+2
   524  011E  3013               	movlw	19
   525  011F  00AF               	movwf	??_resetDatos+1
   526  0120  30AD               	movlw	173
   527  0121  00AE               	movwf	??_resetDatos
   528  0122                     u517:	
   529  0122  0BAE               	decfsz	??_resetDatos,f
   530  0123  2922               	goto	u517
   531  0124  0BAF               	decfsz	??_resetDatos+1,f
   532  0125  2922               	goto	u517
   533  0126  0BB0               	decfsz	??_resetDatos+2,f
   534  0127  2922               	goto	u517
   535  0128  0000               	nop
   536                           
   537                           ;main.c: 156: RA3 = 0;
   538  0129  1283               	bcf	3,5	;RP0=0, select bank0
   539  012A  1303               	bcf	3,6	;RP1=0, select bank0
   540  012B  1185               	bcf	5,3	;volatile
   541                           
   542                           ;main.c: 157: if(i >= 4)
   543  012C  0832               	movf	resetDatos@i+1,w
   544  012D  3A80               	xorlw	128
   545  012E  00FF               	movwf	127
   546  012F  3080               	movlw	128
   547  0130  027F               	subwf	127,w
   548  0131  1D03               	skipz
   549  0132  2935               	goto	u285
   550  0133  3004               	movlw	4
   551  0134  0231               	subwf	resetDatos@i,w
   552  0135                     u285:	
   553  0135  1C03               	skipc
   554  0136  2964               	goto	l757
   555                           
   556                           ;main.c: 158: {
   557                           ;main.c: 159: dataLength = 0;
   558  0137  01F9               	clrf	_dataLength
   559  0138  01FA               	clrf	_dataLength+1
   560                           
   561                           ;main.c: 160: for(int j = 0; j < 4; j++)
   562  0139  1283               	bcf	3,5	;RP0=0, select bank0
   563  013A  1303               	bcf	3,6	;RP1=0, select bank0
   564  013B  01B3               	clrf	resetDatos@j
   565  013C  01B4               	clrf	resetDatos@j+1
   566  013D  0834               	movf	resetDatos@j+1,w
   567  013E  3A80               	xorlw	128
   568  013F  00FF               	movwf	127
   569  0140  3080               	movlw	128
   570  0141  027F               	subwf	127,w
   571  0142  1D03               	skipz
   572  0143  2946               	goto	u295
   573  0144  3004               	movlw	4
   574  0145  0233               	subwf	resetDatos@j,w
   575  0146                     u295:	
   576  0146  1803               	btfsc	3,0
   577  0147  2964               	goto	l757
   578  0148                     l751:	
   579                           
   580                           ;main.c: 161: {
   581                           ;main.c: 162: palabras[j] = 0;
   582  0148  1283               	bcf	3,5	;RP0=0, select bank0
   583  0149  1303               	bcf	3,6	;RP1=0, select bank0
   584  014A  0833               	movf	resetDatos@j,w
   585  014B  00AE               	movwf	??_resetDatos
   586  014C  072E               	addwf	??_resetDatos,w
   587  014D  3E38               	addlw	(low (_palabras| 0))& (0+255)
   588  014E  0084               	movwf	4
   589  014F  1383               	bcf	3,7	;select IRP bank0
   590  0150  0180               	clrf	0
   591  0151  0A84               	incf	4,f
   592  0152  0180               	clrf	0
   593  0153  3001               	movlw	1
   594  0154  07B3               	addwf	resetDatos@j,f
   595  0155  1803               	skipnc
   596  0156  0AB4               	incf	resetDatos@j+1,f
   597  0157  3000               	movlw	0
   598  0158  07B4               	addwf	resetDatos@j+1,f
   599  0159  0834               	movf	resetDatos@j+1,w
   600  015A  3A80               	xorlw	128
   601  015B  00FF               	movwf	127
   602  015C  3080               	movlw	128
   603  015D  027F               	subwf	127,w
   604  015E  1D03               	skipz
   605  015F  2962               	goto	u305
   606  0160  3004               	movlw	4
   607  0161  0233               	subwf	resetDatos@j,w
   608  0162                     u305:	
   609  0162  1C03               	skipc
   610  0163  2948               	goto	l751
   611  0164                     l757:	
   612  0164  3001               	movlw	1
   613  0165  1283               	bcf	3,5	;RP0=0, select bank0
   614  0166  1303               	bcf	3,6	;RP1=0, select bank0
   615  0167  07B1               	addwf	resetDatos@i,f
   616  0168  1803               	skipnc
   617  0169  0AB2               	incf	resetDatos@i+1,f
   618  016A  3000               	movlw	0
   619  016B  07B2               	addwf	resetDatos@i+1,f
   620  016C  290A               	goto	L1
   621  016D                     __end_of_resetDatos:	
   622                           
   623                           	psect	text3
   624  01B9                     __ptext3:	
   625 ;; *************** function _InitUART *****************
   626 ;; Defined at:
   627 ;;		line 118 in file "main.c"
   628 ;; Parameters:    Size  Location     Type
   629 ;;		None
   630 ;; Auto vars:     Size  Location     Type
   631 ;;		None
   632 ;; Return value:  Size  Location     Type
   633 ;;                  1    wreg      void 
   634 ;; Registers used:
   635 ;;		wreg
   636 ;; Tracked objects:
   637 ;;		On entry : 0/0
   638 ;;		On exit  : 0/0
   639 ;;		Unchanged: 0/0
   640 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   641 ;;      Params:         0       0       0       0
   642 ;;      Locals:         0       0       0       0
   643 ;;      Temps:          0       0       0       0
   644 ;;      Totals:         0       0       0       0
   645 ;;Total ram usage:        0 bytes
   646 ;; Hardware stack levels used:    1
   647 ;; Hardware stack levels required when called:    2
   648 ;; This function calls:
   649 ;;		Nothing
   650 ;; This function is called by:
   651 ;;		_main
   652 ;; This function uses a non-reentrant model
   653 ;;
   654                           
   655                           
   656                           ;psect for function _InitUART
   657  01B9                     _InitUART:	
   658                           
   659                           ;main.c: 120: SPBRG = ((20000000/16)/19200) - 1;
   660                           
   661                           ;incstack = 0
   662                           ; Regs used in _InitUART: [wreg]
   663  01B9  3040               	movlw	64
   664  01BA  1683               	bsf	3,5	;RP0=1, select bank1
   665  01BB  1303               	bcf	3,6	;RP1=0, select bank1
   666  01BC  0099               	movwf	25	;volatile
   667                           
   668                           ;main.c: 121: BRGH = 1;
   669  01BD  1518               	bsf	24,2	;volatile
   670                           
   671                           ;main.c: 122: SYNC = 0;
   672  01BE  1218               	bcf	24,4	;volatile
   673                           
   674                           ;main.c: 123: SPEN = 1;
   675  01BF  1283               	bcf	3,5	;RP0=0, select bank0
   676  01C0  1303               	bcf	3,6	;RP1=0, select bank0
   677  01C1  1798               	bsf	24,7	;volatile
   678                           
   679                           ;main.c: 124: CREN = 1;
   680  01C2  1618               	bsf	24,4	;volatile
   681                           
   682                           ;main.c: 125: SREN = 0;
   683  01C3  1298               	bcf	24,5	;volatile
   684                           
   685                           ;main.c: 126: TXIE = 0;
   686  01C4  1683               	bsf	3,5	;RP0=1, select bank1
   687  01C5  1303               	bcf	3,6	;RP1=0, select bank1
   688  01C6  120C               	bcf	12,4	;volatile
   689                           
   690                           ;main.c: 127: RCIE = 1;
   691  01C7  168C               	bsf	12,5	;volatile
   692                           
   693                           ;main.c: 128: TX9 = 0;
   694  01C8  1318               	bcf	24,6	;volatile
   695                           
   696                           ;main.c: 129: RX9 = 0;
   697  01C9  1283               	bcf	3,5	;RP0=0, select bank0
   698  01CA  1303               	bcf	3,6	;RP1=0, select bank0
   699  01CB  1318               	bcf	24,6	;volatile
   700                           
   701                           ;main.c: 130: TXEN = 0;
   702  01CC  1683               	bsf	3,5	;RP0=1, select bank1
   703  01CD  1303               	bcf	3,6	;RP1=0, select bank1
   704  01CE  1298               	bcf	24,5	;volatile
   705                           
   706                           ;main.c: 131: TXEN = 1;
   707  01CF  1698               	bsf	24,5	;volatile
   708  01D0  0008               	return
   709  01D1                     __end_of_InitUART:	
   710                           
   711                           	psect	text4
   712  001C                     __ptext4:	
   713 ;; *************** function _ISR *****************
   714 ;; Defined at:
   715 ;;		line 64 in file "main.c"
   716 ;; Parameters:    Size  Location     Type
   717 ;;		None
   718 ;; Auto vars:     Size  Location     Type
   719 ;;		None
   720 ;; Return value:  Size  Location     Type
   721 ;;                  1    wreg      void 
   722 ;; Registers used:
   723 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   724 ;; Tracked objects:
   725 ;;		On entry : 0/0
   726 ;;		On exit  : 0/0
   727 ;;		Unchanged: 0/0
   728 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   729 ;;      Params:         0       0       0       0
   730 ;;      Locals:         0       0       0       0
   731 ;;      Temps:          0      14       0       0
   732 ;;      Totals:         0      14       0       0
   733 ;;Total ram usage:       14 bytes
   734 ;; Hardware stack levels used:    1
   735 ;; Hardware stack levels required when called:    1
   736 ;; This function calls:
   737 ;;		_ReceiveByteSerially
   738 ;;		_escribirSalida
   739 ;; This function is called by:
   740 ;;		Interrupt level 1
   741 ;; This function uses a non-reentrant model
   742 ;;
   743                           
   744                           
   745                           ;psect for function _ISR
   746  001C                     _ISR:	
   747                           
   748                           ;main.c: 66: if(RCIF)
   749  001C  1E8C               	btfss	12,5	;volatile
   750  001D  288E               	goto	i1l89
   751                           
   752                           ;main.c: 67: {
   753                           ;main.c: 68: lectura = ReceiveByteSerially();
   754  001E  21D9               	fcall	_ReceiveByteSerially
   755  001F  1283               	bcf	3,5	;RP0=0, select bank0
   756  0020  1303               	bcf	3,6	;RP1=0, select bank0
   757  0021  00A0               	movwf	??_ISR
   758  0022  01A1               	clrf	??_ISR+1
   759  0023  0820               	movf	??_ISR,w
   760  0024  00F7               	movwf	_lectura
   761  0025  0821               	movf	??_ISR+1,w
   762  0026  00F8               	movwf	_lectura+1
   763                           
   764                           ;main.c: 69: RA3 = !RA3;
   765  0027  3008               	movlw	8
   766  0028  0685               	xorwf	5,f
   767                           
   768                           ;main.c: 70: if (lectura == 0) trama = 0;
   769  0029  0877               	movf	_lectura,w
   770  002A  0478               	iorwf	_lectura+1,w
   771  002B  1D03               	btfss	3,2
   772  002C  282F               	goto	i1l825
   773  002D  01C0               	clrf	_trama
   774  002E  01C1               	clrf	_trama+1
   775  002F                     i1l825:	
   776                           
   777                           ;main.c: 71: if(trama)
   778  002F  0840               	movf	_trama,w
   779  0030  0441               	iorwf	_trama+1,w
   780  0031  1903               	btfsc	3,2
   781  0032  2884               	goto	i1l841
   782                           
   783                           ;main.c: 72: {
   784                           ;main.c: 73: if(dataLength > 0)
   785  0033  0879               	movf	_dataLength,w
   786  0034  047A               	iorwf	_dataLength+1,w
   787  0035  1903               	btfsc	3,2
   788  0036  2880               	goto	i1l839
   789                           
   790                           ;main.c: 74: {
   791                           ;main.c: 75: indice = lectura/16;
   792  0037  0E77               	swapf	_lectura,w
   793  0038  390F               	andlw	15
   794  0039  00FB               	movwf	_indice
   795  003A  0E78               	swapf	_lectura+1,w
   796  003B  39F0               	andlw	240
   797  003C  04FB               	iorwf	_indice,f
   798  003D  0E78               	swapf	_lectura+1,w
   799  003E  390F               	andlw	15
   800  003F  00FC               	movwf	_indice+1
   801                           
   802                           ;main.c: 76: dataLength--;
   803  0040  3001               	movlw	1
   804  0041  02F9               	subwf	_dataLength,f
   805  0042  3000               	movlw	0
   806  0043  1C03               	skipc
   807  0044  03FA               	decf	_dataLength+1,f
   808  0045  02FA               	subwf	_dataLength+1,f
   809                           
   810                           ;main.c: 77: palabras[ indice ] = palabras[ indice ] | (1 << (lectura - (indice * 16)));
   811  0046  087B               	movf	_indice,w
   812  0047  00A0               	movwf	??_ISR
   813  0048  0720               	addwf	??_ISR,w
   814  0049  3E38               	addlw	(low (_palabras| 0))& (0+255)
   815  004A  0084               	movwf	4
   816  004B  1383               	bcf	3,7	;select IRP bank0
   817  004C  0800               	movf	0,w
   818  004D  00A1               	movwf	??_ISR+1
   819  004E  0A84               	incf	4,f
   820  004F  0800               	movf	0,w
   821  0050  00A2               	movwf	??_ISR+2
   822  0051  087B               	movf	_indice,w
   823  0052  00A3               	movwf	??_ISR+3
   824  0053  3003               	movlw	3
   825  0054                     u45_25:	
   826  0054  1003               	clrc
   827  0055  0DA3               	rlf	??_ISR+3,f
   828  0056  3EFF               	addlw	-1
   829  0057  1D03               	skipz
   830  0058  2854               	goto	u45_25
   831  0059  1003               	clrc
   832  005A  0D23               	rlf	??_ISR+3,w
   833  005B  3AFF               	xorlw	255
   834  005C  3E01               	addlw	1
   835  005D  0777               	addwf	_lectura,w
   836  005E  00A4               	movwf	??_ISR+4
   837  005F  0AA4               	incf	??_ISR+4,f
   838  0060  3001               	movlw	1
   839  0061  00A5               	movwf	??_ISR+5
   840  0062  3000               	movlw	0
   841  0063  00A6               	movwf	??_ISR+6
   842  0064  2868               	goto	u46_24
   843  0065                     u46_25:	
   844  0065  1003               	clrc
   845  0066  0DA5               	rlf	??_ISR+5,f
   846  0067  0DA6               	rlf	??_ISR+6,f
   847  0068                     u46_24:	
   848  0068  0BA4               	decfsz	??_ISR+4,f
   849  0069  2865               	goto	u46_25
   850  006A  0821               	movf	??_ISR+1,w
   851  006B  0425               	iorwf	??_ISR+5,w
   852  006C  00A7               	movwf	??_ISR+7
   853  006D  0822               	movf	??_ISR+2,w
   854  006E  0426               	iorwf	??_ISR+6,w
   855  006F  00A8               	movwf	??_ISR+8
   856  0070  087B               	movf	_indice,w
   857  0071  00A9               	movwf	??_ISR+9
   858  0072  0729               	addwf	??_ISR+9,w
   859  0073  3E38               	addlw	(low (_palabras| 0))& (0+255)
   860  0074  0084               	movwf	4
   861  0075  0827               	movf	??_ISR+7,w
   862  0076  0080               	movwf	0
   863  0077  0A84               	incf	4,f
   864  0078  0828               	movf	??_ISR+8,w
   865  0079  0080               	movwf	0
   866                           
   867                           ;main.c: 78: if( dataLength <= 0 ) escribirSalida();
   868  007A  0879               	movf	_dataLength,w
   869  007B  047A               	iorwf	_dataLength+1,w
   870  007C  1D03               	btfss	3,2
   871  007D  2884               	goto	i1l841
   872  007E  209B               	fcall	_escribirSalida
   873                           
   874                           ;main.c: 79: }
   875  007F  2884               	goto	i1l841
   876  0080                     i1l839:	
   877                           
   878                           ;main.c: 80: else
   879                           ;main.c: 81: {
   880                           ;main.c: 82: dataLength = lectura;
   881  0080  0878               	movf	_lectura+1,w
   882  0081  00FA               	movwf	_dataLength+1
   883  0082  0877               	movf	_lectura,w
   884  0083  00F9               	movwf	_dataLength
   885  0084                     i1l841:	
   886                           
   887                           ;main.c: 83: }
   888                           ;main.c: 84: }
   889                           ;main.c: 85: if (lectura == 0xff) trama = 1;
   890  0084  0A77               	incf	_lectura,w
   891  0085  0478               	iorwf	_lectura+1,w
   892  0086  1D03               	btfss	3,2
   893  0087  288E               	goto	i1l89
   894  0088  3001               	movlw	1
   895  0089  1283               	bcf	3,5	;RP0=0, select bank0
   896  008A  1303               	bcf	3,6	;RP1=0, select bank0
   897  008B  00C0               	movwf	_trama
   898  008C  3000               	movlw	0
   899  008D  00C1               	movwf	_trama+1
   900  008E                     i1l89:	
   901  008E  1283               	bcf	3,5	;RP0=0, select bank0
   902  008F  1303               	bcf	3,6	;RP1=0, select bank0
   903  0090  082D               	movf	??_ISR+13,w
   904  0091  00FF               	movwf	127
   905  0092  082C               	movf	??_ISR+12,w
   906  0093  008A               	movwf	10
   907  0094  082B               	movf	??_ISR+11,w
   908  0095  0084               	movwf	4
   909  0096  0E2A               	swapf	(??_ISR+10)^0,w
   910  0097  0083               	movwf	3
   911  0098  0EFE               	swapf	126,f
   912  0099  0E7E               	swapf	126,w
   913  009A  0009               	retfie
   914  009B                     __end_of_ISR:	
   915                           
   916                           	psect	intentry
   917  0004                     __pintentry:	
   918                           ;incstack = 0
   919                           ; Regs used in _ISR: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   920                           
   921  0004                     interrupt_function:	
   922  007E                     saved_w	set	btemp
   923  0004  00FE               	movwf	btemp
   924  0005  0E03               	swapf	3,w
   925  0006  1283               	bcf	3,5	;RP0=0, select bank0
   926  0007  1303               	bcf	3,6	;RP1=0, select bank0
   927  0008  00AA               	movwf	??_ISR+10
   928  0009  0804               	movf	4,w
   929  000A  00AB               	movwf	??_ISR+11
   930  000B  080A               	movf	10,w
   931  000C  00AC               	movwf	??_ISR+12
   932  000D  087F               	movf	btemp+1,w
   933  000E  00AD               	movwf	??_ISR+13
   934  000F  281C               	ljmp	_ISR
   935                           
   936                           	psect	text5
   937  009B                     __ptext5:	
   938 ;; *************** function _escribirSalida *****************
   939 ;; Defined at:
   940 ;;		line 89 in file "main.c"
   941 ;; Parameters:    Size  Location     Type
   942 ;;		None
   943 ;; Auto vars:     Size  Location     Type
   944 ;;  i               2    3[COMMON] int 
   945 ;;  k               2    5[COMMON] int 
   946 ;; Return value:  Size  Location     Type
   947 ;;                  1    wreg      void 
   948 ;; Registers used:
   949 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
   950 ;; Tracked objects:
   951 ;;		On entry : 0/0
   952 ;;		On exit  : 0/0
   953 ;;		Unchanged: 0/0
   954 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   955 ;;      Params:         0       0       0       0
   956 ;;      Locals:         4       0       0       0
   957 ;;      Temps:          3       0       0       0
   958 ;;      Totals:         7       0       0       0
   959 ;;Total ram usage:        7 bytes
   960 ;; Hardware stack levels used:    1
   961 ;; This function calls:
   962 ;;		Nothing
   963 ;; This function is called by:
   964 ;;		_ISR
   965 ;; This function uses a non-reentrant model
   966 ;;
   967                           
   968                           
   969                           ;psect for function _escribirSalida
   970  009B                     _escribirSalida:	
   971                           
   972                           ;main.c: 91: for(int k = 0; k < 4; k++)
   973                           
   974                           ;incstack = 0
   975                           ; Regs used in _escribirSalida: [wreg-fsr0h+status,2+status,0+btemp+1]
   976  009B  01F5               	clrf	escribirSalida@k
   977  009C  01F6               	clrf	escribirSalida@k+1
   978  009D  0876               	movf	escribirSalida@k+1,w
   979  009E  3A80               	xorlw	128
   980  009F  00FF               	movwf	127
   981  00A0  3080               	movlw	128
   982  00A1  027F               	subwf	127,w
   983  00A2  1D03               	skipz
   984  00A3  28A6               	goto	u33_25
   985  00A4  3004               	movlw	4
   986  00A5  0275               	subwf	escribirSalida@k,w
   987  00A6                     u33_25:	
   988  00A6  1803               	btfsc	3,0
   989  00A7  2901               	goto	i1l93
   990  00A8                     i1l775:	
   991                           
   992                           ;main.c: 92: {
   993                           ;main.c: 93: for(int i = 0; i < 16; i++)
   994  00A8  01F3               	clrf	escribirSalida@i
   995  00A9  01F4               	clrf	escribirSalida@i+1
   996  00AA  0874               	movf	escribirSalida@i+1,w
   997  00AB  3A80               	xorlw	128
   998  00AC  00FF               	movwf	127
   999  00AD  3080               	movlw	128
  1000  00AE  027F               	subwf	127,w
  1001  00AF  1D03               	skipz
  1002  00B0  28B3               	goto	u34_25
  1003  00B1  3010               	movlw	16
  1004  00B2  0273               	subwf	escribirSalida@i,w
  1005  00B3                     u34_25:	
  1006  00B3  1803               	btfsc	3,0
  1007  00B4  28E7               	goto	i1l791
  1008  00B5                     i1l781:	
  1009                           
  1010                           ;main.c: 94: {
  1011                           ;main.c: 95: RA0 = ((palabras[k] >> (16 - i)) & 1);
  1012  00B5  0875               	movf	escribirSalida@k,w
  1013  00B6  00F0               	movwf	??_escribirSalida
  1014  00B7  0770               	addwf	??_escribirSalida,w
  1015  00B8  3E38               	addlw	(low (_palabras| 0))& (0+255)
  1016  00B9  0084               	movwf	4
  1017  00BA  1383               	bcf	3,7	;select IRP bank0
  1018  00BB  0800               	movf	0,w
  1019  00BC  00F1               	movwf	??_escribirSalida+1
  1020  00BD  0A84               	incf	4,f
  1021  00BE  0800               	movf	0,w
  1022  00BF  00F2               	movwf	??_escribirSalida+2
  1023  00C0  0373               	decf	escribirSalida@i,w
  1024  00C1  3AFF               	xorlw	255
  1025  00C2  3E10               	addlw	16
  1026  00C3  3E01               	addlw	1
  1027  00C4  28C8               	goto	u35_24
  1028  00C5                     u35_25:	
  1029  00C5  1003               	clrc
  1030  00C6  0CF2               	rrf	??_escribirSalida+2,f
  1031  00C7  0CF1               	rrf	??_escribirSalida+1,f
  1032  00C8                     u35_24:	
  1033  00C8  3EFF               	addlw	-1
  1034  00C9  1D03               	skipz
  1035  00CA  28C5               	goto	u35_25
  1036  00CB  1C71               	btfss	??_escribirSalida+1,0
  1037  00CC  28D1               	goto	u36_20
  1038  00CD  1283               	bcf	3,5	;RP0=0, select bank0
  1039  00CE  1303               	bcf	3,6	;RP1=0, select bank0
  1040  00CF  1405               	bsf	5,0	;volatile
  1041  00D0  28D4               	goto	i1l783
  1042  00D1                     u36_20:	
  1043  00D1  1283               	bcf	3,5	;RP0=0, select bank0
  1044  00D2  1303               	bcf	3,6	;RP1=0, select bank0
  1045  00D3  1005               	bcf	5,0	;volatile
  1046  00D4                     i1l783:	
  1047                           
  1048                           ;main.c: 96: RA1 = 1;
  1049  00D4  1485               	bsf	5,1	;volatile
  1050                           
  1051                           ;main.c: 97: RA1 = 0;
  1052  00D5  1085               	bcf	5,1	;volatile
  1053  00D6  3001               	movlw	1
  1054  00D7  07F3               	addwf	escribirSalida@i,f
  1055  00D8  1803               	skipnc
  1056  00D9  0AF4               	incf	escribirSalida@i+1,f
  1057  00DA  3000               	movlw	0
  1058  00DB  07F4               	addwf	escribirSalida@i+1,f
  1059  00DC  0874               	movf	escribirSalida@i+1,w
  1060  00DD  3A80               	xorlw	128
  1061  00DE  00FF               	movwf	127
  1062  00DF  3080               	movlw	128
  1063  00E0  027F               	subwf	127,w
  1064  00E1  1D03               	skipz
  1065  00E2  28E5               	goto	u38_25
  1066  00E3  3010               	movlw	16
  1067  00E4  0273               	subwf	escribirSalida@i,w
  1068  00E5                     u38_25:	
  1069  00E5  1C03               	skipc
  1070  00E6  28B5               	goto	i1l781
  1071  00E7                     i1l791:	
  1072                           
  1073                           ;main.c: 98: }
  1074                           ;main.c: 99: palabras[k] = 0;
  1075  00E7  0875               	movf	escribirSalida@k,w
  1076  00E8  00F0               	movwf	??_escribirSalida
  1077  00E9  0770               	addwf	??_escribirSalida,w
  1078  00EA  3E38               	addlw	(low (_palabras| 0))& (0+255)
  1079  00EB  0084               	movwf	4
  1080  00EC  1383               	bcf	3,7	;select IRP bank0
  1081  00ED  0180               	clrf	0
  1082  00EE  0A84               	incf	4,f
  1083  00EF  0180               	clrf	0
  1084  00F0  3001               	movlw	1
  1085  00F1  07F5               	addwf	escribirSalida@k,f
  1086  00F2  1803               	skipnc
  1087  00F3  0AF6               	incf	escribirSalida@k+1,f
  1088  00F4  3000               	movlw	0
  1089  00F5  07F6               	addwf	escribirSalida@k+1,f
  1090  00F6  0876               	movf	escribirSalida@k+1,w
  1091  00F7  3A80               	xorlw	128
  1092  00F8  00FF               	movwf	127
  1093  00F9  3080               	movlw	128
  1094  00FA  027F               	subwf	127,w
  1095  00FB  1D03               	skipz
  1096  00FC  28FF               	goto	u39_25
  1097  00FD  3004               	movlw	4
  1098  00FE  0275               	subwf	escribirSalida@k,w
  1099  00FF                     u39_25:	
  1100  00FF  1C03               	skipc
  1101  0100  28A8               	goto	i1l775
  1102  0101                     i1l93:	
  1103                           
  1104                           ;main.c: 100: }
  1105                           ;main.c: 102: RA2 = 1;
  1106  0101  1283               	bcf	3,5	;RP0=0, select bank0
  1107  0102  1303               	bcf	3,6	;RP1=0, select bank0
  1108  0103  1505               	bsf	5,2	;volatile
  1109                           
  1110                           ;main.c: 103: RA2 = 0;
  1111  0104  1105               	bcf	5,2	;volatile
  1112  0105  0008               	return
  1113  0106                     __end_of_escribirSalida:	
  1114                           
  1115                           	psect	text6
  1116  01D9                     __ptext6:	
  1117 ;; *************** function _ReceiveByteSerially *****************
  1118 ;; Defined at:
  1119 ;;		line 134 in file "main.c"
  1120 ;; Parameters:    Size  Location     Type
  1121 ;;		None
  1122 ;; Auto vars:     Size  Location     Type
  1123 ;;		None
  1124 ;; Return value:  Size  Location     Type
  1125 ;;                  1    wreg      unsigned char 
  1126 ;; Registers used:
  1127 ;;		wreg
  1128 ;; Tracked objects:
  1129 ;;		On entry : 0/0
  1130 ;;		On exit  : 0/0
  1131 ;;		Unchanged: 0/0
  1132 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1133 ;;      Params:         0       0       0       0
  1134 ;;      Locals:         0       0       0       0
  1135 ;;      Temps:          0       0       0       0
  1136 ;;      Totals:         0       0       0       0
  1137 ;;Total ram usage:        0 bytes
  1138 ;; Hardware stack levels used:    1
  1139 ;; This function calls:
  1140 ;;		Nothing
  1141 ;; This function is called by:
  1142 ;;		_ISR
  1143 ;; This function uses a non-reentrant model
  1144 ;;
  1145                           
  1146                           
  1147                           ;psect for function _ReceiveByteSerially
  1148  01D9                     _ReceiveByteSerially:	
  1149                           
  1150                           ;main.c: 136: if(OERR)
  1151                           
  1152                           ;incstack = 0
  1153                           ; Regs used in _ReceiveByteSerially: [wreg]
  1154  01D9  1283               	bcf	3,5	;RP0=0, select bank0
  1155  01DA  1303               	bcf	3,6	;RP1=0, select bank0
  1156  01DB  1C98               	btfss	24,1	;volatile
  1157  01DC  29DF               	goto	i1l765
  1158                           
  1159                           ;main.c: 137: {
  1160                           ;main.c: 138: CREN = 0;
  1161  01DD  1218               	bcf	24,4	;volatile
  1162                           
  1163                           ;main.c: 139: CREN = 1;
  1164  01DE  1618               	bsf	24,4	;volatile
  1165  01DF                     i1l765:	
  1166                           
  1167                           ;main.c: 140: }
  1168                           ;main.c: 141: return RCREG;
  1169  01DF  081A               	movf	26,w	;volatile
  1170  01E0  0008               	return
  1171  01E1                     __end_of_ReceiveByteSerially:	
  1172  007E                     btemp	set	126	;btemp
  1173  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         16
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7      13
    BANK0            80     24      34
    BANK1            80      0       0
    BANK2            48      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_escribirSalida

Critical Paths under _main in BANK0

    _main->_resetDatos

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0     257
                                             21 BANK0      3     3      0
                           _InitUART
                         _resetDatos
                    _resetearSalidas
 ---------------------------------------------------------------------------------
 (1) _resetearSalidas                                      5     3      2     121
                                             14 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (1) _resetDatos                                           7     7      0     136
                                             14 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (1) _InitUART                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _ISR                                                 14    14      0     158
                                              0 BANK0     14    14      0
                _ReceiveByteSerially
                     _escribirSalida
 ---------------------------------------------------------------------------------
 (3) _escribirSalida                                       7     7      0     158
                                              0 COMMON     7     7      0
 ---------------------------------------------------------------------------------
 (3) _ReceiveByteSerially                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _InitUART
   _resetDatos
   _resetearSalidas

 _ISR (ROOT)
   _ReceiveByteSerially
   _escribirSalida

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA              80      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      7       D       1       92.9%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BANK0               50     18      22       3       42.5%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      2F       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK2            30      0       0       8        0.0%
BANK2               30      0       0       9        0.0%
DATA                 0      0      2F      10        0.0%


Microchip Technology PIC Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Sun Nov 19 01:49:13 2017

                   __CFG_CP$OFF 0000                              fsr 0004                             l101 01B4  
       __size_of_escribirSalida 006B                             l751 0148                             l729 019A  
                           l757 0164                             l881 0182                             _GIE 005F  
                           _RA0 0028                             _RA1 0029                             _RA2 002A  
                           _RA3 002B                             _RA4 002C                             u305 0162  
                           u255 01A4                             u265 0113                    __CFG_CPD$OFF 0000  
                           u507 018F                             _ISR 001C                             u285 0135  
                           u517 0122                             u295 0146                             _RX9 00C6  
                           _TX9 04C6                             fsr0 0004                             indf 0000  
                  __CFG_FOSC$HS 0000                    __CFG_LVP$OFF 0000                            ?_ISR 0070  
                          _BRGH 04C2                            _CREN 00C4                            _PEIE 005E  
                          _RCIE 0465                            _RCIF 0065                            i1l93 0101  
                          i1l89 008E                            _OERR 00C1                            _SPEN 00C7  
                          _SREN 00C5                            _TXIE 0464                            _TXEN 04C5  
                          _SYNC 04C4                            _main 016D                            btemp 007E  
                 __CFG_BOREN$ON 0000                            start 0010                           ??_ISR 0020  
                         ?_main 0070                   __CFG_WDTE$OFF 0000                           _CMCON 001F  
                         i1l841 0084                           i1l825 002F                           i1l765 01DF  
                         i1l781 00B5                           i1l783 00D4                           i1l791 00E7  
                         i1l775 00A8                           i1l839 0080                           _RCREG 001A  
                         u33_25 00A6                           _SPBRG 0099                           u34_25 00B3  
                         u35_24 00C8                           u35_25 00C5                           u36_20 00D1  
                         u45_25 0054                           u46_24 0068                           u38_25 00E5  
                         u46_25 0065                           u39_25 00FF                           _TRISA 0085  
                         _trama 0040                           pclath 000A                           status 0003  
                         wtemp0 007E                  __CFG_MCLRE$OFF 0000                 __initialization 0011  
              ?_resetearSalidas 002E                    __end_of_main 0196                __end_of_InitUART 01D1  
                        ??_main 0035                  __CFG_PWRTE$OFF 0000                          _indice 007B  
                _escribirSalida 009B                          saved_w 007E         __end_of__initialization 001A  
   __end_of_ReceiveByteSerially 01E1                  __pcstackCOMMON 0070          __end_of_escribirSalida 0106  
                    _dataLength 0079                      __pbssBANK0 0038                       ?_InitUART 0070  
                    __pmaintext 016D                      __pintentry 0004                 ?_escribirSalida 0070  
                    ??_InitUART 002E                     resetDatos@i 0031                     resetDatos@j 0033  
                       __ptext1 0196                         __ptext2 0106                         __ptext3 01B9  
                       __ptext4 001C                         __ptext5 009B                         __ptext6 01D9  
                  __size_of_ISR 007F                         _lectura 0077                         clrloop0 01D2  
          end_of_initialization 001A                      _resetDatos 0106        __size_of_resetearSalidas 0023  
           start_initialization 0011                     __end_of_ISR 009B               __size_of_InitUART 0018  
                   ?_resetDatos 0070                ??_escribirSalida 0070    __size_of_ReceiveByteSerially 0008  
                   __pbssCOMMON 0077                       ___latbits 0000                   __pcstackBANK0 0020  
             ??_resetearSalidas 0030             __size_of_resetDatos 0067                resetearSalidas@i 0031  
             interrupt_function 0004                       clear_ram0 01D1                        _InitUART 01B9  
           _ReceiveByteSerially 01D9                        _palabras 0038                   __size_of_main 0029  
                  ??_resetDatos 002E            ?_ReceiveByteSerially 0070                 _resetearSalidas 0196  
            __end_of_resetDatos 016D                        intlevel1 0000           ??_ReceiveByteSerially 0070  
resetearSalidas@cantidadSalidas 002E                 escribirSalida@i 0073                 escribirSalida@k 0075  
       __end_of_resetearSalidas 01B9  
