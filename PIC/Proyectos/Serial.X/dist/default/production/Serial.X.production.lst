

Microchip Technology PIC LITE Macro Assembler V1.44 build -154322312 
                                                                                               Fri Nov 10 11:23:59 2017

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	16F628A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	maintext,global,class=CODE,split=1,delta=2
     8                           	psect	text1,local,class=CODE,merge=1,delta=2
     9                           	psect	text2,local,class=CODE,merge=1,delta=2
    10                           	psect	text3,local,class=CODE,merge=1,delta=2
    11                           	psect	text4,local,class=CODE,merge=1,delta=2
    12                           	psect	intentry,global,class=CODE,delta=2
    13                           	psect	text5,local,class=CODE,merge=1,delta=2
    14                           	dabs	1,0x7E,2
    15  0000                     
    16                           ; Version 1.44
    17                           ; Generated 14/09/2017 GMT
    18                           ; 
    19                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    20                           ; All rights reserved.
    21                           ; 
    22                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    23                           ; 
    24                           ; Redistribution and use in source and binary forms, with or without modification, are
    25                           ; permitted provided that the following conditions are met:
    26                           ; 
    27                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    28                           ;        conditions and the following disclaimer.
    29                           ; 
    30                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    31                           ;        of conditions and the following disclaimer in the documentation and/or other
    32                           ;        materials provided with the distribution.
    33                           ; 
    34                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    35                           ;        software without specific prior written permission.
    36                           ; 
    37                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    38                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    39                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    40                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    41                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    42                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    43                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    44                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    45                           ; 
    46                           ; 
    47                           ; Code-generator required, PIC16F628A Definitions
    48                           ; 
    49                           ; SFR Addresses
    50  0000                     	;# 
    51  0001                     	;# 
    52  0002                     	;# 
    53  0003                     	;# 
    54  0004                     	;# 
    55  0005                     	;# 
    56  0006                     	;# 
    57  000A                     	;# 
    58  000B                     	;# 
    59  000C                     	;# 
    60  000E                     	;# 
    61  000E                     	;# 
    62  000F                     	;# 
    63  0010                     	;# 
    64  0011                     	;# 
    65  0012                     	;# 
    66  0015                     	;# 
    67  0015                     	;# 
    68  0016                     	;# 
    69  0017                     	;# 
    70  0018                     	;# 
    71  0019                     	;# 
    72  001A                     	;# 
    73  001F                     	;# 
    74  0081                     	;# 
    75  0085                     	;# 
    76  0086                     	;# 
    77  008C                     	;# 
    78  008E                     	;# 
    79  0092                     	;# 
    80  0098                     	;# 
    81  0099                     	;# 
    82  009A                     	;# 
    83  009B                     	;# 
    84  009C                     	;# 
    85  009D                     	;# 
    86  009F                     	;# 
    87  0000                     	;# 
    88  0001                     	;# 
    89  0002                     	;# 
    90  0003                     	;# 
    91  0004                     	;# 
    92  0005                     	;# 
    93  0006                     	;# 
    94  000A                     	;# 
    95  000B                     	;# 
    96  000C                     	;# 
    97  000E                     	;# 
    98  000E                     	;# 
    99  000F                     	;# 
   100  0010                     	;# 
   101  0011                     	;# 
   102  0012                     	;# 
   103  0015                     	;# 
   104  0015                     	;# 
   105  0016                     	;# 
   106  0017                     	;# 
   107  0018                     	;# 
   108  0019                     	;# 
   109  001A                     	;# 
   110  001F                     	;# 
   111  0081                     	;# 
   112  0085                     	;# 
   113  0086                     	;# 
   114  008C                     	;# 
   115  008E                     	;# 
   116  0092                     	;# 
   117  0098                     	;# 
   118  0099                     	;# 
   119  009A                     	;# 
   120  009B                     	;# 
   121  009C                     	;# 
   122  009D                     	;# 
   123  009F                     	;# 
   124  0019                     _TXREG	set	25
   125  001A                     _RCREG	set	26
   126  0064                     _TXIF	set	100
   127  00C6                     _RX9	set	198
   128  00C5                     _SREN	set	197
   129  00C7                     _SPEN	set	199
   130  005E                     _PEIE	set	94
   131  005F                     _GIE	set	95
   132  00C4                     _CREN	set	196
   133  00C1                     _OERR	set	193
   134  0065                     _RCIF	set	101
   135  0099                     _SPBRG	set	153
   136  04C5                     _TXEN	set	1221
   137  04C6                     _TX9	set	1222
   138  0465                     _RCIE	set	1125
   139  0464                     _TXIE	set	1124
   140  04C4                     _SYNC	set	1220
   141  04C2                     _BRGH	set	1218
   142  0431                     _TRISB1	set	1073
   143  0432                     _TRISB2	set	1074
   144                           
   145                           	psect	strings
   146  0042                     __pstrings:	
   147  0042                     stringtab:	
   148  0042                     __stringtab:	
   149  0042                     stringcode:	
   150                           ;	String table - string pointers are 1 byte each
   151                           
   152  0042                     stringdir:	
   153  0042  3000               	movlw	high stringdir
   154  0043  008A               	movwf	10
   155  0044  0804               	movf	4,w
   156  0045  0A84               	incf	4,f
   157  0046  0782               	addwf	2,f
   158  0047                     __stringbase:	
   159  0047  3400               	retlw	0
   160  0048                     __end_of__stringtab:	
   161  0048                     STR_1:	
   162  0048  3448               	retlw	72	;'H'
   163  0049  3465               	retlw	101	;'e'
   164  004A  346C               	retlw	108	;'l'
   165  004B  346C               	retlw	108	;'l'
   166  004C  346F               	retlw	111	;'o'
   167  004D  3420               	retlw	32	;' '
   168  004E  3457               	retlw	87	;'W'
   169  004F  346F               	retlw	111	;'o'
   170  0050  3472               	retlw	114	;'r'
   171  0051  346C               	retlw	108	;'l'
   172  0052  3464               	retlw	100	;'d'
   173  0053  3421               	retlw	33	;'!'
   174  0054  3400               	retlw	0
   175                           
   176                           ; #config settings
   177  0000                     
   178                           	psect	cinit
   179  0011                     start_initialization:	
   180  0011                     __initialization:	
   181  0011                     end_of_initialization:	
   182                           ;End of C runtime variable initialization code
   183                           
   184  0011                     __end_of__initialization:	
   185  0011  0183               	clrf	3
   186  0012  2875               	ljmp	_main	;jump to C main() function
   187                           
   188                           	psect	cstackCOMMON
   189  0070                     __pcstackCOMMON:	
   190  0070                     ?_SendByteSerially:	
   191  0070                     ?_InitUART:	
   192                           ; 1 bytes @ 0x0
   193                           
   194  0070                     ?_SendStringSerially:	
   195                           ; 1 bytes @ 0x0
   196                           
   197  0070                     ?_ISR:	
   198                           ; 1 bytes @ 0x0
   199                           
   200  0070                     ?_main:	
   201                           ; 1 bytes @ 0x0
   202                           
   203  0070                     ?i1_SendByteSerially:	
   204                           ; 1 bytes @ 0x0
   205                           
   206  0070                     ??i1_SendByteSerially:	
   207                           ; 1 bytes @ 0x0
   208                           
   209  0070                     i1SendByteSerially@Byte:	
   210                           ; 1 bytes @ 0x0
   211                           
   212                           
   213                           ; 1 bytes @ 0x0
   214  0070                     	ds	1
   215  0071                     ??_ISR:	
   216                           
   217                           ; 1 bytes @ 0x1
   218  0071                     	ds	4
   219  0075                     ??_SendByteSerially:	
   220  0075                     ??_InitUART:	
   221                           ; 1 bytes @ 0x5
   222                           
   223  0075                     SendByteSerially@Byte:	
   224                           ; 1 bytes @ 0x5
   225                           
   226                           
   227                           ; 1 bytes @ 0x5
   228  0075                     	ds	1
   229  0076                     ??_SendStringSerially:	
   230                           
   231                           ; 1 bytes @ 0x6
   232  0076                     	ds	1
   233  0077                     SendStringSerially@st:	
   234                           
   235                           ; 1 bytes @ 0x7
   236  0077                     	ds	1
   237  0078                     ??_main:	
   238                           
   239                           	psect	maintext
   240  0075                     __pmaintext:	
   241                           ; 1 bytes @ 0x8
   242 ;;
   243 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   244 ;;
   245 ;; *************** function _main *****************
   246 ;; Defined at:
   247 ;;		line 26 in file "main.c"
   248 ;; Parameters:    Size  Location     Type
   249 ;;		None
   250 ;; Auto vars:     Size  Location     Type
   251 ;;		None
   252 ;; Return value:  Size  Location     Type
   253 ;;                  1    wreg      void 
   254 ;; Registers used:
   255 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   256 ;; Tracked objects:
   257 ;;		On entry : B00/0
   258 ;;		On exit  : 0/0
   259 ;;		Unchanged: 0/0
   260 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   261 ;;      Params:         0       0       0       0
   262 ;;      Locals:         0       0       0       0
   263 ;;      Temps:          0       0       0       0
   264 ;;      Totals:         0       0       0       0
   265 ;;Total ram usage:        0 bytes
   266 ;; Hardware stack levels required when called:    4
   267 ;; This function calls:
   268 ;;		_InitUART
   269 ;;		_SendStringSerially
   270 ;; This function is called by:
   271 ;;		Startup code after reset
   272 ;; This function uses a non-reentrant model
   273 ;;
   274                           
   275                           
   276                           ;psect for function _main
   277  0075                     _main:	
   278                           
   279                           ;main.c: 28: InitUART();
   280                           
   281                           ;incstack = 0
   282                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   283  0075  2013               	fcall	_InitUART
   284                           
   285                           ;main.c: 30: SendStringSerially("Hello World!");
   286  0076  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   287  0077  2055               	fcall	_SendStringSerially
   288                           
   289                           ;main.c: 32: GIE = 1;
   290  0078  178B               	bsf	11,7	;volatile
   291                           
   292                           ;main.c: 33: PEIE = 1;
   293  0079  170B               	bsf	11,6	;volatile
   294  007A                     l30:	
   295                           ;main.c: 35: while(1)
   296                           
   297                           
   298                           ;main.c: 36: {
   299  007A  287A               	goto	l30
   300  007B                     __end_of_main:	
   301                           
   302                           	psect	text1
   303  0055                     __ptext1:	
   304 ;; *************** function _SendStringSerially *****************
   305 ;; Defined at:
   306 ;;		line 46 in file "UART.c"
   307 ;; Parameters:    Size  Location     Type
   308 ;;  st              1    wreg     PTR const unsigned char 
   309 ;;		 -> STR_1(13), 
   310 ;; Auto vars:     Size  Location     Type
   311 ;;  st              1    7[COMMON] PTR const unsigned char 
   312 ;;		 -> STR_1(13), 
   313 ;; Return value:  Size  Location     Type
   314 ;;                  1    wreg      void 
   315 ;; Registers used:
   316 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   317 ;; Tracked objects:
   318 ;;		On entry : 0/0
   319 ;;		On exit  : 0/0
   320 ;;		Unchanged: 0/0
   321 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   322 ;;      Params:         0       0       0       0
   323 ;;      Locals:         1       0       0       0
   324 ;;      Temps:          1       0       0       0
   325 ;;      Totals:         2       0       0       0
   326 ;;Total ram usage:        2 bytes
   327 ;; Hardware stack levels used:    1
   328 ;; Hardware stack levels required when called:    3
   329 ;; This function calls:
   330 ;;		_SendByteSerially
   331 ;; This function is called by:
   332 ;;		_main
   333 ;; This function uses a non-reentrant model
   334 ;;
   335                           
   336                           
   337                           ;psect for function _SendStringSerially
   338  0055                     _SendStringSerially:	
   339                           
   340                           ;incstack = 0
   341                           ; Regs used in _SendStringSerially: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   342                           ;SendStringSerially@st stored from wreg
   343  0055  00F7               	movwf	SendStringSerially@st
   344  0056                     l623:	
   345                           ;UART.c: 48: while(*st)
   346                           
   347  0056  0877               	movf	SendStringSerially@st,w
   348  0057  0084               	movwf	4
   349  0058  2042               	fcall	stringdir
   350  0059  3A00               	xorlw	0
   351  005A  1903               	btfsc	3,2
   352  005B  0008               	return
   353                           
   354                           ;UART.c: 49: SendByteSerially(*st++);
   355  005C  0877               	movf	SendStringSerially@st,w
   356  005D  0084               	movwf	4
   357  005E  2042               	fcall	stringdir
   358  005F  2065               	fcall	_SendByteSerially
   359  0060  3001               	movlw	1
   360  0061  00F6               	movwf	??_SendStringSerially
   361  0062  0876               	movf	??_SendStringSerially,w
   362  0063  07F7               	addwf	SendStringSerially@st,f
   363  0064  2856               	goto	l623
   364  0065                     __end_of_SendStringSerially:	
   365                           
   366                           	psect	text2
   367  0065                     __ptext2:	
   368 ;; *************** function _SendByteSerially *****************
   369 ;; Defined at:
   370 ;;		line 27 in file "UART.c"
   371 ;; Parameters:    Size  Location     Type
   372 ;;  Byte            1    wreg     unsigned char 
   373 ;; Auto vars:     Size  Location     Type
   374 ;;  Byte            1    5[COMMON] unsigned char 
   375 ;; Return value:  Size  Location     Type
   376 ;;                  1    wreg      void 
   377 ;; Registers used:
   378 ;;		wreg
   379 ;; Tracked objects:
   380 ;;		On entry : 0/0
   381 ;;		On exit  : 0/0
   382 ;;		Unchanged: 0/0
   383 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   384 ;;      Params:         0       0       0       0
   385 ;;      Locals:         1       0       0       0
   386 ;;      Temps:          0       0       0       0
   387 ;;      Totals:         1       0       0       0
   388 ;;Total ram usage:        1 bytes
   389 ;; Hardware stack levels used:    1
   390 ;; Hardware stack levels required when called:    2
   391 ;; This function calls:
   392 ;;		Nothing
   393 ;; This function is called by:
   394 ;;		_SendStringSerially
   395 ;; This function uses a non-reentrant model
   396 ;;
   397                           
   398                           
   399                           ;psect for function _SendByteSerially
   400  0065                     _SendByteSerially:	
   401                           
   402                           ;incstack = 0
   403                           ; Regs used in _SendByteSerially: [wreg]
   404                           ;SendByteSerially@Byte stored from wreg
   405  0065  00F5               	movwf	SendByteSerially@Byte
   406  0066                     l75:	
   407                           ;UART.c: 29: while(!TXIF);
   408                           
   409  0066  1283               	bcf	3,5	;RP0=0, select bank0
   410  0067  1303               	bcf	3,6	;RP1=0, select bank0
   411  0068  1E0C               	btfss	12,4	;volatile
   412  0069  2866               	goto	l75
   413                           
   414                           ;UART.c: 30: TXREG = Byte;
   415  006A  0875               	movf	SendByteSerially@Byte,w
   416  006B  0099               	movwf	25	;volatile
   417  006C  0008               	return
   418  006D                     __end_of_SendByteSerially:	
   419                           
   420                           	psect	text3
   421  0013                     __ptext3:	
   422 ;; *************** function _InitUART *****************
   423 ;; Defined at:
   424 ;;		line 7 in file "UART.c"
   425 ;; Parameters:    Size  Location     Type
   426 ;;		None
   427 ;; Auto vars:     Size  Location     Type
   428 ;;		None
   429 ;; Return value:  Size  Location     Type
   430 ;;                  1    wreg      void 
   431 ;; Registers used:
   432 ;;		wreg
   433 ;; Tracked objects:
   434 ;;		On entry : 0/0
   435 ;;		On exit  : 0/0
   436 ;;		Unchanged: 0/0
   437 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   438 ;;      Params:         0       0       0       0
   439 ;;      Locals:         0       0       0       0
   440 ;;      Temps:          0       0       0       0
   441 ;;      Totals:         0       0       0       0
   442 ;;Total ram usage:        0 bytes
   443 ;; Hardware stack levels used:    1
   444 ;; Hardware stack levels required when called:    2
   445 ;; This function calls:
   446 ;;		Nothing
   447 ;; This function is called by:
   448 ;;		_main
   449 ;; This function uses a non-reentrant model
   450 ;;
   451                           
   452                           
   453                           ;psect for function _InitUART
   454  0013                     _InitUART:	
   455                           
   456                           ;UART.c: 9: TRISB2 = 0;
   457                           
   458                           ;incstack = 0
   459                           ; Regs used in _InitUART: [wreg]
   460  0013  1683               	bsf	3,5	;RP0=1, select bank1
   461  0014  1303               	bcf	3,6	;RP1=0, select bank1
   462  0015  1106               	bcf	6,2	;volatile
   463                           
   464                           ;UART.c: 10: TRISB1 = 1;
   465  0016  1486               	bsf	6,1	;volatile
   466                           
   467                           ;UART.c: 12: SPBRG = ((4000000/16)/9600) - 1;
   468  0017  3019               	movlw	25
   469  0018  0099               	movwf	25	;volatile
   470                           
   471                           ;UART.c: 13: BRGH = 1;
   472  0019  1518               	bsf	24,2	;volatile
   473                           
   474                           ;UART.c: 14: SYNC = 0;
   475  001A  1218               	bcf	24,4	;volatile
   476                           
   477                           ;UART.c: 15: SPEN = 1;
   478  001B  1283               	bcf	3,5	;RP0=0, select bank0
   479  001C  1303               	bcf	3,6	;RP1=0, select bank0
   480  001D  1798               	bsf	24,7	;volatile
   481                           
   482                           ;UART.c: 16: CREN = 1;
   483  001E  1618               	bsf	24,4	;volatile
   484                           
   485                           ;UART.c: 17: SREN = 0;
   486  001F  1298               	bcf	24,5	;volatile
   487                           
   488                           ;UART.c: 18: TXIE = 0;
   489  0020  1683               	bsf	3,5	;RP0=1, select bank1
   490  0021  1303               	bcf	3,6	;RP1=0, select bank1
   491  0022  120C               	bcf	12,4	;volatile
   492                           
   493                           ;UART.c: 19: RCIE = 1;
   494  0023  168C               	bsf	12,5	;volatile
   495                           
   496                           ;UART.c: 20: TX9 = 0;
   497  0024  1318               	bcf	24,6	;volatile
   498                           
   499                           ;UART.c: 21: RX9 = 0;
   500  0025  1283               	bcf	3,5	;RP0=0, select bank0
   501  0026  1303               	bcf	3,6	;RP1=0, select bank0
   502  0027  1318               	bcf	24,6	;volatile
   503                           
   504                           ;UART.c: 22: TXEN = 0;
   505  0028  1683               	bsf	3,5	;RP0=1, select bank1
   506  0029  1303               	bcf	3,6	;RP1=0, select bank1
   507  002A  1298               	bcf	24,5	;volatile
   508                           
   509                           ;UART.c: 23: TXEN = 1;
   510  002B  1698               	bsf	24,5	;volatile
   511  002C  0008               	return
   512  002D                     __end_of_InitUART:	
   513                           
   514                           	psect	text4
   515  002D                     __ptext4:	
   516 ;; *************** function _ISR *****************
   517 ;; Defined at:
   518 ;;		line 12 in file "main.c"
   519 ;; Parameters:    Size  Location     Type
   520 ;;		None
   521 ;; Auto vars:     Size  Location     Type
   522 ;;		None
   523 ;; Return value:  Size  Location     Type
   524 ;;                  1    wreg      void 
   525 ;; Registers used:
   526 ;;		wreg, status,2, status,0, pclath, cstack
   527 ;; Tracked objects:
   528 ;;		On entry : 0/0
   529 ;;		On exit  : 0/0
   530 ;;		Unchanged: 0/0
   531 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   532 ;;      Params:         0       0       0       0
   533 ;;      Locals:         0       0       0       0
   534 ;;      Temps:          4       0       0       0
   535 ;;      Totals:         4       0       0       0
   536 ;;Total ram usage:        4 bytes
   537 ;; Hardware stack levels used:    1
   538 ;; Hardware stack levels required when called:    1
   539 ;; This function calls:
   540 ;;		i1_SendByteSerially
   541 ;; This function is called by:
   542 ;;		Interrupt level 1
   543 ;; This function uses a non-reentrant model
   544 ;;
   545                           
   546                           
   547                           ;psect for function _ISR
   548  002D                     _ISR:	
   549                           
   550                           ;main.c: 14: if(RCIF)
   551  002D  1E8C               	btfss	12,5	;volatile
   552  002E  2835               	goto	i1l25
   553                           
   554                           ;main.c: 15: {
   555                           ;main.c: 16: if(OERR)
   556  002F  1C98               	btfss	24,1	;volatile
   557  0030  2833               	goto	i1l635
   558                           
   559                           ;main.c: 17: {
   560                           ;main.c: 18: CREN = 0;
   561  0031  1218               	bcf	24,4	;volatile
   562                           
   563                           ;main.c: 19: CREN = 1;
   564  0032  1618               	bsf	24,4	;volatile
   565  0033                     i1l635:	
   566                           
   567                           ;main.c: 20: }
   568                           ;main.c: 22: SendByteSerially(RCREG);
   569  0033  081A               	movf	26,w	;volatile
   570  0034  206D               	fcall	i1_SendByteSerially
   571  0035                     i1l25:	
   572  0035  0874               	movf	??_ISR+3,w
   573  0036  1283               	bcf	3,5	;RP0=0, select bank0
   574  0037  1303               	bcf	3,6	;RP1=0, select bank0
   575  0038  00FF               	movwf	127
   576  0039  0873               	movf	??_ISR+2,w
   577  003A  008A               	movwf	10
   578  003B  0872               	movf	??_ISR+1,w
   579  003C  0084               	movwf	4
   580  003D  0E71               	swapf	??_ISR^(0+-128),w
   581  003E  0083               	movwf	3
   582  003F  0EFE               	swapf	126,f
   583  0040  0E7E               	swapf	126,w
   584  0041  0009               	retfie
   585  0042                     __end_of_ISR:	
   586                           
   587                           	psect	intentry
   588  0004                     __pintentry:	
   589                           ;incstack = 0
   590                           ; Regs used in _ISR: [wreg+status,2+status,0+pclath+cstack]
   591                           
   592  0004                     interrupt_function:	
   593  007E                     saved_w	set	btemp
   594  0004  00FE               	movwf	btemp
   595  0005  0E03               	swapf	3,w
   596  0006  00F1               	movwf	??_ISR
   597  0007  0804               	movf	4,w
   598  0008  00F2               	movwf	??_ISR+1
   599  0009  080A               	movf	10,w
   600  000A  00F3               	movwf	??_ISR+2
   601  000B  1283               	bcf	3,5	;RP0=0, select bank0
   602  000C  1303               	bcf	3,6	;RP1=0, select bank0
   603  000D  087F               	movf	btemp+1,w
   604  000E  00F4               	movwf	??_ISR+3
   605  000F  282D               	ljmp	_ISR
   606                           
   607                           	psect	text5
   608  006D                     __ptext5:	
   609 ;; *************** function i1_SendByteSerially *****************
   610 ;; Defined at:
   611 ;;		line 27 in file "UART.c"
   612 ;; Parameters:    Size  Location     Type
   613 ;;  Byte            1    wreg     unsigned char 
   614 ;; Auto vars:     Size  Location     Type
   615 ;;  Byte            1    0[COMMON] unsigned char 
   616 ;; Return value:  Size  Location     Type
   617 ;;                  1    wreg      void 
   618 ;; Registers used:
   619 ;;		wreg
   620 ;; Tracked objects:
   621 ;;		On entry : 0/0
   622 ;;		On exit  : 0/0
   623 ;;		Unchanged: 0/0
   624 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   625 ;;      Params:         0       0       0       0
   626 ;;      Locals:         1       0       0       0
   627 ;;      Temps:          0       0       0       0
   628 ;;      Totals:         1       0       0       0
   629 ;;Total ram usage:        1 bytes
   630 ;; Hardware stack levels used:    1
   631 ;; This function calls:
   632 ;;		Nothing
   633 ;; This function is called by:
   634 ;;		_ISR
   635 ;; This function uses a non-reentrant model
   636 ;;
   637                           
   638                           
   639                           ;psect for function i1_SendByteSerially
   640  006D                     i1_SendByteSerially:	
   641                           
   642                           ;incstack = 0
   643                           ; Regs used in i1_SendByteSerially: [wreg]
   644                           ;i1SendByteSerially@Byte stored from wreg
   645  006D  00F0               	movwf	i1SendByteSerially@Byte
   646  006E                     i1l75:	
   647                           ;UART.c: 29: while(!TXIF);
   648                           
   649  006E  1283               	bcf	3,5	;RP0=0, select bank0
   650  006F  1303               	bcf	3,6	;RP1=0, select bank0
   651  0070  1E0C               	btfss	12,4	;volatile
   652  0071  286E               	goto	i1l75
   653                           
   654                           ;UART.c: 30: TXREG = Byte;
   655  0072  0870               	movf	i1SendByteSerially@Byte,w
   656  0073  0099               	movwf	25	;volatile
   657  0074  0008               	return
   658  0075                     __end_ofi1_SendByteSerially:	
   659  007E                     btemp	set	126	;btemp
   660  007E                     wtemp0	set	126


Data Sizes:
    Strings     13
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8       8
    BANK0            80      0       0
    BANK1            80      0       0
    BANK2            48      0       0

Pointer List with Targets:

    SendStringSerially@st	PTR const unsigned char  size(1) Largest target is 13
		 -> STR_1(CODE[13]), 


Critical Paths under _main in COMMON

    _main->_SendStringSerially
    _SendStringSerially->_SendByteSerially

Critical Paths under _ISR in COMMON

    _ISR->i1_SendByteSerially

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0      87
                           _InitUART
                 _SendStringSerially
 ---------------------------------------------------------------------------------
 (1) _SendStringSerially                                   2     2      0      87
                                              6 COMMON     2     2      0
                   _SendByteSerially
 ---------------------------------------------------------------------------------
 (2) _SendByteSerially                                     1     1      0      15
                                              5 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _InitUART                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _ISR                                                  4     4      0      22
                                              1 COMMON     4     4      0
                 i1_SendByteSerially
 ---------------------------------------------------------------------------------
 (4) i1_SendByteSerially                                   1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _InitUART
   _SendStringSerially
     _SendByteSerially

 _ISR (ROOT)
   i1_SendByteSerially

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA              80      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      8       8       1       57.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BANK0               50      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0       0       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK2            30      0       0       8        0.0%
BANK2               30      0       0       9        0.0%
DATA                 0      0       0      10        0.0%


Microchip Technology PIC Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Fri Nov 10 11:23:59 2017

                          pc 0002                  __CFG_CP$OFF 0000                           l30 007A  
                         l75 0066                           fsr 0004                          l623 0056  
                        _GIE 005F                 __CFG_CPD$OFF 0000                          _ISR 002D  
                        _RX9 00C6                          _TX9 04C6                          fsr0 0004  
               __CFG_LVP$OFF 0000                         ?_ISR 0070                         STR_1 0048  
                       _BRGH 04C2                         _CREN 00C4                         _PEIE 005E  
                       i1l25 0035                         _RCIE 0465                         _RCIF 0065  
                       i1l75 006E                         _OERR 00C1                         _SPEN 00C7  
                       _SREN 00C5                         _TXIE 0464                         _TXEN 04C5  
                       _TXIF 0064                         _SYNC 04C4                         _main 0075  
                       btemp 007E                __CFG_BOREN$ON 0000                         start 0010  
                      ??_ISR 0071                        ?_main 0070                __CFG_WDTE$OFF 0000  
                      i1l635 0033                        _RCREG 001A                        _SPBRG 0099  
                      _TXREG 0019           _SendStringSerially 0055                        pclath 000A  
        ?_SendStringSerially 0070                        status 0003                        wtemp0 007E  
             __CFG_MCLRE$OFF 0000              __initialization 0011                 __end_of_main 007B  
           __end_of_InitUART 002D         ??_SendStringSerially 0076                       ??_main 0078  
         i1_SendByteSerially 006D                       _TRISB1 0431                       _TRISB2 0432  
        ?i1_SendByteSerially 0070               __CFG_PWRTE$OFF 0000       i1SendByteSerially@Byte 0070  
       ??i1_SendByteSerially 0070     __end_of_SendByteSerially 006D                       saved_w 007E  
    __end_of__initialization 0011               __pcstackCOMMON 0070         SendByteSerially@Byte 0075  
                  ?_InitUART 0070                   __pmaintext 0075                   __pintentry 0004  
                 __stringtab 0042                   ??_InitUART 0075         SendStringSerially@st 0077  
                    __ptext1 0055                      __ptext2 0065                      __ptext3 0013  
                    __ptext4 002D                      __ptext5 006D                 __size_of_ISR 0015  
       end_of_initialization 0011  __size_of_SendStringSerially 0010            ?_SendByteSerially 0070  
         ??_SendByteSerially 0075  __size_ofi1_SendByteSerially 0008          start_initialization 0011  
                __end_of_ISR 0042            __size_of_InitUART 001A                    ___latbits 0000  
                  __pstrings 0042            interrupt_function 0004                  __stringbase 0047  
                   _InitUART 0013    __size_of_SendByteSerially 0008   __end_of_SendStringSerially 0065  
         __end_of__stringtab 0048                __size_of_main 0006   __end_ofi1_SendByteSerially 0075  
                   intlevel1 0000                    stringcode 0042                     stringdir 0042  
                   stringtab 0042           __CFG_FOSC$INTOSCIO 0000             _SendByteSerially 0065  
