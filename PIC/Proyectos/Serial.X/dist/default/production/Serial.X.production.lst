

Microchip Technology PIC LITE Macro Assembler V1.42 build -159332390 
                                                                                               Mon Nov 20 03:25:58 2017

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	16F628A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	intentry,global,class=CODE,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,delta=2
    19                           	dabs	1,0x7E,2
    20  0000                     
    21                           ; Version 1.42
    22                           ; Generated 13/04/2017 GMT
    23                           ; 
    24                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    25                           ; All rights reserved.
    26                           ; 
    27                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    28                           ; 
    29                           ; Redistribution and use in source and binary forms, with or without modification, are
    30                           ; permitted provided that the following conditions are met:
    31                           ; 
    32                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    33                           ;        conditions and the following disclaimer.
    34                           ; 
    35                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    36                           ;        of conditions and the following disclaimer in the documentation and/or other
    37                           ;        materials provided with the distribution.
    38                           ; 
    39                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    40                           ;        software without specific prior written permission.
    41                           ; 
    42                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    43                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    44                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    45                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    46                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    47                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    48                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    49                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    50                           ; 
    51                           ; 
    52                           ; Code-generator required, PIC16F628A Definitions
    53                           ; 
    54                           ; SFR Addresses
    55  0000                     	;# 
    56  0001                     	;# 
    57  0002                     	;# 
    58  0003                     	;# 
    59  0004                     	;# 
    60  0005                     	;# 
    61  0006                     	;# 
    62  000A                     	;# 
    63  000B                     	;# 
    64  000C                     	;# 
    65  000E                     	;# 
    66  000E                     	;# 
    67  000F                     	;# 
    68  0010                     	;# 
    69  0011                     	;# 
    70  0012                     	;# 
    71  0015                     	;# 
    72  0015                     	;# 
    73  0016                     	;# 
    74  0017                     	;# 
    75  0018                     	;# 
    76  0019                     	;# 
    77  001A                     	;# 
    78  001F                     	;# 
    79  0081                     	;# 
    80  0085                     	;# 
    81  0086                     	;# 
    82  008C                     	;# 
    83  008E                     	;# 
    84  0092                     	;# 
    85  0098                     	;# 
    86  0099                     	;# 
    87  009A                     	;# 
    88  009B                     	;# 
    89  009C                     	;# 
    90  009D                     	;# 
    91  009F                     	;# 
    92                           
    93                           	psect	idataBANK0
    94  01F0                     __pidataBANK0:	
    95                           
    96                           ;initializer for _palabras
    97  01F0  34FF               	retlw	255
    98  01F1  34FF               	retlw	255
    99  01F2  34FF               	retlw	255
   100  01F3  34FF               	retlw	255
   101  01F4  34FF               	retlw	255
   102  01F5  34FF               	retlw	255
   103  01F6  34FF               	retlw	255
   104  01F7  34FF               	retlw	255
   105  001A                     _RCREG	set	26
   106  001F                     _CMCON	set	31
   107  00C1                     _OERR	set	193
   108  00C6                     _RX9	set	198
   109  00C5                     _SREN	set	197
   110  00C4                     _CREN	set	196
   111  00C7                     _SPEN	set	199
   112  002A                     _RA2	set	42
   113  0029                     _RA1	set	41
   114  0028                     _RA0	set	40
   115  0065                     _RCIF	set	101
   116  002C                     _RA4	set	44
   117  005E                     _PEIE	set	94
   118  005F                     _GIE	set	95
   119  002B                     _RA3	set	43
   120  0099                     _SPBRG	set	153
   121  0085                     _TRISA	set	133
   122  04C5                     _TXEN	set	1221
   123  04C6                     _TX9	set	1222
   124  0465                     _RCIE	set	1125
   125  0464                     _TXIE	set	1124
   126  04C4                     _SYNC	set	1220
   127  04C2                     _BRGH	set	1218
   128                           
   129                           ; #config settings
   130  0000                     
   131                           	psect	cinit
   132  0011                     start_initialization:	
   133  0011                     __initialization:	
   134                           
   135                           ; Initialize objects allocated to BANK0
   136  0011  21F0               	fcall	__pidataBANK0	;fetch initializer
   137  0012  00BA               	movwf	__pdataBANK0& (0+127)
   138  0013  21F1               	fcall	__pidataBANK0+1	;fetch initializer
   139  0014  00BB               	movwf	(__pdataBANK0+1)& (0+127)
   140  0015  21F2               	fcall	__pidataBANK0+2	;fetch initializer
   141  0016  00BC               	movwf	(__pdataBANK0+2)& (0+127)
   142  0017  21F3               	fcall	__pidataBANK0+3	;fetch initializer
   143  0018  00BD               	movwf	(__pdataBANK0+3)& (0+127)
   144  0019  21F4               	fcall	__pidataBANK0+4	;fetch initializer
   145  001A  00BE               	movwf	(__pdataBANK0+4)& (0+127)
   146  001B  21F5               	fcall	__pidataBANK0+5	;fetch initializer
   147  001C  00BF               	movwf	(__pdataBANK0+5)& (0+127)
   148  001D  21F6               	fcall	__pidataBANK0+6	;fetch initializer
   149  001E  00C0               	movwf	(__pdataBANK0+6)& (0+127)
   150  001F  21F7               	fcall	__pidataBANK0+7	;fetch initializer
   151  0020  00C1               	movwf	(__pdataBANK0+7)& (0+127)
   152                           
   153                           ; Clear objects allocated to BANK0
   154  0021  01C2               	clrf	__pbssBANK0& (0+127)
   155  0022  01C3               	clrf	(__pbssBANK0+1)& (0+127)
   156  0023  01C4               	clrf	(__pbssBANK0+2)& (0+127)
   157  0024  01C5               	clrf	(__pbssBANK0+3)& (0+127)
   158                           
   159                           ; Clear objects allocated to COMMON
   160  0025  01F7               	clrf	__pbssCOMMON& (0+127)
   161  0026  01F8               	clrf	(__pbssCOMMON+1)& (0+127)
   162  0027  01F9               	clrf	(__pbssCOMMON+2)& (0+127)
   163  0028  01FA               	clrf	(__pbssCOMMON+3)& (0+127)
   164  0029  01FB               	clrf	(__pbssCOMMON+4)& (0+127)
   165  002A  01FC               	clrf	(__pbssCOMMON+5)& (0+127)
   166  002B                     end_of_initialization:	
   167                           ;End of C runtime variable initialization code
   168                           
   169  002B                     __end_of__initialization:	
   170  002B  0183               	clrf	3
   171  002C  298C               	ljmp	_main	;jump to C main() function
   172                           
   173                           	psect	bssCOMMON
   174  0077                     __pbssCOMMON:	
   175  0077                     _buffer:	
   176  0077                     	ds	2
   177  0079                     _indice:	
   178  0079                     	ds	2
   179  007B                     _lectura:	
   180  007B                     	ds	2
   181                           
   182                           	psect	bssBANK0
   183  0042                     __pbssBANK0:	
   184  0042                     _trama:	
   185  0042                     	ds	2
   186  0044                     _dataLength:	
   187  0044                     	ds	2
   188                           
   189                           	psect	dataBANK0
   190  003A                     __pdataBANK0:	
   191  003A                     _palabras:	
   192  003A                     	ds	8
   193                           
   194                           	psect	cstackCOMMON
   195  0070                     __pcstackCOMMON:	
   196  0070                     ?_InitUART:	
   197  0070                     ?_resetDatos:	
   198                           ; 1 bytes @ 0x0
   199                           
   200  0070                     ?_ReceiveByteSerially:	
   201                           ; 1 bytes @ 0x0
   202                           
   203  0070                     ??_ReceiveByteSerially:	
   204                           ; 1 bytes @ 0x0
   205                           
   206  0070                     ?_escribirSalida:	
   207                           ; 1 bytes @ 0x0
   208                           
   209  0070                     ??_escribirSalida:	
   210                           ; 1 bytes @ 0x0
   211                           
   212  0070                     ?_main:	
   213                           ; 1 bytes @ 0x0
   214                           
   215  0070                     ?_ISR:	
   216                           ; 1 bytes @ 0x0
   217                           
   218                           
   219                           ; 1 bytes @ 0x0
   220  0070                     	ds	3
   221  0073                     escribirSalida@k:	
   222                           
   223                           ; 2 bytes @ 0x3
   224  0073                     	ds	2
   225  0075                     escribirSalida@i:	
   226                           
   227                           ; 2 bytes @ 0x5
   228  0075                     	ds	2
   229                           
   230                           	psect	cstackBANK0
   231  0020                     __pcstackBANK0:	
   232  0020                     ??_ISR:	
   233                           
   234                           ; 1 bytes @ 0x0
   235  0020                     	ds	16
   236  0030                     ??_InitUART:	
   237  0030                     ?_resetearSalidas:	
   238                           ; 1 bytes @ 0x10
   239                           
   240  0030                     ??_resetDatos:	
   241                           ; 1 bytes @ 0x10
   242                           
   243  0030                     resetearSalidas@cantidadSalidas:	
   244                           ; 1 bytes @ 0x10
   245                           
   246                           
   247                           ; 2 bytes @ 0x10
   248  0030                     	ds	2
   249  0032                     ??_resetearSalidas:	
   250                           
   251                           ; 1 bytes @ 0x12
   252  0032                     	ds	1
   253  0033                     resetearSalidas@i:	
   254  0033                     resetDatos@i:	
   255                           ; 2 bytes @ 0x13
   256                           
   257                           
   258                           ; 2 bytes @ 0x13
   259  0033                     	ds	2
   260  0035                     resetDatos@j:	
   261                           
   262                           ; 2 bytes @ 0x15
   263  0035                     	ds	2
   264  0037                     ??_main:	
   265                           
   266                           ; 1 bytes @ 0x17
   267  0037                     	ds	3
   268                           
   269                           	psect	maintext
   270  018C                     __pmaintext:	
   271 ;;
   272 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   273 ;;
   274 ;; *************** function _main *****************
   275 ;; Defined at:
   276 ;;		line 41 in file "main.c"
   277 ;; Parameters:    Size  Location     Type
   278 ;;		None
   279 ;; Auto vars:     Size  Location     Type
   280 ;;		None
   281 ;; Return value:  Size  Location     Type
   282 ;;                  1    wreg      void 
   283 ;; Registers used:
   284 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   285 ;; Tracked objects:
   286 ;;		On entry : B00/0
   287 ;;		On exit  : 0/0
   288 ;;		Unchanged: 0/0
   289 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   290 ;;      Params:         0       0       0       0
   291 ;;      Locals:         0       0       0       0
   292 ;;      Temps:          0       3       0       0
   293 ;;      Totals:         0       3       0       0
   294 ;;Total ram usage:        3 bytes
   295 ;; Hardware stack levels required when called:    3
   296 ;; This function calls:
   297 ;;		_InitUART
   298 ;;		_resetDatos
   299 ;;		_resetearSalidas
   300 ;; This function is called by:
   301 ;;		Startup code after reset
   302 ;; This function uses a non-reentrant model
   303 ;;
   304                           
   305                           
   306                           ;psect for function _main
   307  018C                     _main:	
   308                           
   309                           ;main.c: 43: CMCON = 0x07;
   310                           
   311                           ;incstack = 0
   312                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   313  018C  3007               	movlw	7
   314  018D  1283               	bcf	3,5	;RP0=0, select bank0
   315  018E  1303               	bcf	3,6	;RP1=0, select bank0
   316  018F  009F               	movwf	31	;volatile
   317                           
   318                           ;main.c: 44: TRISA = 0b00010000;
   319  0190  3010               	movlw	16
   320  0191  1683               	bsf	3,5	;RP0=1, select bank1
   321  0192  1303               	bcf	3,6	;RP1=0, select bank1
   322  0193  0085               	movwf	5	;volatile
   323                           
   324                           ;main.c: 45: RA3 = 0;
   325  0194  1283               	bcf	3,5	;RP0=0, select bank0
   326  0195  1303               	bcf	3,6	;RP1=0, select bank0
   327  0196  1185               	bcf	5,3	;volatile
   328                           
   329                           ;main.c: 47: InitUART();
   330  0197  21D8               	fcall	_InitUART
   331                           
   332                           ;main.c: 49: GIE = 1;
   333  0198  178B               	bsf	11,7	;volatile
   334                           
   335                           ;main.c: 50: PEIE = 1;
   336  0199  170B               	bsf	11,6	;volatile
   337                           
   338                           ;main.c: 52: resetearSalidas(64);
   339  019A  3040               	movlw	64
   340  019B  1283               	bcf	3,5	;RP0=0, select bank0
   341  019C  1303               	bcf	3,6	;RP1=0, select bank0
   342  019D  00B0               	movwf	resetearSalidas@cantidadSalidas
   343  019E  3000               	movlw	0
   344  019F  00B1               	movwf	resetearSalidas@cantidadSalidas+1
   345  01A0  21B5               	fcall	_resetearSalidas
   346  01A1                     l893:	
   347                           ;main.c: 54: while(1)
   348                           
   349                           
   350                           ;main.c: 55: {
   351                           ;main.c: 56: if(RA4)
   352  01A1  1283               	bcf	3,5	;RP0=0, select bank0
   353  01A2  1303               	bcf	3,6	;RP1=0, select bank0
   354  01A3  1E05               	btfss	5,4	;volatile
   355  01A4  29A1               	goto	l893
   356                           
   357                           ;main.c: 57: {
   358                           ;main.c: 58: resetDatos();
   359  01A5  20C3               	fcall	_resetDatos
   360                           
   361                           ;main.c: 59: _delay((unsigned long)((500)*(20000000/4000.0)));
   362  01A6  300D               	movlw	13
   363  01A7  1283               	bcf	3,5	;RP0=0, select bank0
   364  01A8  1303               	bcf	3,6	;RP1=0, select bank0
   365  01A9  00B9               	movwf	??_main+2
   366  01AA  30AF               	movlw	175
   367  01AB  00B8               	movwf	??_main+1
   368  01AC  30B6               	movlw	182
   369  01AD  00B7               	movwf	??_main
   370  01AE                     u567:	
   371  01AE  0BB7               	decfsz	??_main,f
   372  01AF  29AE               	goto	u567
   373  01B0  0BB8               	decfsz	??_main+1,f
   374  01B1  29AE               	goto	u567
   375  01B2  0BB9               	decfsz	??_main+2,f
   376  01B3  29AE               	goto	u567
   377  01B4  29A1               	goto	l893
   378  01B5                     __end_of_main:	
   379                           
   380                           	psect	text1
   381  01B5                     __ptext1:	
   382 ;; *************** function _resetearSalidas *****************
   383 ;; Defined at:
   384 ;;		line 114 in file "main.c"
   385 ;; Parameters:    Size  Location     Type
   386 ;;  cantidadSali    2   16[BANK0 ] int 
   387 ;; Auto vars:     Size  Location     Type
   388 ;;  i               2   19[BANK0 ] int 
   389 ;; Return value:  Size  Location     Type
   390 ;;                  1    wreg      void 
   391 ;; Registers used:
   392 ;;		wreg, status,2, status,0
   393 ;; Tracked objects:
   394 ;;		On entry : 0/0
   395 ;;		On exit  : 0/0
   396 ;;		Unchanged: 0/0
   397 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   398 ;;      Params:         0       2       0       0
   399 ;;      Locals:         0       2       0       0
   400 ;;      Temps:          0       1       0       0
   401 ;;      Totals:         0       5       0       0
   402 ;;Total ram usage:        5 bytes
   403 ;; Hardware stack levels used:    1
   404 ;; Hardware stack levels required when called:    2
   405 ;; This function calls:
   406 ;;		Nothing
   407 ;; This function is called by:
   408 ;;		_main
   409 ;; This function uses a non-reentrant model
   410 ;;
   411                           
   412                           
   413                           ;psect for function _resetearSalidas
   414  01B5                     _resetearSalidas:	
   415                           
   416                           ;main.c: 116: for(int i = 0; i < cantidadSalidas; i = i + 1)
   417                           
   418                           ;incstack = 0
   419                           ; Regs used in _resetearSalidas: [wreg+status,2+status,0]
   420  01B5  1283               	bcf	3,5	;RP0=0, select bank0
   421  01B6  1303               	bcf	3,6	;RP1=0, select bank0
   422  01B7  01B3               	clrf	resetearSalidas@i
   423  01B8  01B4               	clrf	resetearSalidas@i+1
   424  01B9                     l737:	
   425  01B9  0834               	movf	resetearSalidas@i+1,w
   426  01BA  3A80               	xorlw	128
   427  01BB  00B2               	movwf	??_resetearSalidas
   428  01BC  0831               	movf	resetearSalidas@cantidadSalidas+1,w
   429  01BD  3A80               	xorlw	128
   430  01BE  0232               	subwf	??_resetearSalidas,w
   431  01BF  1D03               	skipz
   432  01C0  29C3               	goto	u285
   433  01C1  0830               	movf	resetearSalidas@cantidadSalidas,w
   434  01C2  0233               	subwf	resetearSalidas@i,w
   435  01C3                     u285:	
   436  01C3  1803               	btfsc	3,0
   437  01C4  29D3               	goto	l105
   438                           
   439                           ;main.c: 117: {
   440                           ;main.c: 118: RA0 = 0;
   441  01C5  1283               	bcf	3,5	;RP0=0, select bank0
   442  01C6  1303               	bcf	3,6	;RP1=0, select bank0
   443  01C7  1005               	bcf	5,0	;volatile
   444                           
   445                           ;main.c: 119: RA1 = 1;
   446  01C8  1485               	bsf	5,1	;volatile
   447                           
   448                           ;main.c: 120: RA1 = 0;
   449  01C9  1085               	bcf	5,1	;volatile
   450  01CA  0833               	movf	resetearSalidas@i,w
   451  01CB  3E01               	addlw	1
   452  01CC  00B3               	movwf	resetearSalidas@i
   453  01CD  0834               	movf	resetearSalidas@i+1,w
   454  01CE  1803               	skipnc
   455  01CF  3E01               	addlw	1
   456  01D0  3E00               	addlw	0
   457  01D1  00B4               	movwf	resetearSalidas@i+1
   458  01D2  29B9               	goto	l737
   459  01D3                     l105:	
   460                           
   461                           ;main.c: 121: }
   462                           ;main.c: 122: RA2 = 1;
   463  01D3  1283               	bcf	3,5	;RP0=0, select bank0
   464  01D4  1303               	bcf	3,6	;RP1=0, select bank0
   465  01D5  1505               	bsf	5,2	;volatile
   466                           
   467                           ;main.c: 123: RA2 = 0;
   468  01D6  1105               	bcf	5,2	;volatile
   469  01D7  0008               	return
   470  01D8                     __end_of_resetearSalidas:	
   471                           
   472                           	psect	text2
   473  00C3                     __ptext2:	
   474 ;; *************** function _resetDatos *****************
   475 ;; Defined at:
   476 ;;		line 156 in file "main.c"
   477 ;; Parameters:    Size  Location     Type
   478 ;;		None
   479 ;; Auto vars:     Size  Location     Type
   480 ;;  j               2   21[BANK0 ] int 
   481 ;;  i               2   19[BANK0 ] int 
   482 ;; Return value:  Size  Location     Type
   483 ;;                  1    wreg      void 
   484 ;; Registers used:
   485 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
   486 ;; Tracked objects:
   487 ;;		On entry : 0/0
   488 ;;		On exit  : 0/0
   489 ;;		Unchanged: 0/0
   490 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   491 ;;      Params:         0       0       0       0
   492 ;;      Locals:         0       4       0       0
   493 ;;      Temps:          0       3       0       0
   494 ;;      Totals:         0       7       0       0
   495 ;;Total ram usage:        7 bytes
   496 ;; Hardware stack levels used:    1
   497 ;; Hardware stack levels required when called:    2
   498 ;; This function calls:
   499 ;;		Nothing
   500 ;; This function is called by:
   501 ;;		_main
   502 ;; This function uses a non-reentrant model
   503 ;;
   504                           
   505                           
   506                           ;psect for function _resetDatos
   507  00C3                     _resetDatos:	
   508                           
   509                           ;main.c: 158: for(int i = 0; i < 5; i++)
   510                           
   511                           ;incstack = 0
   512                           ; Regs used in _resetDatos: [wreg-fsr0h+status,2+status,0+btemp+1]
   513  00C3  1283               	bcf	3,5	;RP0=0, select bank0
   514  00C4  1303               	bcf	3,6	;RP1=0, select bank0
   515  00C5  01B3               	clrf	resetDatos@i
   516  00C6  01B4               	clrf	resetDatos@i+1
   517  00C7                     L1:	
   518  00C7  0834               	movf	resetDatos@i+1,w
   519  00C8  3A80               	xorlw	128
   520  00C9  00FF               	movwf	127
   521  00CA  3080               	movlw	128
   522  00CB  027F               	subwf	127,w
   523  00CC  1D03               	skipz
   524  00CD  28D0               	goto	u295
   525  00CE  3005               	movlw	5
   526  00CF  0233               	subwf	resetDatos@i,w
   527  00D0                     u295:	
   528  00D0  1803               	btfsc	3,0
   529  00D1  0008               	return
   530                           
   531                           ;main.c: 159: {
   532                           ;main.c: 160: if(RA4)
   533  00D2  1283               	bcf	3,5	;RP0=0, select bank0
   534  00D3  1303               	bcf	3,6	;RP1=0, select bank0
   535  00D4  1E05               	btfss	5,4	;volatile
   536  00D5  2921               	goto	l765
   537                           
   538                           ;main.c: 161: {
   539                           ;main.c: 162: RA3 = 1;
   540  00D6  1585               	bsf	5,3	;volatile
   541                           
   542                           ;main.c: 163: _delay((unsigned long)((200)*(20000000/4000.0)));
   543  00D7  3006               	movlw	6
   544  00D8  1283               	bcf	3,5	;RP0=0, select bank0
   545  00D9  1303               	bcf	3,6	;RP1=0, select bank0
   546  00DA  00B2               	movwf	??_resetDatos+2
   547  00DB  3013               	movlw	19
   548  00DC  00B1               	movwf	??_resetDatos+1
   549  00DD  30AD               	movlw	173
   550  00DE  00B0               	movwf	??_resetDatos
   551  00DF                     u577:	
   552  00DF  0BB0               	decfsz	??_resetDatos,f
   553  00E0  28DF               	goto	u577
   554  00E1  0BB1               	decfsz	??_resetDatos+1,f
   555  00E2  28DF               	goto	u577
   556  00E3  0BB2               	decfsz	??_resetDatos+2,f
   557  00E4  28DF               	goto	u577
   558  00E5  0000               	nop
   559                           
   560                           ;main.c: 164: RA3 = 0;
   561  00E6  1283               	bcf	3,5	;RP0=0, select bank0
   562  00E7  1303               	bcf	3,6	;RP1=0, select bank0
   563  00E8  1185               	bcf	5,3	;volatile
   564                           
   565                           ;main.c: 165: if(i >= 4)
   566  00E9  0834               	movf	resetDatos@i+1,w
   567  00EA  3A80               	xorlw	128
   568  00EB  00FF               	movwf	127
   569  00EC  3080               	movlw	128
   570  00ED  027F               	subwf	127,w
   571  00EE  1D03               	skipz
   572  00EF  28F2               	goto	u315
   573  00F0  3004               	movlw	4
   574  00F1  0233               	subwf	resetDatos@i,w
   575  00F2                     u315:	
   576  00F2  1C03               	skipc
   577  00F3  2921               	goto	l765
   578                           
   579                           ;main.c: 166: {
   580                           ;main.c: 167: dataLength = 0;
   581  00F4  1283               	bcf	3,5	;RP0=0, select bank0
   582  00F5  1303               	bcf	3,6	;RP1=0, select bank0
   583  00F6  01C4               	clrf	_dataLength
   584  00F7  01C5               	clrf	_dataLength+1
   585                           
   586                           ;main.c: 168: for(int j = 0; j < 4; j++)
   587  00F8  01B5               	clrf	resetDatos@j
   588  00F9  01B6               	clrf	resetDatos@j+1
   589  00FA  0836               	movf	resetDatos@j+1,w
   590  00FB  3A80               	xorlw	128
   591  00FC  00FF               	movwf	127
   592  00FD  3080               	movlw	128
   593  00FE  027F               	subwf	127,w
   594  00FF  1D03               	skipz
   595  0100  2903               	goto	u325
   596  0101  3004               	movlw	4
   597  0102  0235               	subwf	resetDatos@j,w
   598  0103                     u325:	
   599  0103  1803               	btfsc	3,0
   600  0104  2921               	goto	l765
   601  0105                     l759:	
   602                           
   603                           ;main.c: 169: {
   604                           ;main.c: 170: palabras[j] = 0;
   605  0105  1283               	bcf	3,5	;RP0=0, select bank0
   606  0106  1303               	bcf	3,6	;RP1=0, select bank0
   607  0107  0835               	movf	resetDatos@j,w
   608  0108  00B0               	movwf	??_resetDatos
   609  0109  0730               	addwf	??_resetDatos,w
   610  010A  3E3A               	addlw	(low (_palabras| 0))& (0+255)
   611  010B  0084               	movwf	4
   612  010C  1383               	bcf	3,7	;select IRP bank0
   613  010D  0180               	clrf	0
   614  010E  0A84               	incf	4,f
   615  010F  0180               	clrf	0
   616  0110  3001               	movlw	1
   617  0111  07B5               	addwf	resetDatos@j,f
   618  0112  1803               	skipnc
   619  0113  0AB6               	incf	resetDatos@j+1,f
   620  0114  3000               	movlw	0
   621  0115  07B6               	addwf	resetDatos@j+1,f
   622  0116  0836               	movf	resetDatos@j+1,w
   623  0117  3A80               	xorlw	128
   624  0118  00FF               	movwf	127
   625  0119  3080               	movlw	128
   626  011A  027F               	subwf	127,w
   627  011B  1D03               	skipz
   628  011C  291F               	goto	u335
   629  011D  3004               	movlw	4
   630  011E  0235               	subwf	resetDatos@j,w
   631  011F                     u335:	
   632  011F  1C03               	skipc
   633  0120  2905               	goto	l759
   634  0121                     l765:	
   635  0121  3001               	movlw	1
   636  0122  1283               	bcf	3,5	;RP0=0, select bank0
   637  0123  1303               	bcf	3,6	;RP1=0, select bank0
   638  0124  07B3               	addwf	resetDatos@i,f
   639  0125  1803               	skipnc
   640  0126  0AB4               	incf	resetDatos@i+1,f
   641  0127  3000               	movlw	0
   642  0128  07B4               	addwf	resetDatos@i+1,f
   643  0129  28C7               	goto	L1
   644  012A                     __end_of_resetDatos:	
   645                           
   646                           	psect	text3
   647  01D8                     __ptext3:	
   648 ;; *************** function _InitUART *****************
   649 ;; Defined at:
   650 ;;		line 126 in file "main.c"
   651 ;; Parameters:    Size  Location     Type
   652 ;;		None
   653 ;; Auto vars:     Size  Location     Type
   654 ;;		None
   655 ;; Return value:  Size  Location     Type
   656 ;;                  1    wreg      void 
   657 ;; Registers used:
   658 ;;		wreg
   659 ;; Tracked objects:
   660 ;;		On entry : 0/0
   661 ;;		On exit  : 0/0
   662 ;;		Unchanged: 0/0
   663 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   664 ;;      Params:         0       0       0       0
   665 ;;      Locals:         0       0       0       0
   666 ;;      Temps:          0       0       0       0
   667 ;;      Totals:         0       0       0       0
   668 ;;Total ram usage:        0 bytes
   669 ;; Hardware stack levels used:    1
   670 ;; Hardware stack levels required when called:    2
   671 ;; This function calls:
   672 ;;		Nothing
   673 ;; This function is called by:
   674 ;;		_main
   675 ;; This function uses a non-reentrant model
   676 ;;
   677                           
   678                           
   679                           ;psect for function _InitUART
   680  01D8                     _InitUART:	
   681                           
   682                           ;main.c: 128: SPBRG = ((20000000/16)/19200) - 1;
   683                           
   684                           ;incstack = 0
   685                           ; Regs used in _InitUART: [wreg]
   686  01D8  3040               	movlw	64
   687  01D9  1683               	bsf	3,5	;RP0=1, select bank1
   688  01DA  1303               	bcf	3,6	;RP1=0, select bank1
   689  01DB  0099               	movwf	25	;volatile
   690                           
   691                           ;main.c: 129: BRGH = 1;
   692  01DC  1518               	bsf	24,2	;volatile
   693                           
   694                           ;main.c: 130: SYNC = 0;
   695  01DD  1218               	bcf	24,4	;volatile
   696                           
   697                           ;main.c: 131: SPEN = 1;
   698  01DE  1283               	bcf	3,5	;RP0=0, select bank0
   699  01DF  1303               	bcf	3,6	;RP1=0, select bank0
   700  01E0  1798               	bsf	24,7	;volatile
   701                           
   702                           ;main.c: 132: CREN = 1;
   703  01E1  1618               	bsf	24,4	;volatile
   704                           
   705                           ;main.c: 133: SREN = 0;
   706  01E2  1298               	bcf	24,5	;volatile
   707                           
   708                           ;main.c: 134: TXIE = 0;
   709  01E3  1683               	bsf	3,5	;RP0=1, select bank1
   710  01E4  1303               	bcf	3,6	;RP1=0, select bank1
   711  01E5  120C               	bcf	12,4	;volatile
   712                           
   713                           ;main.c: 135: RCIE = 1;
   714  01E6  168C               	bsf	12,5	;volatile
   715                           
   716                           ;main.c: 136: TX9 = 0;
   717  01E7  1318               	bcf	24,6	;volatile
   718                           
   719                           ;main.c: 137: RX9 = 0;
   720  01E8  1283               	bcf	3,5	;RP0=0, select bank0
   721  01E9  1303               	bcf	3,6	;RP1=0, select bank0
   722  01EA  1318               	bcf	24,6	;volatile
   723                           
   724                           ;main.c: 138: TXEN = 0;
   725  01EB  1683               	bsf	3,5	;RP0=1, select bank1
   726  01EC  1303               	bcf	3,6	;RP1=0, select bank1
   727  01ED  1298               	bcf	24,5	;volatile
   728                           
   729                           ;main.c: 139: TXEN = 1;
   730  01EE  1698               	bsf	24,5	;volatile
   731  01EF  0008               	return
   732  01F0                     __end_of_InitUART:	
   733                           
   734                           	psect	text4
   735  002D                     __ptext4:	
   736 ;; *************** function _ISR *****************
   737 ;; Defined at:
   738 ;;		line 65 in file "main.c"
   739 ;; Parameters:    Size  Location     Type
   740 ;;		None
   741 ;; Auto vars:     Size  Location     Type
   742 ;;		None
   743 ;; Return value:  Size  Location     Type
   744 ;;                  1    wreg      void 
   745 ;; Registers used:
   746 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   747 ;; Tracked objects:
   748 ;;		On entry : 0/0
   749 ;;		On exit  : 0/0
   750 ;;		Unchanged: 0/0
   751 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   752 ;;      Params:         0       0       0       0
   753 ;;      Locals:         0       0       0       0
   754 ;;      Temps:          0      16       0       0
   755 ;;      Totals:         0      16       0       0
   756 ;;Total ram usage:       16 bytes
   757 ;; Hardware stack levels used:    1
   758 ;; Hardware stack levels required when called:    1
   759 ;; This function calls:
   760 ;;		_ReceiveByteSerially
   761 ;;		_escribirSalida
   762 ;; This function is called by:
   763 ;;		Interrupt level 1
   764 ;; This function uses a non-reentrant model
   765 ;;
   766                           
   767                           
   768                           ;psect for function _ISR
   769  002D                     _ISR:	
   770                           
   771                           ;main.c: 67: if(RCIF)
   772  002D  1E8C               	btfss	12,5	;volatile
   773  002E  28B6               	goto	i1l93
   774                           
   775                           ;main.c: 68: {
   776                           ;main.c: 69: lectura = ReceiveByteSerially();
   777  002F  21F8               	fcall	_ReceiveByteSerially
   778  0030  1283               	bcf	3,5	;RP0=0, select bank0
   779  0031  1303               	bcf	3,6	;RP1=0, select bank0
   780  0032  00A0               	movwf	??_ISR
   781  0033  01A1               	clrf	??_ISR+1
   782  0034  0820               	movf	??_ISR,w
   783  0035  00FB               	movwf	_lectura
   784  0036  0821               	movf	??_ISR+1,w
   785  0037  00FC               	movwf	_lectura+1
   786                           
   787                           ;main.c: 70: RA3 = !RA3;
   788  0038  3008               	movlw	8
   789  0039  0685               	xorwf	5,f
   790                           
   791                           ;main.c: 71: if (lectura == 0xfe) trama = 0;
   792  003A  30FE               	movlw	254
   793  003B  067B               	xorwf	_lectura,w
   794  003C  047C               	iorwf	_lectura+1,w
   795  003D  1D03               	btfss	3,2
   796  003E  2841               	goto	i1l831
   797  003F  01C2               	clrf	_trama
   798  0040  01C3               	clrf	_trama+1
   799  0041                     i1l831:	
   800                           
   801                           ;main.c: 72: if(trama)
   802  0041  0842               	movf	_trama,w
   803  0042  0443               	iorwf	_trama+1,w
   804  0043  1903               	btfsc	3,2
   805  0044  28AC               	goto	i1l853
   806                           
   807                           ;main.c: 73: {
   808                           ;main.c: 74: if(dataLength > 0)
   809  0045  0844               	movf	_dataLength,w
   810  0046  0445               	iorwf	_dataLength+1,w
   811  0047  1903               	btfsc	3,2
   812  0048  28A6               	goto	i1l851
   813                           
   814                           ;main.c: 75: {
   815                           ;main.c: 76: dataLength--;
   816  0049  3001               	movlw	1
   817  004A  02C4               	subwf	_dataLength,f
   818  004B  3000               	movlw	0
   819  004C  1C03               	skipc
   820  004D  03C5               	decf	_dataLength+1,f
   821  004E  02C5               	subwf	_dataLength+1,f
   822                           
   823                           ;main.c: 77: if(buffer == 0)
   824  004F  0877               	movf	_buffer,w
   825  0050  0478               	iorwf	_buffer+1,w
   826  0051  1D03               	btfss	3,2
   827  0052  2858               	goto	i1l841
   828                           
   829                           ;main.c: 78: {
   830                           ;main.c: 79: buffer = lectura;
   831  0053  087C               	movf	_lectura+1,w
   832  0054  00F8               	movwf	_buffer+1
   833  0055  087B               	movf	_lectura,w
   834  0056  00F7               	movwf	_buffer
   835                           
   836                           ;main.c: 80: }
   837  0057  28AC               	goto	i1l853
   838  0058                     i1l841:	
   839                           
   840                           ;main.c: 81: else
   841                           ;main.c: 82: {
   842                           ;main.c: 83: indice = buffer/16;
   843  0058  0E77               	swapf	_buffer,w
   844  0059  390F               	andlw	15
   845  005A  00F9               	movwf	_indice
   846  005B  0E78               	swapf	_buffer+1,w
   847  005C  39F0               	andlw	240
   848  005D  04F9               	iorwf	_indice,f
   849  005E  0E78               	swapf	_buffer+1,w
   850  005F  390F               	andlw	15
   851  0060  00FA               	movwf	_indice+1
   852                           
   853                           ;main.c: 84: palabras[ indice ] = palabras[ indice ] & (!(((1 * lectura) << (buffer - (i
      +                          ndice * 16)))));
   854  0061  0879               	movf	_indice,w
   855  0062  00A0               	movwf	??_ISR
   856  0063  0720               	addwf	??_ISR,w
   857  0064  3E3A               	addlw	(low (_palabras| 0))& (0+255)
   858  0065  0084               	movwf	4
   859  0066  1383               	bcf	3,7	;select IRP bank0
   860  0067  0800               	movf	0,w
   861  0068  00A1               	movwf	??_ISR+1
   862  0069  0A84               	incf	4,f
   863  006A  0800               	movf	0,w
   864  006B  00A2               	movwf	??_ISR+2
   865  006C  0879               	movf	_indice,w
   866  006D  00A3               	movwf	??_ISR+3
   867  006E  3003               	movlw	3
   868  006F                     u49_25:	
   869  006F  1003               	clrc
   870  0070  0DA3               	rlf	??_ISR+3,f
   871  0071  3EFF               	addlw	-1
   872  0072  1D03               	skipz
   873  0073  286F               	goto	u49_25
   874  0074  1003               	clrc
   875  0075  0D23               	rlf	??_ISR+3,w
   876  0076  3AFF               	xorlw	255
   877  0077  3E01               	addlw	1
   878  0078  0777               	addwf	_buffer,w
   879  0079  00A4               	movwf	??_ISR+4
   880  007A  0AA4               	incf	??_ISR+4,f
   881  007B  087C               	movf	_lectura+1,w
   882  007C  00A6               	movwf	??_ISR+6
   883  007D  087B               	movf	_lectura,w
   884  007E  00A5               	movwf	??_ISR+5
   885  007F  2883               	goto	u50_24
   886  0080                     u50_25:	
   887  0080  1003               	clrc
   888  0081  0DA5               	rlf	??_ISR+5,f
   889  0082  0DA6               	rlf	??_ISR+6,f
   890  0083                     u50_24:	
   891  0083  0BA4               	decfsz	??_ISR+4,f
   892  0084  2880               	goto	u50_25
   893  0085  0825               	movf	??_ISR+5,w
   894  0086  0426               	iorwf	??_ISR+6,w
   895  0087  1D03               	btfss	3,2
   896  0088  288B               	goto	u51_20
   897  0089  3001               	movlw	1
   898  008A  288C               	goto	u52_20
   899  008B                     u51_20:	
   900  008B  3000               	movlw	0
   901  008C                     u52_20:	
   902  008C  00A7               	movwf	??_ISR+7
   903  008D  01A8               	clrf	??_ISR+8
   904  008E  0821               	movf	??_ISR+1,w
   905  008F  0527               	andwf	??_ISR+7,w
   906  0090  00A9               	movwf	??_ISR+9
   907  0091  0822               	movf	??_ISR+2,w
   908  0092  0528               	andwf	??_ISR+8,w
   909  0093  00AA               	movwf	??_ISR+10
   910  0094  0879               	movf	_indice,w
   911  0095  00AB               	movwf	??_ISR+11
   912  0096  072B               	addwf	??_ISR+11,w
   913  0097  3E3A               	addlw	(low (_palabras| 0))& (0+255)
   914  0098  0084               	movwf	4
   915  0099  0829               	movf	??_ISR+9,w
   916  009A  0080               	movwf	0
   917  009B  0A84               	incf	4,f
   918  009C  082A               	movf	??_ISR+10,w
   919  009D  0080               	movwf	0
   920                           
   921                           ;main.c: 85: buffer = 0;
   922  009E  01F7               	clrf	_buffer
   923  009F  01F8               	clrf	_buffer+1
   924                           
   925                           ;main.c: 86: if( dataLength <= 0 ) escribirSalida();
   926  00A0  0844               	movf	_dataLength,w
   927  00A1  0445               	iorwf	_dataLength+1,w
   928  00A2  1D03               	btfss	3,2
   929  00A3  28AC               	goto	i1l853
   930  00A4  212A               	fcall	_escribirSalida
   931                           
   932                           ;main.c: 87: }
   933                           ;main.c: 88: }
   934  00A5  28AC               	goto	i1l853
   935  00A6                     i1l851:	
   936                           
   937                           ;main.c: 89: else
   938                           ;main.c: 90: {
   939                           ;main.c: 91: dataLength = lectura;
   940  00A6  087C               	movf	_lectura+1,w
   941  00A7  1283               	bcf	3,5	;RP0=0, select bank0
   942  00A8  1303               	bcf	3,6	;RP1=0, select bank0
   943  00A9  00C5               	movwf	_dataLength+1
   944  00AA  087B               	movf	_lectura,w
   945  00AB  00C4               	movwf	_dataLength
   946  00AC                     i1l853:	
   947                           
   948                           ;main.c: 92: }
   949                           ;main.c: 93: }
   950                           ;main.c: 94: if (lectura == 0xff) trama = 1;
   951  00AC  0A7B               	incf	_lectura,w
   952  00AD  047C               	iorwf	_lectura+1,w
   953  00AE  1D03               	btfss	3,2
   954  00AF  28B6               	goto	i1l93
   955  00B0  3001               	movlw	1
   956  00B1  1283               	bcf	3,5	;RP0=0, select bank0
   957  00B2  1303               	bcf	3,6	;RP1=0, select bank0
   958  00B3  00C2               	movwf	_trama
   959  00B4  3000               	movlw	0
   960  00B5  00C3               	movwf	_trama+1
   961  00B6                     i1l93:	
   962  00B6  1283               	bcf	3,5	;RP0=0, select bank0
   963  00B7  1303               	bcf	3,6	;RP1=0, select bank0
   964  00B8  082F               	movf	??_ISR+15,w
   965  00B9  00FF               	movwf	127
   966  00BA  082E               	movf	??_ISR+14,w
   967  00BB  008A               	movwf	10
   968  00BC  082D               	movf	??_ISR+13,w
   969  00BD  0084               	movwf	4
   970  00BE  0E2C               	swapf	(??_ISR+12)^0,w
   971  00BF  0083               	movwf	3
   972  00C0  0EFE               	swapf	126,f
   973  00C1  0E7E               	swapf	126,w
   974  00C2  0009               	retfie
   975  00C3                     __end_of_ISR:	
   976                           
   977                           	psect	intentry
   978  0004                     __pintentry:	
   979                           ;incstack = 0
   980                           ; Regs used in _ISR: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   981                           
   982  0004                     interrupt_function:	
   983  007E                     saved_w	set	btemp
   984  0004  00FE               	movwf	btemp
   985  0005  0E03               	swapf	3,w
   986  0006  1283               	bcf	3,5	;RP0=0, select bank0
   987  0007  1303               	bcf	3,6	;RP1=0, select bank0
   988  0008  00AC               	movwf	??_ISR+12
   989  0009  0804               	movf	4,w
   990  000A  00AD               	movwf	??_ISR+13
   991  000B  080A               	movf	10,w
   992  000C  00AE               	movwf	??_ISR+14
   993  000D  087F               	movf	btemp+1,w
   994  000E  00AF               	movwf	??_ISR+15
   995  000F  282D               	ljmp	_ISR
   996                           
   997                           	psect	text5
   998  012A                     __ptext5:	
   999 ;; *************** function _escribirSalida *****************
  1000 ;; Defined at:
  1001 ;;		line 98 in file "main.c"
  1002 ;; Parameters:    Size  Location     Type
  1003 ;;		None
  1004 ;; Auto vars:     Size  Location     Type
  1005 ;;  i               2    5[COMMON] int 
  1006 ;;  k               2    3[COMMON] int 
  1007 ;; Return value:  Size  Location     Type
  1008 ;;                  1    wreg      void 
  1009 ;; Registers used:
  1010 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  1011 ;; Tracked objects:
  1012 ;;		On entry : 0/0
  1013 ;;		On exit  : 0/0
  1014 ;;		Unchanged: 0/0
  1015 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1016 ;;      Params:         0       0       0       0
  1017 ;;      Locals:         4       0       0       0
  1018 ;;      Temps:          3       0       0       0
  1019 ;;      Totals:         7       0       0       0
  1020 ;;Total ram usage:        7 bytes
  1021 ;; Hardware stack levels used:    1
  1022 ;; This function calls:
  1023 ;;		Nothing
  1024 ;; This function is called by:
  1025 ;;		_ISR
  1026 ;; This function uses a non-reentrant model
  1027 ;;
  1028                           
  1029                           
  1030                           ;psect for function _escribirSalida
  1031  012A                     _escribirSalida:	
  1032                           
  1033                           ;main.c: 100: for(int k = 0; k < 4; k++)
  1034                           
  1035                           ;incstack = 0
  1036                           ; Regs used in _escribirSalida: [wreg-fsr0h+status,2+status,0+btemp+1]
  1037  012A  01F3               	clrf	escribirSalida@k
  1038  012B  01F4               	clrf	escribirSalida@k+1
  1039  012C  0874               	movf	escribirSalida@k+1,w
  1040  012D  3A80               	xorlw	128
  1041  012E  00FF               	movwf	127
  1042  012F  3080               	movlw	128
  1043  0130  027F               	subwf	127,w
  1044  0131  1D03               	skipz
  1045  0132  2935               	goto	u36_25
  1046  0133  3004               	movlw	4
  1047  0134  0273               	subwf	escribirSalida@k,w
  1048  0135                     u36_25:	
  1049  0135  1803               	btfsc	3,0
  1050  0136  2987               	goto	i1l97
  1051  0137                     i1l783:	
  1052                           
  1053                           ;main.c: 101: {
  1054                           ;main.c: 102: for(int i = 0; i < 16; i++)
  1055  0137  01F5               	clrf	escribirSalida@i
  1056  0138  01F6               	clrf	escribirSalida@i+1
  1057  0139  0876               	movf	escribirSalida@i+1,w
  1058  013A  3A80               	xorlw	128
  1059  013B  00FF               	movwf	127
  1060  013C  3080               	movlw	128
  1061  013D  027F               	subwf	127,w
  1062  013E  1D03               	skipz
  1063  013F  2942               	goto	u37_25
  1064  0140  3010               	movlw	16
  1065  0141  0275               	subwf	escribirSalida@i,w
  1066  0142                     u37_25:	
  1067  0142  1803               	btfsc	3,0
  1068  0143  2976               	goto	i1l799
  1069  0144                     i1l789:	
  1070                           
  1071                           ;main.c: 103: {
  1072                           ;main.c: 104: RA0 = !((palabras[k] >> (16 - i)) & 1);
  1073  0144  0873               	movf	escribirSalida@k,w
  1074  0145  00F0               	movwf	??_escribirSalida
  1075  0146  0770               	addwf	??_escribirSalida,w
  1076  0147  3E3A               	addlw	(low (_palabras| 0))& (0+255)
  1077  0148  0084               	movwf	4
  1078  0149  1383               	bcf	3,7	;select IRP bank0
  1079  014A  0800               	movf	0,w
  1080  014B  00F1               	movwf	??_escribirSalida+1
  1081  014C  0A84               	incf	4,f
  1082  014D  0800               	movf	0,w
  1083  014E  00F2               	movwf	??_escribirSalida+2
  1084  014F  0375               	decf	escribirSalida@i,w
  1085  0150  3AFF               	xorlw	255
  1086  0151  3E10               	addlw	16
  1087  0152  3E01               	addlw	1
  1088  0153  2957               	goto	u38_24
  1089  0154                     u38_25:	
  1090  0154  1003               	clrc
  1091  0155  0CF2               	rrf	??_escribirSalida+2,f
  1092  0156  0CF1               	rrf	??_escribirSalida+1,f
  1093  0157                     u38_24:	
  1094  0157  3EFF               	addlw	-1
  1095  0158  1D03               	skipz
  1096  0159  2954               	goto	u38_25
  1097  015A  1871               	btfsc	??_escribirSalida+1,0
  1098  015B  2960               	goto	u39_20
  1099  015C  1283               	bcf	3,5	;RP0=0, select bank0
  1100  015D  1303               	bcf	3,6	;RP1=0, select bank0
  1101  015E  1405               	bsf	5,0	;volatile
  1102  015F  2963               	goto	i1l791
  1103  0160                     u39_20:	
  1104  0160  1283               	bcf	3,5	;RP0=0, select bank0
  1105  0161  1303               	bcf	3,6	;RP1=0, select bank0
  1106  0162  1005               	bcf	5,0	;volatile
  1107  0163                     i1l791:	
  1108                           
  1109                           ;main.c: 105: RA1 = 1;
  1110  0163  1485               	bsf	5,1	;volatile
  1111                           
  1112                           ;main.c: 106: RA1 = 0;
  1113  0164  1085               	bcf	5,1	;volatile
  1114  0165  3001               	movlw	1
  1115  0166  07F5               	addwf	escribirSalida@i,f
  1116  0167  1803               	skipnc
  1117  0168  0AF6               	incf	escribirSalida@i+1,f
  1118  0169  3000               	movlw	0
  1119  016A  07F6               	addwf	escribirSalida@i+1,f
  1120  016B  0876               	movf	escribirSalida@i+1,w
  1121  016C  3A80               	xorlw	128
  1122  016D  00FF               	movwf	127
  1123  016E  3080               	movlw	128
  1124  016F  027F               	subwf	127,w
  1125  0170  1D03               	skipz
  1126  0171  2974               	goto	u41_25
  1127  0172  3010               	movlw	16
  1128  0173  0275               	subwf	escribirSalida@i,w
  1129  0174                     u41_25:	
  1130  0174  1C03               	skipc
  1131  0175  2944               	goto	i1l789
  1132  0176                     i1l799:	
  1133  0176  3001               	movlw	1
  1134  0177  07F3               	addwf	escribirSalida@k,f
  1135  0178  1803               	skipnc
  1136  0179  0AF4               	incf	escribirSalida@k+1,f
  1137  017A  3000               	movlw	0
  1138  017B  07F4               	addwf	escribirSalida@k+1,f
  1139  017C  0874               	movf	escribirSalida@k+1,w
  1140  017D  3A80               	xorlw	128
  1141  017E  00FF               	movwf	127
  1142  017F  3080               	movlw	128
  1143  0180  027F               	subwf	127,w
  1144  0181  1D03               	skipz
  1145  0182  2985               	goto	u42_25
  1146  0183  3004               	movlw	4
  1147  0184  0273               	subwf	escribirSalida@k,w
  1148  0185                     u42_25:	
  1149  0185  1C03               	skipc
  1150  0186  2937               	goto	i1l783
  1151  0187                     i1l97:	
  1152                           
  1153                           ;main.c: 107: }
  1154                           ;main.c: 108: }
  1155                           ;main.c: 110: RA2 = 1;
  1156  0187  1283               	bcf	3,5	;RP0=0, select bank0
  1157  0188  1303               	bcf	3,6	;RP1=0, select bank0
  1158  0189  1505               	bsf	5,2	;volatile
  1159                           
  1160                           ;main.c: 111: RA2 = 0;
  1161  018A  1105               	bcf	5,2	;volatile
  1162  018B  0008               	return
  1163  018C                     __end_of_escribirSalida:	
  1164                           
  1165                           	psect	text6
  1166  01F8                     __ptext6:	
  1167 ;; *************** function _ReceiveByteSerially *****************
  1168 ;; Defined at:
  1169 ;;		line 142 in file "main.c"
  1170 ;; Parameters:    Size  Location     Type
  1171 ;;		None
  1172 ;; Auto vars:     Size  Location     Type
  1173 ;;		None
  1174 ;; Return value:  Size  Location     Type
  1175 ;;                  1    wreg      unsigned char 
  1176 ;; Registers used:
  1177 ;;		wreg
  1178 ;; Tracked objects:
  1179 ;;		On entry : 0/0
  1180 ;;		On exit  : 0/0
  1181 ;;		Unchanged: 0/0
  1182 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1183 ;;      Params:         0       0       0       0
  1184 ;;      Locals:         0       0       0       0
  1185 ;;      Temps:          0       0       0       0
  1186 ;;      Totals:         0       0       0       0
  1187 ;;Total ram usage:        0 bytes
  1188 ;; Hardware stack levels used:    1
  1189 ;; This function calls:
  1190 ;;		Nothing
  1191 ;; This function is called by:
  1192 ;;		_ISR
  1193 ;; This function uses a non-reentrant model
  1194 ;;
  1195                           
  1196                           
  1197                           ;psect for function _ReceiveByteSerially
  1198  01F8                     _ReceiveByteSerially:	
  1199                           
  1200                           ;main.c: 144: if(OERR)
  1201                           
  1202                           ;incstack = 0
  1203                           ; Regs used in _ReceiveByteSerially: [wreg]
  1204  01F8  1283               	bcf	3,5	;RP0=0, select bank0
  1205  01F9  1303               	bcf	3,6	;RP1=0, select bank0
  1206  01FA  1C98               	btfss	24,1	;volatile
  1207  01FB  29FE               	goto	i1l773
  1208                           
  1209                           ;main.c: 145: {
  1210                           ;main.c: 146: CREN = 0;
  1211  01FC  1218               	bcf	24,4	;volatile
  1212                           
  1213                           ;main.c: 147: CREN = 1;
  1214  01FD  1618               	bsf	24,4	;volatile
  1215  01FE                     i1l773:	
  1216                           
  1217                           ;main.c: 148: }
  1218                           ;main.c: 149: return RCREG;
  1219  01FE  081A               	movf	26,w	;volatile
  1220  01FF  0008               	return
  1221  0200                     __end_of_ReceiveByteSerially:	
  1222  007E                     btemp	set	126	;btemp
  1223  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        8
    BSS         10
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7      13
    BANK0            80     26      38
    BANK1            80      0       0
    BANK2            48      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_escribirSalida

Critical Paths under _main in BANK0

    _main->_resetDatos

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0     257
                                             23 BANK0      3     3      0
                           _InitUART
                         _resetDatos
                    _resetearSalidas
 ---------------------------------------------------------------------------------
 (1) _resetearSalidas                                      5     3      2     121
                                             16 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (1) _resetDatos                                           7     7      0     136
                                             16 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (1) _InitUART                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _ISR                                                 16    16      0     136
                                              0 BANK0     16    16      0
                _ReceiveByteSerially
                     _escribirSalida
 ---------------------------------------------------------------------------------
 (3) _escribirSalida                                       7     7      0     136
                                              0 COMMON     7     7      0
 ---------------------------------------------------------------------------------
 (3) _ReceiveByteSerially                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _InitUART
   _resetDatos
   _resetearSalidas

 _ISR (ROOT)
   _ReceiveByteSerially
   _escribirSalida

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               30      0       0       9        0.0%
BITBANK2            30      0       0       8        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     1A      26       3       47.5%
BITBANK0            50      0       0       5        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      7       D       1       92.9%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      33      10        0.0%
ABS                  0      0      33       4        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA              80      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Mon Nov 20 03:25:58 2017

                   __CFG_CP$OFF 0000                             l105 01D3         __size_of_escribirSalida 0062  
                           l737 01B9                             l765 0121                             l759 0105  
                           l893 01A1                             _GIE 005F                             _RA0 0028  
                           _RA1 0029                             _RA2 002A                             _RA3 002B  
                           _RA4 002C                             u315 00F2                             u325 0103  
                           u335 011F                    __CFG_CPD$OFF 0000                             _ISR 002D  
                           u285 01C3                             u295 00D0                             u567 01AE  
                           u577 00DF                             _RX9 00C6                             _TX9 04C6  
                           fsr0 0004                             indf 0000                    __CFG_FOSC$HS 0000  
                  __CFG_LVP$OFF 0000                            ?_ISR 0070                            _BRGH 04C2  
                          _CREN 00C4                            _PEIE 005E                            _RCIE 0465  
                          _RCIF 0065                            i1l93 00B6                            i1l97 0187  
                          _OERR 00C1                            _SPEN 00C7                            _SREN 00C5  
                          _TXIE 0464                            _TXEN 04C5                            _SYNC 04C4  
                          _main 018C                            btemp 007E                   __CFG_BOREN$ON 0000  
                          start 0010                           ??_ISR 0020                           ?_main 0070  
                 __CFG_WDTE$OFF 0000                           _CMCON 001F                           i1l831 0041  
                         i1l841 0058                           i1l851 00A6                           i1l773 01FE  
                         i1l853 00AC                           i1l791 0163                           i1l783 0137  
                         i1l789 0144                           i1l799 0176                           _RCREG 001A  
                         u41_25 0174                           _SPBRG 0099                           u50_24 0083  
                         u42_25 0185                           u50_25 0080                           u51_20 008B  
                         u52_20 008C                           u36_25 0135                           u37_25 0142  
                         u38_24 0157                           u38_25 0154                           u39_20 0160  
                         _TRISA 0085                           u49_25 006F                           _trama 0042  
                         pclath 000A                           status 0003                           wtemp0 007E  
                __CFG_MCLRE$OFF 0000                 __initialization 0011                ?_resetearSalidas 0030  
                  __end_of_main 01B5                __end_of_InitUART 01F0                          ??_main 0037  
                __CFG_PWRTE$OFF 0000                          _buffer 0077                          _indice 0079  
                _escribirSalida 012A                          saved_w 007E         __end_of__initialization 002B  
   __end_of_ReceiveByteSerially 0200                  __pcstackCOMMON 0070                    __pidataBANK0 01F0  
        __end_of_escribirSalida 018C                      _dataLength 0044                      __pbssBANK0 0042  
                     ?_InitUART 0070                      __pmaintext 018C                      __pintentry 0004  
               ?_escribirSalida 0070                      ??_InitUART 0030                     resetDatos@i 0033  
                   resetDatos@j 0035                         __ptext1 01B5                         __ptext2 00C3  
                       __ptext3 01D8                         __ptext4 002D                         __ptext5 012A  
                       __ptext6 01F8                    __size_of_ISR 0096                         _lectura 007B  
          end_of_initialization 002B                      _resetDatos 00C3        __size_of_resetearSalidas 0023  
           start_initialization 0011                     __end_of_ISR 00C3               __size_of_InitUART 0018  
                   ?_resetDatos 0070                ??_escribirSalida 0070                     __pdataBANK0 003A  
  __size_of_ReceiveByteSerially 0008                     __pbssCOMMON 0077                       ___latbits 0000  
                 __pcstackBANK0 0020               ??_resetearSalidas 0032             __size_of_resetDatos 0067  
              resetearSalidas@i 0033               interrupt_function 0004                        _InitUART 01D8  
           _ReceiveByteSerially 01F8                        _palabras 003A                   __size_of_main 0029  
                  ??_resetDatos 0030            ?_ReceiveByteSerially 0070                 _resetearSalidas 01B5  
            __end_of_resetDatos 012A                        intlevel1 0000           ??_ReceiveByteSerially 0070  
resetearSalidas@cantidadSalidas 0030                 escribirSalida@i 0075                 escribirSalida@k 0073  
       __end_of_resetearSalidas 01D8  
