

Microchip Technology PIC LITE Macro Assembler V1.44 build -154322312 
                                                                                               Wed Nov 29 12:56:58 2017

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	16F628A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	clrtext,global,class=CODE,delta=2
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	maintext,global,class=CODE,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2
    13                           	psect	text3,local,class=CODE,merge=1,delta=2
    14                           	psect	intentry,global,class=CODE,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2
    17                           	dabs	1,0x7E,2
    18  0000                     
    19                           ; Version 1.44
    20                           ; Generated 14/09/2017 GMT
    21                           ; 
    22                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    23                           ; All rights reserved.
    24                           ; 
    25                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    26                           ; 
    27                           ; Redistribution and use in source and binary forms, with or without modification, are
    28                           ; permitted provided that the following conditions are met:
    29                           ; 
    30                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    31                           ;        conditions and the following disclaimer.
    32                           ; 
    33                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    34                           ;        of conditions and the following disclaimer in the documentation and/or other
    35                           ;        materials provided with the distribution.
    36                           ; 
    37                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    38                           ;        software without specific prior written permission.
    39                           ; 
    40                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    41                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    42                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    43                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    44                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    45                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    46                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    47                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    48                           ; 
    49                           ; 
    50                           ; Code-generator required, PIC16F628A Definitions
    51                           ; 
    52                           ; SFR Addresses
    53  0000                     	;# 
    54  0001                     	;# 
    55  0002                     	;# 
    56  0003                     	;# 
    57  0004                     	;# 
    58  0005                     	;# 
    59  0006                     	;# 
    60  000A                     	;# 
    61  000B                     	;# 
    62  000C                     	;# 
    63  000E                     	;# 
    64  000E                     	;# 
    65  000F                     	;# 
    66  0010                     	;# 
    67  0011                     	;# 
    68  0012                     	;# 
    69  0015                     	;# 
    70  0015                     	;# 
    71  0016                     	;# 
    72  0017                     	;# 
    73  0018                     	;# 
    74  0019                     	;# 
    75  001A                     	;# 
    76  001F                     	;# 
    77  0081                     	;# 
    78  0085                     	;# 
    79  0086                     	;# 
    80  008C                     	;# 
    81  008E                     	;# 
    82  0092                     	;# 
    83  0098                     	;# 
    84  0099                     	;# 
    85  009A                     	;# 
    86  009B                     	;# 
    87  009C                     	;# 
    88  009D                     	;# 
    89  009F                     	;# 
    90  001A                     _RCREG	set	26
    91  001F                     _CMCON	set	31
    92  00C1                     _OERR	set	193
    93  00C6                     _RX9	set	198
    94  00C5                     _SREN	set	197
    95  00C4                     _CREN	set	196
    96  00C7                     _SPEN	set	199
    97  002A                     _RA2	set	42
    98  0029                     _RA1	set	41
    99  0028                     _RA0	set	40
   100  0065                     _RCIF	set	101
   101  002C                     _RA4	set	44
   102  005E                     _PEIE	set	94
   103  005F                     _GIE	set	95
   104  002B                     _RA3	set	43
   105  0099                     _SPBRG	set	153
   106  0085                     _TRISA	set	133
   107  04C5                     _TXEN	set	1221
   108  04C6                     _TX9	set	1222
   109  0465                     _RCIE	set	1125
   110  0464                     _TXIE	set	1124
   111  04C4                     _SYNC	set	1220
   112  04C2                     _BRGH	set	1218
   113                           
   114                           ; #config settings
   115  0000                     
   116                           	psect	cinit
   117  0011                     start_initialization:	
   118  0011                     __initialization:	
   119                           
   120                           ; Clear objects allocated to COMMON
   121  0011  3077               	movlw	low __pbssCOMMON
   122  0012  0084               	movwf	4
   123  0013  307D               	movlw	low (__pbssCOMMON+6)
   124  0014  21DF               	fcall	clear_ram0
   125                           
   126                           ; Clear objects allocated to BANK0
   127  0015  1383               	bcf	3,7	;select IRP bank0
   128  0016  3035               	movlw	low __pbssBANK0
   129  0017  0084               	movwf	4
   130  0018  3041               	movlw	low (__pbssBANK0+12)
   131  0019  21DF               	fcall	clear_ram0
   132  001A                     end_of_initialization:	
   133                           ;End of C runtime variable initialization code
   134                           
   135  001A                     __end_of__initialization:	
   136  001A  0183               	clrf	3
   137  001B  28CB               	ljmp	_main	;jump to C main() function
   138                           
   139                           	psect	bssCOMMON
   140  0077                     __pbssCOMMON:	
   141  0077                     _buffer:	
   142  0077                     	ds	2
   143  0079                     _indice:	
   144  0079                     	ds	2
   145  007B                     _lectura:	
   146  007B                     	ds	2
   147                           
   148                           	psect	bssBANK0
   149  0035                     __pbssBANK0:	
   150  0035                     _palabras:	
   151  0035                     	ds	8
   152  003D                     _trama:	
   153  003D                     	ds	2
   154  003F                     _dataLength:	
   155  003F                     	ds	2
   156                           
   157                           	psect	clrtext
   158  01DF                     clear_ram0:	
   159                           ;	Called with FSR containing the base address, and
   160                           ;	W with the last address+1
   161                           
   162  01DF  0064               	clrwdt	;clear the watchdog before getting into this loop
   163  01E0                     clrloop0:	
   164  01E0  0180               	clrf	0	;clear RAM location pointed to by FSR
   165  01E1  0A84               	incf	4,f	;increment pointer
   166  01E2  0604               	xorwf	4,w	;XOR with final address
   167  01E3  1903               	btfsc	3,2	;have we reached the end yet?
   168  01E4  3400               	retlw	0	;all done for this memory range, return
   169  01E5  0604               	xorwf	4,w	;XOR again to restore value
   170  01E6  29E0               	goto	clrloop0	;do the next byte
   171                           
   172                           	psect	cstackCOMMON
   173  0070                     __pcstackCOMMON:	
   174  0070                     ?_InitUART:	
   175  0070                     ?_ReceiveByteSerially:	
   176                           ; 1 bytes @ 0x0
   177                           
   178  0070                     ??_ReceiveByteSerially:	
   179                           ; 1 bytes @ 0x0
   180                           
   181  0070                     ?_escribirSalida:	
   182                           ; 1 bytes @ 0x0
   183                           
   184  0070                     ??_escribirSalida:	
   185                           ; 1 bytes @ 0x0
   186                           
   187  0070                     ?_main:	
   188                           ; 1 bytes @ 0x0
   189                           
   190  0070                     ?_ISR:	
   191                           ; 1 bytes @ 0x0
   192                           
   193                           
   194                           ; 1 bytes @ 0x0
   195  0070                     	ds	3
   196  0073                     escribirSalida@k:	
   197                           
   198                           ; 2 bytes @ 0x3
   199  0073                     	ds	2
   200  0075                     escribirSalida@i:	
   201                           
   202                           ; 2 bytes @ 0x5
   203  0075                     	ds	2
   204                           
   205                           	psect	cstackBANK0
   206  0020                     __pcstackBANK0:	
   207  0020                     ??_ISR:	
   208                           
   209                           ; 1 bytes @ 0x0
   210  0020                     	ds	11
   211  002B                     ??_InitUART:	
   212  002B                     ?_resetearSalidas:	
   213                           ; 1 bytes @ 0xB
   214                           
   215  002B                     resetearSalidas@cantidadSalidas:	
   216                           ; 1 bytes @ 0xB
   217                           
   218                           
   219                           ; 2 bytes @ 0xB
   220  002B                     	ds	2
   221  002D                     ??_resetearSalidas:	
   222                           
   223                           ; 1 bytes @ 0xD
   224  002D                     	ds	1
   225  002E                     resetearSalidas@i:	
   226                           
   227                           ; 2 bytes @ 0xE
   228  002E                     	ds	2
   229  0030                     ??_main:	
   230                           
   231                           ; 1 bytes @ 0x10
   232  0030                     	ds	3
   233  0033                     main@k:	
   234                           
   235                           ; 2 bytes @ 0x13
   236  0033                     	ds	2
   237                           
   238                           	psect	maintext
   239  00CB                     __pmaintext:	
   240 ;;
   241 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   242 ;;
   243 ;; *************** function _main *****************
   244 ;; Defined at:
   245 ;;		line 40 in file "main.c"
   246 ;; Parameters:    Size  Location     Type
   247 ;;		None
   248 ;; Auto vars:     Size  Location     Type
   249 ;;  k               2   19[BANK0 ] int 
   250 ;; Return value:  Size  Location     Type
   251 ;;                  1    wreg      void 
   252 ;; Registers used:
   253 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   254 ;; Tracked objects:
   255 ;;		On entry : B00/0
   256 ;;		On exit  : 0/0
   257 ;;		Unchanged: 0/0
   258 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   259 ;;      Params:         0       0       0       0
   260 ;;      Locals:         0       2       0       0
   261 ;;      Temps:          0       3       0       0
   262 ;;      Totals:         0       5       0       0
   263 ;;Total ram usage:        5 bytes
   264 ;; Hardware stack levels required when called:    3
   265 ;; This function calls:
   266 ;;		_InitUART
   267 ;;		_resetearSalidas
   268 ;; This function is called by:
   269 ;;		Startup code after reset
   270 ;; This function uses a non-reentrant model
   271 ;;
   272                           
   273                           
   274                           ;psect for function _main
   275  00CB                     _main:	
   276                           
   277                           ;main.c: 42: CMCON = 0x07;
   278                           
   279                           ;incstack = 0
   280                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   281  00CB  3007               	movlw	7
   282  00CC  1283               	bcf	3,5	;RP0=0, select bank0
   283  00CD  1303               	bcf	3,6	;RP1=0, select bank0
   284  00CE  009F               	movwf	31	;volatile
   285                           
   286                           ;main.c: 43: TRISA = 0b00010000;
   287  00CF  3010               	movlw	16
   288  00D0  1683               	bsf	3,5	;RP0=1, select bank1
   289  00D1  1303               	bcf	3,6	;RP1=0, select bank1
   290  00D2  0085               	movwf	5	;volatile
   291                           
   292                           ;main.c: 44: RA3 = 0;
   293  00D3  1283               	bcf	3,5	;RP0=0, select bank0
   294  00D4  1303               	bcf	3,6	;RP1=0, select bank0
   295  00D5  1185               	bcf	5,3	;volatile
   296                           
   297                           ;main.c: 46: InitUART();
   298  00D6  21C7               	fcall	_InitUART
   299                           
   300                           ;main.c: 48: GIE = 1;
   301  00D7  178B               	bsf	11,7	;volatile
   302                           
   303                           ;main.c: 49: PEIE = 1;
   304  00D8  170B               	bsf	11,6	;volatile
   305                           
   306                           ;main.c: 51: resetearSalidas(64);
   307  00D9  3040               	movlw	64
   308  00DA  1283               	bcf	3,5	;RP0=0, select bank0
   309  00DB  1303               	bcf	3,6	;RP1=0, select bank0
   310  00DC  00AB               	movwf	resetearSalidas@cantidadSalidas
   311  00DD  3000               	movlw	0
   312  00DE  00AC               	movwf	resetearSalidas@cantidadSalidas+1
   313  00DF  21A4               	fcall	_resetearSalidas
   314  00E0                     l900:	
   315                           ;main.c: 53: while(1)
   316                           
   317                           
   318                           ;main.c: 54: {
   319                           ;main.c: 55: if(RA4)
   320  00E0  1283               	bcf	3,5	;RP0=0, select bank0
   321  00E1  1303               	bcf	3,6	;RP1=0, select bank0
   322  00E2  1E05               	btfss	5,4	;volatile
   323  00E3  28E0               	goto	l900
   324                           
   325                           ;main.c: 56: {
   326                           ;main.c: 57: _delay((unsigned long)((1000)*(20000000/4000.0)));
   327  00E4  301A               	movlw	26
   328  00E5  1283               	bcf	3,5	;RP0=0, select bank0
   329  00E6  1303               	bcf	3,6	;RP1=0, select bank0
   330  00E7  00B2               	movwf	??_main+2
   331  00E8  305E               	movlw	94
   332  00E9  00B1               	movwf	??_main+1
   333  00EA  306E               	movlw	110
   334  00EB  00B0               	movwf	??_main
   335  00EC                     u597:	
   336  00EC  0BB0               	decfsz	??_main,f
   337  00ED  28EC               	goto	u597
   338  00EE  0BB1               	decfsz	??_main+1,f
   339  00EF  28EC               	goto	u597
   340  00F0  0BB2               	decfsz	??_main+2,f
   341  00F1  28EC               	goto	u597
   342                           
   343                           ;main.c: 58: if(!RA4) break;
   344  00F2  1283               	bcf	3,5	;RP0=0, select bank0
   345  00F3  1303               	bcf	3,6	;RP1=0, select bank0
   346  00F4  1E05               	btfss	5,4	;volatile
   347  00F5  2951               	goto	l80
   348                           
   349                           ;main.c: 59: GIE = 0;
   350  00F6  138B               	bcf	11,7	;volatile
   351                           
   352                           ;main.c: 60: GIE = 1;
   353  00F7  178B               	bsf	11,7	;volatile
   354                           
   355                           ;main.c: 61: dataLength = 0;
   356  00F8  01BF               	clrf	_dataLength
   357  00F9  01C0               	clrf	_dataLength+1
   358                           
   359                           ;main.c: 62: for(int k = 0; k < 4; k++)
   360  00FA  01B3               	clrf	main@k
   361  00FB  01B4               	clrf	main@k+1
   362  00FC  0834               	movf	main@k+1,w
   363  00FD  3A80               	xorlw	128
   364  00FE  00FF               	movwf	127
   365  00FF  3080               	movlw	128
   366  0100  027F               	subwf	127,w
   367  0101  1D03               	skipz
   368  0102  2905               	goto	u575
   369  0103  3004               	movlw	4
   370  0104  0233               	subwf	main@k,w
   371  0105                     u575:	
   372  0105  1803               	btfsc	3,0
   373  0106  2936               	goto	l924
   374  0107                     l77:	
   375                           
   376                           ;main.c: 63: {
   377                           ;main.c: 64: RA3 = 1;
   378  0107  1283               	bcf	3,5	;RP0=0, select bank0
   379  0108  1303               	bcf	3,6	;RP1=0, select bank0
   380  0109  1585               	bsf	5,3	;volatile
   381                           
   382                           ;main.c: 65: _delay((unsigned long)((250)*(20000000/4000.0)));
   383  010A  3007               	movlw	7
   384  010B  1283               	bcf	3,5	;RP0=0, select bank0
   385  010C  1303               	bcf	3,6	;RP1=0, select bank0
   386  010D  00B2               	movwf	??_main+2
   387  010E  3058               	movlw	88
   388  010F  00B1               	movwf	??_main+1
   389  0110  3059               	movlw	89
   390  0111  00B0               	movwf	??_main
   391  0112                     u607:	
   392  0112  0BB0               	decfsz	??_main,f
   393  0113  2912               	goto	u607
   394  0114  0BB1               	decfsz	??_main+1,f
   395  0115  2912               	goto	u607
   396  0116  0BB2               	decfsz	??_main+2,f
   397  0117  2912               	goto	u607
   398  0118  0000               	nop
   399                           
   400                           ;main.c: 66: palabras[k] = 0;
   401  0119  1283               	bcf	3,5	;RP0=0, select bank0
   402  011A  1303               	bcf	3,6	;RP1=0, select bank0
   403  011B  0833               	movf	main@k,w
   404  011C  00B0               	movwf	??_main
   405  011D  0730               	addwf	??_main,w
   406  011E  3E35               	addlw	(low (_palabras| 0))& (0+255)
   407  011F  0084               	movwf	4
   408  0120  1383               	bcf	3,7	;select IRP bank0
   409  0121  0180               	clrf	0
   410  0122  0A84               	incf	4,f
   411  0123  0180               	clrf	0
   412                           
   413                           ;main.c: 67: RA3 = 0;
   414  0124  1185               	bcf	5,3	;volatile
   415  0125  3001               	movlw	1
   416  0126  07B3               	addwf	main@k,f
   417  0127  1803               	skipnc
   418  0128  0AB4               	incf	main@k+1,f
   419  0129  3000               	movlw	0
   420  012A  07B4               	addwf	main@k+1,f
   421  012B  0834               	movf	main@k+1,w
   422  012C  3A80               	xorlw	128
   423  012D  00FF               	movwf	127
   424  012E  3080               	movlw	128
   425  012F  027F               	subwf	127,w
   426  0130  1D03               	skipz
   427  0131  2934               	goto	u585
   428  0132  3004               	movlw	4
   429  0133  0233               	subwf	main@k,w
   430  0134                     u585:	
   431  0134  1C03               	skipc
   432  0135  2907               	goto	l77
   433  0136                     l924:	
   434                           
   435                           ;main.c: 68: }
   436                           ;main.c: 69: buffer = 0;
   437  0136  01F7               	clrf	_buffer
   438  0137  01F8               	clrf	_buffer+1
   439                           
   440                           ;main.c: 70: trama = 0;
   441  0138  1283               	bcf	3,5	;RP0=0, select bank0
   442  0139  1303               	bcf	3,6	;RP1=0, select bank0
   443  013A  01BD               	clrf	_trama
   444  013B  01BE               	clrf	_trama+1
   445                           
   446                           ;main.c: 71: resetearSalidas(64);
   447  013C  3040               	movlw	64
   448  013D  00AB               	movwf	resetearSalidas@cantidadSalidas
   449  013E  3000               	movlw	0
   450  013F  00AC               	movwf	resetearSalidas@cantidadSalidas+1
   451  0140  21A4               	fcall	_resetearSalidas
   452                           
   453                           ;main.c: 72: _delay((unsigned long)((4000)*(20000000/4000.0)));
   454  0141  3066               	movlw	102
   455  0142  1283               	bcf	3,5	;RP0=0, select bank0
   456  0143  1303               	bcf	3,6	;RP1=0, select bank0
   457  0144  00B2               	movwf	??_main+2
   458  0145  3076               	movlw	118
   459  0146  00B1               	movwf	??_main+1
   460  0147  30C0               	movlw	192
   461  0148  00B0               	movwf	??_main
   462  0149                     u617:	
   463  0149  0BB0               	decfsz	??_main,f
   464  014A  2949               	goto	u617
   465  014B  0BB1               	decfsz	??_main+1,f
   466  014C  2949               	goto	u617
   467  014D  0BB2               	decfsz	??_main+2,f
   468  014E  2949               	goto	u617
   469  014F  2950               	nop2
   470  0150  28E0               	goto	l900
   471  0151                     l80:	
   472  0151  2810               	ljmp	start
   473  0152                     __end_of_main:	
   474                           
   475                           	psect	text1
   476  01A4                     __ptext1:	
   477 ;; *************** function _resetearSalidas *****************
   478 ;; Defined at:
   479 ;;		line 129 in file "main.c"
   480 ;; Parameters:    Size  Location     Type
   481 ;;  cantidadSali    2   11[BANK0 ] int 
   482 ;; Auto vars:     Size  Location     Type
   483 ;;  i               2   14[BANK0 ] int 
   484 ;; Return value:  Size  Location     Type
   485 ;;                  1    wreg      void 
   486 ;; Registers used:
   487 ;;		wreg, status,2, status,0
   488 ;; Tracked objects:
   489 ;;		On entry : 0/0
   490 ;;		On exit  : 0/0
   491 ;;		Unchanged: 0/0
   492 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   493 ;;      Params:         0       2       0       0
   494 ;;      Locals:         0       2       0       0
   495 ;;      Temps:          0       1       0       0
   496 ;;      Totals:         0       5       0       0
   497 ;;Total ram usage:        5 bytes
   498 ;; Hardware stack levels used:    1
   499 ;; Hardware stack levels required when called:    2
   500 ;; This function calls:
   501 ;;		Nothing
   502 ;; This function is called by:
   503 ;;		_main
   504 ;; This function uses a non-reentrant model
   505 ;;
   506                           
   507                           
   508                           ;psect for function _resetearSalidas
   509  01A4                     _resetearSalidas:	
   510                           
   511                           ;main.c: 131: for(int i = 0; i < cantidadSalidas; i = i + 1)
   512                           
   513                           ;incstack = 0
   514                           ; Regs used in _resetearSalidas: [wreg+status,2+status,0]
   515  01A4  1283               	bcf	3,5	;RP0=0, select bank0
   516  01A5  1303               	bcf	3,6	;RP1=0, select bank0
   517  01A6  01AE               	clrf	resetearSalidas@i
   518  01A7  01AF               	clrf	resetearSalidas@i+1
   519  01A8                     l748:	
   520  01A8  082F               	movf	resetearSalidas@i+1,w
   521  01A9  3A80               	xorlw	128
   522  01AA  00AD               	movwf	??_resetearSalidas
   523  01AB  082C               	movf	resetearSalidas@cantidadSalidas+1,w
   524  01AC  3A80               	xorlw	128
   525  01AD  022D               	subwf	??_resetearSalidas,w
   526  01AE  1D03               	skipz
   527  01AF  29B2               	goto	u285
   528  01B0  082B               	movf	resetearSalidas@cantidadSalidas,w
   529  01B1  022E               	subwf	resetearSalidas@i,w
   530  01B2                     u285:	
   531  01B2  1803               	btfsc	3,0
   532  01B3  29C2               	goto	l108
   533                           
   534                           ;main.c: 132: {
   535                           ;main.c: 133: RA0 = 0;
   536  01B4  1283               	bcf	3,5	;RP0=0, select bank0
   537  01B5  1303               	bcf	3,6	;RP1=0, select bank0
   538  01B6  1005               	bcf	5,0	;volatile
   539                           
   540                           ;main.c: 134: RA1 = 1;
   541  01B7  1485               	bsf	5,1	;volatile
   542                           
   543                           ;main.c: 135: RA1 = 0;
   544  01B8  1085               	bcf	5,1	;volatile
   545  01B9  082E               	movf	resetearSalidas@i,w
   546  01BA  3E01               	addlw	1
   547  01BB  00AE               	movwf	resetearSalidas@i
   548  01BC  082F               	movf	resetearSalidas@i+1,w
   549  01BD  1803               	skipnc
   550  01BE  3E01               	addlw	1
   551  01BF  3E00               	addlw	0
   552  01C0  00AF               	movwf	resetearSalidas@i+1
   553  01C1  29A8               	goto	l748
   554  01C2                     l108:	
   555                           
   556                           ;main.c: 136: }
   557                           ;main.c: 137: RA2 = 1;
   558  01C2  1283               	bcf	3,5	;RP0=0, select bank0
   559  01C3  1303               	bcf	3,6	;RP1=0, select bank0
   560  01C4  1505               	bsf	5,2	;volatile
   561                           
   562                           ;main.c: 138: RA2 = 0;
   563  01C5  1105               	bcf	5,2	;volatile
   564  01C6  0008               	return
   565  01C7                     __end_of_resetearSalidas:	
   566                           
   567                           	psect	text2
   568  01C7                     __ptext2:	
   569 ;; *************** function _InitUART *****************
   570 ;; Defined at:
   571 ;;		line 141 in file "main.c"
   572 ;; Parameters:    Size  Location     Type
   573 ;;		None
   574 ;; Auto vars:     Size  Location     Type
   575 ;;		None
   576 ;; Return value:  Size  Location     Type
   577 ;;                  1    wreg      void 
   578 ;; Registers used:
   579 ;;		wreg
   580 ;; Tracked objects:
   581 ;;		On entry : 0/0
   582 ;;		On exit  : 0/0
   583 ;;		Unchanged: 0/0
   584 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   585 ;;      Params:         0       0       0       0
   586 ;;      Locals:         0       0       0       0
   587 ;;      Temps:          0       0       0       0
   588 ;;      Totals:         0       0       0       0
   589 ;;Total ram usage:        0 bytes
   590 ;; Hardware stack levels used:    1
   591 ;; Hardware stack levels required when called:    2
   592 ;; This function calls:
   593 ;;		Nothing
   594 ;; This function is called by:
   595 ;;		_main
   596 ;; This function uses a non-reentrant model
   597 ;;
   598                           
   599                           
   600                           ;psect for function _InitUART
   601  01C7                     _InitUART:	
   602                           
   603                           ;main.c: 143: SPBRG = ((20000000/16)/19200) - 1;
   604                           
   605                           ;incstack = 0
   606                           ; Regs used in _InitUART: [wreg]
   607  01C7  3040               	movlw	64
   608  01C8  1683               	bsf	3,5	;RP0=1, select bank1
   609  01C9  1303               	bcf	3,6	;RP1=0, select bank1
   610  01CA  0099               	movwf	25	;volatile
   611                           
   612                           ;main.c: 144: BRGH = 1;
   613  01CB  1518               	bsf	24,2	;volatile
   614                           
   615                           ;main.c: 145: SYNC = 0;
   616  01CC  1218               	bcf	24,4	;volatile
   617                           
   618                           ;main.c: 146: SPEN = 1;
   619  01CD  1283               	bcf	3,5	;RP0=0, select bank0
   620  01CE  1303               	bcf	3,6	;RP1=0, select bank0
   621  01CF  1798               	bsf	24,7	;volatile
   622                           
   623                           ;main.c: 147: CREN = 1;
   624  01D0  1618               	bsf	24,4	;volatile
   625                           
   626                           ;main.c: 148: SREN = 0;
   627  01D1  1298               	bcf	24,5	;volatile
   628                           
   629                           ;main.c: 149: TXIE = 0;
   630  01D2  1683               	bsf	3,5	;RP0=1, select bank1
   631  01D3  1303               	bcf	3,6	;RP1=0, select bank1
   632  01D4  120C               	bcf	12,4	;volatile
   633                           
   634                           ;main.c: 150: RCIE = 1;
   635  01D5  168C               	bsf	12,5	;volatile
   636                           
   637                           ;main.c: 151: TX9 = 0;
   638  01D6  1318               	bcf	24,6	;volatile
   639                           
   640                           ;main.c: 152: RX9 = 0;
   641  01D7  1283               	bcf	3,5	;RP0=0, select bank0
   642  01D8  1303               	bcf	3,6	;RP1=0, select bank0
   643  01D9  1318               	bcf	24,6	;volatile
   644                           
   645                           ;main.c: 153: TXEN = 0;
   646  01DA  1683               	bsf	3,5	;RP0=1, select bank1
   647  01DB  1303               	bcf	3,6	;RP1=0, select bank1
   648  01DC  1298               	bcf	24,5	;volatile
   649                           
   650                           ;main.c: 154: TXEN = 1;
   651  01DD  1698               	bsf	24,5	;volatile
   652  01DE  0008               	return
   653  01DF                     __end_of_InitUART:	
   654                           
   655                           	psect	text3
   656  001C                     __ptext3:	
   657 ;; *************** function _ISR *****************
   658 ;; Defined at:
   659 ;;		line 77 in file "main.c"
   660 ;; Parameters:    Size  Location     Type
   661 ;;		None
   662 ;; Auto vars:     Size  Location     Type
   663 ;;		None
   664 ;; Return value:  Size  Location     Type
   665 ;;                  1    wreg      void 
   666 ;; Registers used:
   667 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   668 ;; Tracked objects:
   669 ;;		On entry : 0/0
   670 ;;		On exit  : 0/0
   671 ;;		Unchanged: 0/0
   672 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   673 ;;      Params:         0       0       0       0
   674 ;;      Locals:         0       0       0       0
   675 ;;      Temps:          0      11       0       0
   676 ;;      Totals:         0      11       0       0
   677 ;;Total ram usage:       11 bytes
   678 ;; Hardware stack levels used:    1
   679 ;; Hardware stack levels required when called:    1
   680 ;; This function calls:
   681 ;;		_ReceiveByteSerially
   682 ;;		_escribirSalida
   683 ;; This function is called by:
   684 ;;		Interrupt level 1
   685 ;; This function uses a non-reentrant model
   686 ;;
   687                           
   688                           
   689                           ;psect for function _ISR
   690  001C                     _ISR:	
   691                           
   692                           ;main.c: 79: if(RCIF)
   693  001C  1E8C               	btfss	12,5	;volatile
   694  001D  28BE               	goto	i1l96
   695                           
   696                           ;main.c: 80: {
   697                           ;main.c: 81: lectura = ReceiveByteSerially();
   698  001E  21E7               	fcall	_ReceiveByteSerially
   699  001F  1283               	bcf	3,5	;RP0=0, select bank0
   700  0020  1303               	bcf	3,6	;RP1=0, select bank0
   701  0021  00A0               	movwf	??_ISR
   702  0022  01A1               	clrf	??_ISR+1
   703  0023  0820               	movf	??_ISR,w
   704  0024  00FB               	movwf	_lectura
   705  0025  0821               	movf	??_ISR+1,w
   706  0026  00FC               	movwf	_lectura+1
   707                           
   708                           ;main.c: 82: RA3 = !RA3;
   709  0027  3008               	movlw	8
   710  0028  0685               	xorwf	5,f
   711                           
   712                           ;main.c: 83: if (lectura == 0xfe) trama = 0;
   713  0029  30FE               	movlw	254
   714  002A  067B               	xorwf	_lectura,w
   715  002B  047C               	iorwf	_lectura+1,w
   716  002C  1D03               	btfss	3,2
   717  002D  2830               	goto	i1l836
   718  002E  01BD               	clrf	_trama
   719  002F  01BE               	clrf	_trama+1
   720  0030                     i1l836:	
   721                           
   722                           ;main.c: 84: if(trama)
   723  0030  083D               	movf	_trama,w
   724  0031  043E               	iorwf	_trama+1,w
   725  0032  1903               	btfsc	3,2
   726  0033  28B4               	goto	i1l860
   727                           
   728                           ;main.c: 85: {
   729                           ;main.c: 86: if(dataLength > 0)
   730  0034  083F               	movf	_dataLength,w
   731  0035  0440               	iorwf	_dataLength+1,w
   732  0036  1903               	btfsc	3,2
   733  0037  28AE               	goto	i1l858
   734                           
   735                           ;main.c: 87: {
   736                           ;main.c: 88: dataLength--;
   737  0038  3001               	movlw	1
   738  0039  02BF               	subwf	_dataLength,f
   739  003A  3000               	movlw	0
   740  003B  1C03               	skipc
   741  003C  03C0               	decf	_dataLength+1,f
   742  003D  02C0               	subwf	_dataLength+1,f
   743                           
   744                           ;main.c: 89: if(buffer == 0)
   745  003E  0877               	movf	_buffer,w
   746  003F  0478               	iorwf	_buffer+1,w
   747  0040  1D03               	btfss	3,2
   748  0041  2847               	goto	i1l846
   749                           
   750                           ;main.c: 90: {
   751                           ;main.c: 91: buffer = lectura;
   752  0042  087C               	movf	_lectura+1,w
   753  0043  00F8               	movwf	_buffer+1
   754  0044  087B               	movf	_lectura,w
   755  0045  00F7               	movwf	_buffer
   756                           
   757                           ;main.c: 92: }
   758  0046  28B4               	goto	i1l860
   759  0047                     i1l846:	
   760                           
   761                           ;main.c: 93: else
   762                           ;main.c: 94: {
   763                           ;main.c: 95: indice = buffer/16;
   764  0047  0E77               	swapf	_buffer,w
   765  0048  390F               	andlw	15
   766  0049  00F9               	movwf	_indice
   767  004A  0E78               	swapf	_buffer+1,w
   768  004B  39F0               	andlw	240
   769  004C  04F9               	iorwf	_indice,f
   770  004D  0E78               	swapf	_buffer+1,w
   771  004E  390F               	andlw	15
   772  004F  00FA               	movwf	_indice+1
   773                           
   774                           ;main.c: 96: if(lectura)
   775  0050  087B               	movf	_lectura,w
   776  0051  047C               	iorwf	_lectura+1,w
   777  0052  1903               	btfsc	3,2
   778  0053  2879               	goto	i1l850
   779                           
   780                           ;main.c: 97: palabras[ indice] |= ( 1 << (buffer - (indice * 16)));
   781  0054  0879               	movf	_indice,w
   782  0055  00A0               	movwf	??_ISR
   783  0056  3003               	movlw	3
   784  0057                     u47_25:	
   785  0057  1003               	clrc
   786  0058  0DA0               	rlf	??_ISR,f
   787  0059  3EFF               	addlw	-1
   788  005A  1D03               	skipz
   789  005B  2857               	goto	u47_25
   790  005C  1003               	clrc
   791  005D  0D20               	rlf	??_ISR,w
   792  005E  3AFF               	xorlw	255
   793  005F  3E01               	addlw	1
   794  0060  0777               	addwf	_buffer,w
   795  0061  00A1               	movwf	??_ISR+1
   796  0062  0AA1               	incf	??_ISR+1,f
   797  0063  3001               	movlw	1
   798  0064  00A2               	movwf	??_ISR+2
   799  0065  3000               	movlw	0
   800  0066  00A3               	movwf	??_ISR+3
   801  0067  286B               	goto	u48_24
   802  0068                     u48_25:	
   803  0068  1003               	clrc
   804  0069  0DA2               	rlf	??_ISR+2,f
   805  006A  0DA3               	rlf	??_ISR+3,f
   806  006B                     u48_24:	
   807  006B  0BA1               	decfsz	??_ISR+1,f
   808  006C  2868               	goto	u48_25
   809  006D  0879               	movf	_indice,w
   810  006E  00A4               	movwf	??_ISR+4
   811  006F  0724               	addwf	??_ISR+4,w
   812  0070  3E35               	addlw	(low (_palabras| 0))& (0+255)
   813  0071  0084               	movwf	4
   814  0072  0822               	movf	??_ISR+2,w
   815  0073  1383               	bcf	3,7	;select IRP bank0
   816  0074  0480               	iorwf	0,f
   817  0075  0A84               	incf	4,f
   818  0076  0823               	movf	??_ISR+3,w
   819  0077  0480               	iorwf	0,f
   820  0078  28A6               	goto	i1l852
   821  0079                     i1l850:	
   822                           
   823                           ;main.c: 98: else
   824                           ;main.c: 99: palabras[ indice] &= (!( 1 << (buffer - (indice * 16))));
   825  0079  0879               	movf	_indice,w
   826  007A  00A0               	movwf	??_ISR
   827  007B  3003               	movlw	3
   828  007C                     u49_25:	
   829  007C  1003               	clrc
   830  007D  0DA0               	rlf	??_ISR,f
   831  007E  3EFF               	addlw	-1
   832  007F  1D03               	skipz
   833  0080  287C               	goto	u49_25
   834  0081  1003               	clrc
   835  0082  0D20               	rlf	??_ISR,w
   836  0083  3AFF               	xorlw	255
   837  0084  3E01               	addlw	1
   838  0085  0777               	addwf	_buffer,w
   839  0086  00A1               	movwf	??_ISR+1
   840  0087  0AA1               	incf	??_ISR+1,f
   841  0088  3001               	movlw	1
   842  0089  00A2               	movwf	??_ISR+2
   843  008A  3000               	movlw	0
   844  008B  00A3               	movwf	??_ISR+3
   845  008C  2890               	goto	u50_24
   846  008D                     u50_25:	
   847  008D  1003               	clrc
   848  008E  0DA2               	rlf	??_ISR+2,f
   849  008F  0DA3               	rlf	??_ISR+3,f
   850  0090                     u50_24:	
   851  0090  0BA1               	decfsz	??_ISR+1,f
   852  0091  288D               	goto	u50_25
   853  0092  0822               	movf	??_ISR+2,w
   854  0093  0423               	iorwf	??_ISR+3,w
   855  0094  1D03               	btfss	3,2
   856  0095  2898               	goto	u51_20
   857  0096  3001               	movlw	1
   858  0097  2899               	goto	u52_20
   859  0098                     u51_20:	
   860  0098  3000               	movlw	0
   861  0099                     u52_20:	
   862  0099  00A4               	movwf	??_ISR+4
   863  009A  01A5               	clrf	??_ISR+5
   864  009B  0879               	movf	_indice,w
   865  009C  00A6               	movwf	??_ISR+6
   866  009D  0726               	addwf	??_ISR+6,w
   867  009E  3E35               	addlw	(low (_palabras| 0))& (0+255)
   868  009F  0084               	movwf	4
   869  00A0  0824               	movf	??_ISR+4,w
   870  00A1  1383               	bcf	3,7	;select IRP bank0
   871  00A2  0580               	andwf	0,f
   872  00A3  0A84               	incf	4,f
   873  00A4  0825               	movf	??_ISR+5,w
   874  00A5  0580               	andwf	0,f
   875  00A6                     i1l852:	
   876                           
   877                           ;main.c: 100: buffer = 0;
   878  00A6  01F7               	clrf	_buffer
   879  00A7  01F8               	clrf	_buffer+1
   880                           
   881                           ;main.c: 101: if( dataLength <= 0 ) escribirSalida();
   882  00A8  083F               	movf	_dataLength,w
   883  00A9  0440               	iorwf	_dataLength+1,w
   884  00AA  1D03               	btfss	3,2
   885  00AB  28B4               	goto	i1l860
   886  00AC  2152               	fcall	_escribirSalida
   887                           
   888                           ;main.c: 102: }
   889                           ;main.c: 103: }
   890  00AD  28B4               	goto	i1l860
   891  00AE                     i1l858:	
   892                           
   893                           ;main.c: 104: else
   894                           ;main.c: 105: {
   895                           ;main.c: 106: dataLength = lectura;
   896  00AE  087C               	movf	_lectura+1,w
   897  00AF  1283               	bcf	3,5	;RP0=0, select bank0
   898  00B0  1303               	bcf	3,6	;RP1=0, select bank0
   899  00B1  00C0               	movwf	_dataLength+1
   900  00B2  087B               	movf	_lectura,w
   901  00B3  00BF               	movwf	_dataLength
   902  00B4                     i1l860:	
   903                           
   904                           ;main.c: 107: }
   905                           ;main.c: 108: }
   906                           ;main.c: 109: if (lectura == 0xff) trama = 1;
   907  00B4  0A7B               	incf	_lectura,w
   908  00B5  047C               	iorwf	_lectura+1,w
   909  00B6  1D03               	btfss	3,2
   910  00B7  28BE               	goto	i1l96
   911  00B8  3001               	movlw	1
   912  00B9  1283               	bcf	3,5	;RP0=0, select bank0
   913  00BA  1303               	bcf	3,6	;RP1=0, select bank0
   914  00BB  00BD               	movwf	_trama
   915  00BC  3000               	movlw	0
   916  00BD  00BE               	movwf	_trama+1
   917  00BE                     i1l96:	
   918  00BE  1283               	bcf	3,5	;RP0=0, select bank0
   919  00BF  1303               	bcf	3,6	;RP1=0, select bank0
   920  00C0  082A               	movf	??_ISR+10,w
   921  00C1  00FF               	movwf	127
   922  00C2  0829               	movf	??_ISR+9,w
   923  00C3  008A               	movwf	10
   924  00C4  0828               	movf	??_ISR+8,w
   925  00C5  0084               	movwf	4
   926  00C6  0E27               	swapf	(??_ISR+7)^0,w
   927  00C7  0083               	movwf	3
   928  00C8  0EFE               	swapf	126,f
   929  00C9  0E7E               	swapf	126,w
   930  00CA  0009               	retfie
   931  00CB                     __end_of_ISR:	
   932                           
   933                           	psect	intentry
   934  0004                     __pintentry:	
   935                           ;incstack = 0
   936                           ; Regs used in _ISR: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   937                           
   938  0004                     interrupt_function:	
   939  007E                     saved_w	set	btemp
   940  0004  00FE               	movwf	btemp
   941  0005  0E03               	swapf	3,w
   942  0006  1283               	bcf	3,5	;RP0=0, select bank0
   943  0007  1303               	bcf	3,6	;RP1=0, select bank0
   944  0008  00A7               	movwf	??_ISR+7
   945  0009  0804               	movf	4,w
   946  000A  00A8               	movwf	??_ISR+8
   947  000B  080A               	movf	10,w
   948  000C  00A9               	movwf	??_ISR+9
   949  000D  087F               	movf	btemp+1,w
   950  000E  00AA               	movwf	??_ISR+10
   951  000F  281C               	ljmp	_ISR
   952                           
   953                           	psect	text4
   954  0152                     __ptext4:	
   955 ;; *************** function _escribirSalida *****************
   956 ;; Defined at:
   957 ;;		line 113 in file "main.c"
   958 ;; Parameters:    Size  Location     Type
   959 ;;		None
   960 ;; Auto vars:     Size  Location     Type
   961 ;;  i               2    5[COMMON] int 
   962 ;;  k               2    3[COMMON] int 
   963 ;; Return value:  Size  Location     Type
   964 ;;                  1    wreg      void 
   965 ;; Registers used:
   966 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
   967 ;; Tracked objects:
   968 ;;		On entry : 0/0
   969 ;;		On exit  : 0/0
   970 ;;		Unchanged: 0/0
   971 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   972 ;;      Params:         0       0       0       0
   973 ;;      Locals:         4       0       0       0
   974 ;;      Temps:          3       0       0       0
   975 ;;      Totals:         7       0       0       0
   976 ;;Total ram usage:        7 bytes
   977 ;; Hardware stack levels used:    1
   978 ;; This function calls:
   979 ;;		Nothing
   980 ;; This function is called by:
   981 ;;		_ISR
   982 ;; This function uses a non-reentrant model
   983 ;;
   984                           
   985                           
   986                           ;psect for function _escribirSalida
   987  0152                     _escribirSalida:	
   988                           
   989                           ;main.c: 115: for(int k = 3; k >= 0; k--)
   990                           
   991                           ;incstack = 0
   992                           ; Regs used in _escribirSalida: [wreg-fsr0h+status,2+status,0+btemp+1]
   993  0152  3003               	movlw	3
   994  0153  00F3               	movwf	escribirSalida@k
   995  0154  3000               	movlw	0
   996  0155  00F4               	movwf	escribirSalida@k+1
   997  0156  1BF4               	btfsc	escribirSalida@k+1,7
   998  0157  299F               	goto	i1l100
   999  0158                     i1l764:	
  1000                           
  1001                           ;main.c: 116: {
  1002                           ;main.c: 117: for(int i = 0; i < 16; i++)
  1003  0158  01F5               	clrf	escribirSalida@i
  1004  0159  01F6               	clrf	escribirSalida@i+1
  1005  015A  0876               	movf	escribirSalida@i+1,w
  1006  015B  3A80               	xorlw	128
  1007  015C  00FF               	movwf	127
  1008  015D  3080               	movlw	128
  1009  015E  027F               	subwf	127,w
  1010  015F  1D03               	skipz
  1011  0160  2963               	goto	u31_25
  1012  0161  3010               	movlw	16
  1013  0162  0275               	subwf	escribirSalida@i,w
  1014  0163                     u31_25:	
  1015  0163  1803               	btfsc	3,0
  1016  0164  2997               	goto	i1l780
  1017  0165                     i1l770:	
  1018                           
  1019                           ;main.c: 118: {
  1020                           ;main.c: 119: RA0 = ((palabras[k] >> (15 - i)) & 1);
  1021  0165  0873               	movf	escribirSalida@k,w
  1022  0166  00F0               	movwf	??_escribirSalida
  1023  0167  0770               	addwf	??_escribirSalida,w
  1024  0168  3E35               	addlw	(low (_palabras| 0))& (0+255)
  1025  0169  0084               	movwf	4
  1026  016A  1383               	bcf	3,7	;select IRP bank0
  1027  016B  0800               	movf	0,w
  1028  016C  00F1               	movwf	??_escribirSalida+1
  1029  016D  0A84               	incf	4,f
  1030  016E  0800               	movf	0,w
  1031  016F  00F2               	movwf	??_escribirSalida+2
  1032  0170  0375               	decf	escribirSalida@i,w
  1033  0171  3AFF               	xorlw	255
  1034  0172  3E0F               	addlw	15
  1035  0173  3E01               	addlw	1
  1036  0174  2978               	goto	u32_24
  1037  0175                     u32_25:	
  1038  0175  1003               	clrc
  1039  0176  0CF2               	rrf	??_escribirSalida+2,f
  1040  0177  0CF1               	rrf	??_escribirSalida+1,f
  1041  0178                     u32_24:	
  1042  0178  3EFF               	addlw	-1
  1043  0179  1D03               	skipz
  1044  017A  2975               	goto	u32_25
  1045  017B  1C71               	btfss	??_escribirSalida+1,0
  1046  017C  2981               	goto	u33_20
  1047  017D  1283               	bcf	3,5	;RP0=0, select bank0
  1048  017E  1303               	bcf	3,6	;RP1=0, select bank0
  1049  017F  1405               	bsf	5,0	;volatile
  1050  0180  2984               	goto	i1l772
  1051  0181                     u33_20:	
  1052  0181  1283               	bcf	3,5	;RP0=0, select bank0
  1053  0182  1303               	bcf	3,6	;RP1=0, select bank0
  1054  0183  1005               	bcf	5,0	;volatile
  1055  0184                     i1l772:	
  1056                           
  1057                           ;main.c: 120: RA1 = 1;
  1058  0184  1485               	bsf	5,1	;volatile
  1059                           
  1060                           ;main.c: 121: RA1 = 0;
  1061  0185  1085               	bcf	5,1	;volatile
  1062  0186  3001               	movlw	1
  1063  0187  07F5               	addwf	escribirSalida@i,f
  1064  0188  1803               	skipnc
  1065  0189  0AF6               	incf	escribirSalida@i+1,f
  1066  018A  3000               	movlw	0
  1067  018B  07F6               	addwf	escribirSalida@i+1,f
  1068  018C  0876               	movf	escribirSalida@i+1,w
  1069  018D  3A80               	xorlw	128
  1070  018E  00FF               	movwf	127
  1071  018F  3080               	movlw	128
  1072  0190  027F               	subwf	127,w
  1073  0191  1D03               	skipz
  1074  0192  2995               	goto	u35_25
  1075  0193  3010               	movlw	16
  1076  0194  0275               	subwf	escribirSalida@i,w
  1077  0195                     u35_25:	
  1078  0195  1C03               	skipc
  1079  0196  2965               	goto	i1l770
  1080  0197                     i1l780:	
  1081  0197  30FF               	movlw	255
  1082  0198  07F3               	addwf	escribirSalida@k,f
  1083  0199  1803               	skipnc
  1084  019A  0AF4               	incf	escribirSalida@k+1,f
  1085  019B  30FF               	movlw	255
  1086  019C  07F4               	addwf	escribirSalida@k+1,f
  1087  019D  1FF4               	btfss	escribirSalida@k+1,7
  1088  019E  2958               	goto	i1l764
  1089  019F                     i1l100:	
  1090                           
  1091                           ;main.c: 122: }
  1092                           ;main.c: 123: }
  1093                           ;main.c: 125: RA2 = 1;
  1094  019F  1283               	bcf	3,5	;RP0=0, select bank0
  1095  01A0  1303               	bcf	3,6	;RP1=0, select bank0
  1096  01A1  1505               	bsf	5,2	;volatile
  1097                           
  1098                           ;main.c: 126: RA2 = 0;
  1099  01A2  1105               	bcf	5,2	;volatile
  1100  01A3  0008               	return
  1101  01A4                     __end_of_escribirSalida:	
  1102                           
  1103                           	psect	text5
  1104  01E7                     __ptext5:	
  1105 ;; *************** function _ReceiveByteSerially *****************
  1106 ;; Defined at:
  1107 ;;		line 157 in file "main.c"
  1108 ;; Parameters:    Size  Location     Type
  1109 ;;		None
  1110 ;; Auto vars:     Size  Location     Type
  1111 ;;		None
  1112 ;; Return value:  Size  Location     Type
  1113 ;;                  1    wreg      unsigned char 
  1114 ;; Registers used:
  1115 ;;		wreg
  1116 ;; Tracked objects:
  1117 ;;		On entry : 0/0
  1118 ;;		On exit  : 0/0
  1119 ;;		Unchanged: 0/0
  1120 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1121 ;;      Params:         0       0       0       0
  1122 ;;      Locals:         0       0       0       0
  1123 ;;      Temps:          0       0       0       0
  1124 ;;      Totals:         0       0       0       0
  1125 ;;Total ram usage:        0 bytes
  1126 ;; Hardware stack levels used:    1
  1127 ;; This function calls:
  1128 ;;		Nothing
  1129 ;; This function is called by:
  1130 ;;		_ISR
  1131 ;; This function uses a non-reentrant model
  1132 ;;
  1133                           
  1134                           
  1135                           ;psect for function _ReceiveByteSerially
  1136  01E7                     _ReceiveByteSerially:	
  1137                           
  1138                           ;main.c: 159: if(OERR)
  1139                           
  1140                           ;incstack = 0
  1141                           ; Regs used in _ReceiveByteSerially: [wreg]
  1142  01E7  1283               	bcf	3,5	;RP0=0, select bank0
  1143  01E8  1303               	bcf	3,6	;RP1=0, select bank0
  1144  01E9  1C98               	btfss	24,1	;volatile
  1145  01EA  29ED               	goto	i1l754
  1146                           
  1147                           ;main.c: 160: {
  1148                           ;main.c: 161: CREN = 0;
  1149  01EB  1218               	bcf	24,4	;volatile
  1150                           
  1151                           ;main.c: 162: CREN = 1;
  1152  01EC  1618               	bsf	24,4	;volatile
  1153  01ED                     i1l754:	
  1154                           
  1155                           ;main.c: 163: }
  1156                           ;main.c: 164: return RCREG;
  1157  01ED  081A               	movf	26,w	;volatile
  1158  01EE  0008               	return
  1159  01EF                     __end_of_ReceiveByteSerially:	
  1160  007E                     btemp	set	126	;btemp
  1161  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         18
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7      13
    BANK0            80     21      33
    BANK1            80      0       0
    BANK2            48      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_escribirSalida

Critical Paths under _main in BANK0

    _main->_resetearSalidas

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0     273
                                             16 BANK0      5     5      0
                           _InitUART
                    _resetearSalidas
 ---------------------------------------------------------------------------------
 (1) _resetearSalidas                                      5     3      2     174
                                             11 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (1) _InitUART                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _ISR                                                 11    11      0     136
                                              0 BANK0     11    11      0
                _ReceiveByteSerially
                     _escribirSalida
 ---------------------------------------------------------------------------------
 (3) _escribirSalida                                       7     7      0     136
                                              0 COMMON     7     7      0
 ---------------------------------------------------------------------------------
 (3) _ReceiveByteSerially                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _InitUART
   _resetearSalidas

 _ISR (ROOT)
   _ReceiveByteSerially
   _escribirSalida

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA              80      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      7       D       1       92.9%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BANK0               50     15      21       3       41.3%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      2E       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK2            30      0       0       8        0.0%
BANK2               30      0       0       9        0.0%
DATA                 0      0      2E      10        0.0%


Microchip Technology PIC Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Wed Nov 29 12:56:58 2017

                   __CFG_CP$OFF 0000                              l80 0151                              l77 0107  
                            fsr 0004         __size_of_escribirSalida 0052                             l108 01C2  
                           l900 00E0                             l748 01A8                             l924 0136  
                           _GIE 005F                             _RA0 0028                             _RA1 0029  
                           _RA2 002A                             _RA3 002B                             _RA4 002C  
                  __CFG_CPD$OFF 0000                             _ISR 001C                             u285 01B2  
                           u607 0112                             u617 0149                             u575 0105  
                           u585 0134                             u597 00EC                             _RX9 00C6  
                           _TX9 04C6                             fsr0 0004                             indf 0000  
                  __CFG_FOSC$HS 0000                    __CFG_LVP$OFF 0000                            ?_ISR 0070  
                          _BRGH 04C2                            _CREN 00C4                            _PEIE 005E  
                          _RCIE 0465                            _RCIF 0065                            i1l96 00BE  
                          _OERR 00C1                            _SPEN 00C7                            _SREN 00C5  
                          _TXIE 0464                            _TXEN 04C5                            _SYNC 04C4  
                          _main 00CB                            btemp 007E                   __CFG_BOREN$ON 0000  
                          start 0010                           ??_ISR 0020                           ?_main 0070  
                 __CFG_WDTE$OFF 0000                           _CMCON 001F                           i1l100 019F  
                         i1l754 01ED                           i1l770 0165                           i1l850 0079  
                         i1l772 0184                           i1l780 0197                           i1l764 0158  
                         i1l852 00A6                           i1l860 00B4                           i1l836 0030  
                         i1l846 0047                           i1l858 00AE                           _RCREG 001A  
                         u31_25 0163                           u32_24 0178                           u32_25 0175  
                         u33_20 0181                           _SPBRG 0099                           u50_24 0090  
                         u50_25 008D                           u51_20 0098                           u35_25 0195  
                         u52_20 0099                           u47_25 0057                           u48_24 006B  
                         u48_25 0068                           _TRISA 0085                           u49_25 007C  
                         _trama 003D                           main@k 0033                           pclath 000A  
                         status 0003                           wtemp0 007E                  __CFG_MCLRE$OFF 0000  
               __initialization 0011                ?_resetearSalidas 002B                    __end_of_main 0152  
              __end_of_InitUART 01DF                          ??_main 0030                  __CFG_PWRTE$OFF 0000  
                        _buffer 0077                          _indice 0079                  _escribirSalida 0152  
                        saved_w 007E         __end_of__initialization 001A     __end_of_ReceiveByteSerially 01EF  
                __pcstackCOMMON 0070          __end_of_escribirSalida 01A4                      _dataLength 003F  
                    __pbssBANK0 0035                       ?_InitUART 0070                      __pmaintext 00CB  
                    __pintentry 0004                 ?_escribirSalida 0070                      ??_InitUART 002B  
                       __ptext1 01A4                         __ptext2 01C7                         __ptext3 001C  
                       __ptext4 0152                         __ptext5 01E7                    __size_of_ISR 00AF  
                       _lectura 007B                         clrloop0 01E0            end_of_initialization 001A  
      __size_of_resetearSalidas 0023             start_initialization 0011                     __end_of_ISR 00CB  
             __size_of_InitUART 0018                ??_escribirSalida 0070    __size_of_ReceiveByteSerially 0008  
                   __pbssCOMMON 0077                       ___latbits 0000                   __pcstackBANK0 0020  
             ??_resetearSalidas 002D                resetearSalidas@i 002E               interrupt_function 0004  
                     clear_ram0 01DF                        _InitUART 01C7             _ReceiveByteSerially 01E7  
                      _palabras 0035                   __size_of_main 0087            ?_ReceiveByteSerially 0070  
               _resetearSalidas 01A4                        intlevel1 0000           ??_ReceiveByteSerially 0070  
resetearSalidas@cantidadSalidas 002B                 escribirSalida@i 0075                 escribirSalida@k 0073  
       __end_of_resetearSalidas 01C7  
