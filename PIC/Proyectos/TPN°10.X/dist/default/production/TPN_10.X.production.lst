

Microchip Technology PIC LITE Macro Assembler V1.42 build -159332390 
                                                                                               Wed Sep 13 15:03:15 2017

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	16F628A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	maintext,global,class=CODE,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2
    13                           	psect	text3,local,class=CODE,merge=1,delta=2
    14                           	psect	text4,local,class=CODE,merge=1,delta=2
    15                           	psect	text5,local,class=CODE,merge=1,delta=2,group=2
    16                           	psect	text6,local,class=CODE,merge=1,delta=2,group=2
    17                           	dabs	1,0x7E,2
    18  0000                     
    19                           ; Version 1.42
    20                           ; Generated 13/04/2017 GMT
    21                           ; 
    22                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    23                           ; All rights reserved.
    24                           ; 
    25                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    26                           ; 
    27                           ; Redistribution and use in source and binary forms, with or without modification, are
    28                           ; permitted provided that the following conditions are met:
    29                           ; 
    30                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    31                           ;        conditions and the following disclaimer.
    32                           ; 
    33                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    34                           ;        of conditions and the following disclaimer in the documentation and/or other
    35                           ;        materials provided with the distribution.
    36                           ; 
    37                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    38                           ;        software without specific prior written permission.
    39                           ; 
    40                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    41                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    42                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    43                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    44                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    45                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    46                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    47                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    48                           ; 
    49                           ; 
    50                           ; Code-generator required, PIC16F628A Definitions
    51                           ; 
    52                           ; SFR Addresses
    53  0000                     	;# 
    54  0001                     	;# 
    55  0002                     	;# 
    56  0003                     	;# 
    57  0004                     	;# 
    58  0005                     	;# 
    59  0006                     	;# 
    60  000A                     	;# 
    61  000B                     	;# 
    62  000C                     	;# 
    63  000E                     	;# 
    64  000E                     	;# 
    65  000F                     	;# 
    66  0010                     	;# 
    67  0011                     	;# 
    68  0012                     	;# 
    69  0015                     	;# 
    70  0015                     	;# 
    71  0016                     	;# 
    72  0017                     	;# 
    73  0018                     	;# 
    74  0019                     	;# 
    75  001A                     	;# 
    76  001F                     	;# 
    77  0081                     	;# 
    78  0085                     	;# 
    79  0086                     	;# 
    80  008C                     	;# 
    81  008E                     	;# 
    82  0092                     	;# 
    83  0098                     	;# 
    84  0099                     	;# 
    85  009A                     	;# 
    86  009B                     	;# 
    87  009C                     	;# 
    88  009D                     	;# 
    89  009F                     	;# 
    90                           
    91                           	psect	idataBANK1
    92  0505                     __pidataBANK1:	
    93                           
    94                           ;initializer for _codificacion
    95  0505  34D4               	retlw	212
    96  0506  3409               	retlw	9
    97  0507  3438               	retlw	56
    98  0508  349C               	retlw	156
    99  0509  340A               	retlw	10
   100  050A  345E               	retlw	94
   101  050B  342C               	retlw	44
   102  050C  345A               	retlw	90
   103  050D  34F8               	retlw	248
   104  050E  3474               	retlw	116
   105  050F  34CC               	retlw	204
   106  0510  3415               	retlw	21
   107  0511  34B4               	retlw	180
   108  0512  3419               	retlw	25
   109  0513  3448               	retlw	72
   110  0514  34C3               	retlw	195
   111  0515  3454               	retlw	84
   112  0516  34A0               	retlw	160
   113  0517  3408               	retlw	8
   114  0518  349C               	retlw	156
   115  001F                     _CMCON	set	31
   116  0030                     _RB0	set	48
   117  0033                     _RB3	set	51
   118  0031                     _RB1	set	49
   119  0032                     _RB2	set	50
   120  0085                     _TRISA	set	133
   121  0086                     _TRISB	set	134
   122                           
   123                           ; #config settings
   124  0000                     
   125                           	psect	cinit
   126  07D0                     start_initialization:	
   127  07D0                     __initialization:	
   128                           
   129                           ; Initialize objects allocated to BANK1
   130  07D0  1683               	bsf	3,5	;RP0=1, select bank1
   131  07D1  1303               	bcf	3,6	;RP1=0, select bank1
   132  07D2  2505               	fcall	__pidataBANK1	;fetch initializer
   133  07D3  00A0               	movwf	__pdataBANK1& (0+127)
   134  07D4  2506               	fcall	__pidataBANK1+1	;fetch initializer
   135  07D5  00A1               	movwf	(__pdataBANK1+1)& (0+127)
   136  07D6  2507               	fcall	__pidataBANK1+2	;fetch initializer
   137  07D7  00A2               	movwf	(__pdataBANK1+2)& (0+127)
   138  07D8  2508               	fcall	__pidataBANK1+3	;fetch initializer
   139  07D9  00A3               	movwf	(__pdataBANK1+3)& (0+127)
   140  07DA  2509               	fcall	__pidataBANK1+4	;fetch initializer
   141  07DB  00A4               	movwf	(__pdataBANK1+4)& (0+127)
   142  07DC  250A               	fcall	__pidataBANK1+5	;fetch initializer
   143  07DD  00A5               	movwf	(__pdataBANK1+5)& (0+127)
   144  07DE  250B               	fcall	__pidataBANK1+6	;fetch initializer
   145  07DF  00A6               	movwf	(__pdataBANK1+6)& (0+127)
   146  07E0  250C               	fcall	__pidataBANK1+7	;fetch initializer
   147  07E1  00A7               	movwf	(__pdataBANK1+7)& (0+127)
   148  07E2  250D               	fcall	__pidataBANK1+8	;fetch initializer
   149  07E3  00A8               	movwf	(__pdataBANK1+8)& (0+127)
   150  07E4  250E               	fcall	__pidataBANK1+9	;fetch initializer
   151  07E5  00A9               	movwf	(__pdataBANK1+9)& (0+127)
   152  07E6  250F               	fcall	__pidataBANK1+10	;fetch initializer
   153  07E7  00AA               	movwf	(__pdataBANK1+10)& (0+127)
   154  07E8  2510               	fcall	__pidataBANK1+11	;fetch initializer
   155  07E9  00AB               	movwf	(__pdataBANK1+11)& (0+127)
   156  07EA  2511               	fcall	__pidataBANK1+12	;fetch initializer
   157  07EB  00AC               	movwf	(__pdataBANK1+12)& (0+127)
   158  07EC  2512               	fcall	__pidataBANK1+13	;fetch initializer
   159  07ED  00AD               	movwf	(__pdataBANK1+13)& (0+127)
   160  07EE  2513               	fcall	__pidataBANK1+14	;fetch initializer
   161  07EF  00AE               	movwf	(__pdataBANK1+14)& (0+127)
   162  07F0  2514               	fcall	__pidataBANK1+15	;fetch initializer
   163  07F1  00AF               	movwf	(__pdataBANK1+15)& (0+127)
   164  07F2  2515               	fcall	__pidataBANK1+16	;fetch initializer
   165  07F3  00B0               	movwf	(__pdataBANK1+16)& (0+127)
   166  07F4  2516               	fcall	__pidataBANK1+17	;fetch initializer
   167  07F5  00B1               	movwf	(__pdataBANK1+17)& (0+127)
   168  07F6  2517               	fcall	__pidataBANK1+18	;fetch initializer
   169  07F7  00B2               	movwf	(__pdataBANK1+18)& (0+127)
   170  07F8  2518               	fcall	__pidataBANK1+19	;fetch initializer
   171  07F9  00B3               	movwf	(__pdataBANK1+19)& (0+127)
   172                           
   173                           ; Clear objects allocated to BANK0
   174  07FA  1283               	bcf	3,5	;RP0=0, select bank0
   175  07FB  1303               	bcf	3,6	;RP1=0, select bank0
   176  07FC  01E4               	clrf	__pbssBANK0& (0+127)
   177  07FD  01E5               	clrf	(__pbssBANK0+1)& (0+127)
   178  07FE                     end_of_initialization:	
   179                           ;End of C runtime variable initialization code
   180                           
   181  07FE                     __end_of__initialization:	
   182  07FE  0183               	clrf	3
   183  07FF  2D91               	ljmp	_main	;jump to C main() function
   184                           
   185                           	psect	bssBANK0
   186  0064                     __pbssBANK0:	
   187  0064                     _contador:	
   188  0064                     	ds	2
   189                           
   190                           	psect	dataBANK1
   191  00A0                     __pdataBANK1:	
   192  00A0                     _codificacion:	
   193  00A0                     	ds	20
   194                           
   195                           	psect	cstackCOMMON
   196  0070                     __pcstackCOMMON:	
   197  0070                     ?_resetearSalidas:	
   198  0070                     ?_main:	
   199                           ; 1 bytes @ 0x0
   200                           
   201  0070                     ?___wmul:	
   202                           ; 1 bytes @ 0x0
   203                           
   204  0070                     resetearSalidas@cantidadSalidas:	
   205                           ; 2 bytes @ 0x0
   206                           
   207  0070                     ___wmul@multiplier:	
   208                           ; 2 bytes @ 0x0
   209                           
   210                           
   211                           ; 2 bytes @ 0x0
   212  0070                     	ds	2
   213  0072                     ??_resetearSalidas:	
   214  0072                     ___wmul@multiplicand:	
   215                           ; 1 bytes @ 0x2
   216                           
   217                           
   218                           ; 2 bytes @ 0x2
   219  0072                     	ds	1
   220  0073                     resetearSalidas@i:	
   221                           
   222                           ; 2 bytes @ 0x3
   223  0073                     	ds	1
   224  0074                     ??___wmul:	
   225  0074                     ___wmul@product:	
   226                           ; 1 bytes @ 0x4
   227                           
   228                           
   229                           ; 2 bytes @ 0x4
   230  0074                     	ds	2
   231  0076                     ?_powKase:	
   232  0076                     powKase@base:	
   233                           ; 2 bytes @ 0x6
   234                           
   235                           
   236                           ; 2 bytes @ 0x6
   237  0076                     	ds	2
   238  0078                     powKase@exponente:	
   239                           
   240                           ; 2 bytes @ 0x8
   241  0078                     	ds	2
   242  007A                     ??_powKase:	
   243                           
   244                           ; 1 bytes @ 0xA
   245  007A                     	ds	1
   246  007B                     ??___awdiv:	
   247                           
   248                           ; 1 bytes @ 0xB
   249  007B                     	ds	1
   250  007C                     ??_main:	
   251                           
   252                           ; 1 bytes @ 0xC
   253  007C                     	ds	2
   254                           
   255                           	psect	cstackBANK0
   256  0020                     __pcstackBANK0:	
   257  0020                     powKase@resultado:	
   258                           
   259                           ; 2 bytes @ 0x0
   260  0020                     	ds	2
   261  0022                     powKase@i:	
   262                           
   263                           ; 2 bytes @ 0x2
   264  0022                     	ds	2
   265  0024                     ?___awdiv:	
   266  0024                     ___awdiv@divisor:	
   267                           ; 2 bytes @ 0x4
   268                           
   269                           
   270                           ; 2 bytes @ 0x4
   271  0024                     	ds	2
   272  0026                     ___awdiv@dividend:	
   273                           
   274                           ; 2 bytes @ 0x6
   275  0026                     	ds	2
   276  0028                     ___awdiv@counter:	
   277                           
   278                           ; 1 bytes @ 0x8
   279  0028                     	ds	1
   280  0029                     ___awdiv@sign:	
   281                           
   282                           ; 1 bytes @ 0x9
   283  0029                     	ds	1
   284  002A                     ___awdiv@quotient:	
   285                           
   286                           ; 2 bytes @ 0xA
   287  002A                     	ds	2
   288  002C                     ?_intToArray:	
   289  002C                     intToArray@numero:	
   290                           ; 2 bytes @ 0xC
   291                           
   292                           
   293                           ; 2 bytes @ 0xC
   294  002C                     	ds	2
   295  002E                     ??_intToArray:	
   296                           
   297                           ; 1 bytes @ 0xE
   298  002E                     	ds	3
   299  0031                     _intToArray$452:	
   300                           
   301                           ; 2 bytes @ 0x11
   302  0031                     	ds	2
   303  0033                     intToArray@resultado:	
   304                           
   305                           ; 12 bytes @ 0x13
   306  0033                     	ds	12
   307  003F                     intToArray@i:	
   308                           
   309                           ; 2 bytes @ 0x1F
   310  003F                     	ds	2
   311  0041                     ?_escribirSalida:	
   312  0041                     escribirSalida@arreglo:	
   313                           ; 1 bytes @ 0x21
   314                           
   315                           
   316                           ; 2 bytes @ 0x21
   317  0041                     	ds	2
   318  0043                     ??_escribirSalida:	
   319                           
   320                           ; 1 bytes @ 0x23
   321  0043                     	ds	5
   322  0048                     _escribirSalida$453:	
   323                           
   324                           ; 2 bytes @ 0x28
   325  0048                     	ds	2
   326  004A                     escribirSalida@resultado:	
   327                           
   328                           ; 16 bytes @ 0x2A
   329  004A                     	ds	16
   330  005A                     escribirSalida@numero:	
   331                           
   332                           ; 2 bytes @ 0x3A
   333  005A                     	ds	2
   334  005C                     escribirSalida@i:	
   335                           
   336                           ; 2 bytes @ 0x3C
   337  005C                     	ds	2
   338  005E                     escribirSalida@j:	
   339                           
   340                           ; 2 bytes @ 0x3E
   341  005E                     	ds	2
   342  0060                     escribirSalida@i_52:	
   343                           
   344                           ; 2 bytes @ 0x40
   345  0060                     	ds	2
   346  0062                     main@palabaraBinaria:	
   347                           
   348                           ; 2 bytes @ 0x42
   349  0062                     	ds	2
   350                           
   351                           	psect	maintext
   352  0591                     __pmaintext:	
   353 ;;
   354 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   355 ;;
   356 ;; *************** function _main *****************
   357 ;; Defined at:
   358 ;;		line 104 in file "main.c"
   359 ;; Parameters:    Size  Location     Type
   360 ;;		None
   361 ;; Auto vars:     Size  Location     Type
   362 ;;  palabaraBina    2   66[BANK0 ] int 
   363 ;; Return value:  Size  Location     Type
   364 ;;                  1    wreg      void 
   365 ;; Registers used:
   366 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   367 ;; Tracked objects:
   368 ;;		On entry : B00/0
   369 ;;		On exit  : 0/0
   370 ;;		Unchanged: 0/0
   371 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   372 ;;      Params:         0       0       0       0
   373 ;;      Locals:         0       2       0       0
   374 ;;      Temps:          2       0       0       0
   375 ;;      Totals:         2       2       0       0
   376 ;;Total ram usage:        4 bytes
   377 ;; Hardware stack levels required when called:    3
   378 ;; This function calls:
   379 ;;		_escribirSalida
   380 ;;		_intToArray
   381 ;;		_resetearSalidas
   382 ;; This function is called by:
   383 ;;		Startup code after reset
   384 ;; This function uses a non-reentrant model
   385 ;;
   386                           
   387                           
   388                           ;psect for function _main
   389  0591                     _main:	
   390                           
   391                           ;main.c: 106: TRISB = 0b00000001;
   392                           
   393                           ;incstack = 0
   394                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   395  0591  3001               	movlw	1
   396  0592  1683               	bsf	3,5	;RP0=1, select bank1
   397  0593  1303               	bcf	3,6	;RP1=0, select bank1
   398  0594  0086               	movwf	6	;volatile
   399                           
   400                           ;main.c: 107: CMCON = 0x07;
   401  0595  3007               	movlw	7
   402  0596  1283               	bcf	3,5	;RP0=0, select bank0
   403  0597  1303               	bcf	3,6	;RP1=0, select bank0
   404  0598  009F               	movwf	31	;volatile
   405                           
   406                           ;main.c: 108: TRISA = 0b00000100;
   407  0599  3004               	movlw	4
   408  059A  1683               	bsf	3,5	;RP0=1, select bank1
   409  059B  1303               	bcf	3,6	;RP1=0, select bank1
   410  059C  0085               	movwf	5	;volatile
   411                           
   412                           ;main.c: 110: int palabaraBinaria = 48;
   413  059D  3030               	movlw	48
   414  059E  1283               	bcf	3,5	;RP0=0, select bank0
   415  059F  1303               	bcf	3,6	;RP1=0, select bank0
   416  05A0  00E2               	movwf	main@palabaraBinaria
   417  05A1  3000               	movlw	0
   418  05A2  00E3               	movwf	main@palabaraBinaria+1
   419                           
   420                           ;main.c: 112: resetearSalidas(palabaraBinaria);
   421  05A3  0863               	movf	main@palabaraBinaria+1,w
   422  05A4  00F1               	movwf	resetearSalidas@cantidadSalidas+1
   423  05A5  0862               	movf	main@palabaraBinaria,w
   424  05A6  00F0               	movwf	resetearSalidas@cantidadSalidas
   425  05A7  253A               	fcall	_resetearSalidas
   426  05A8                     l832:	
   427                           ;main.c: 114: while (1)
   428                           
   429                           
   430                           ;main.c: 115: {
   431                           ;main.c: 116: if(RB0 == 1)
   432  05A8  1283               	bcf	3,5	;RP0=0, select bank0
   433  05A9  1303               	bcf	3,6	;RP1=0, select bank0
   434  05AA  1C06               	btfss	6,0	;volatile
   435  05AB  2DA8               	goto	l832
   436                           
   437                           ;main.c: 117: {
   438                           ;main.c: 118: escribirSalida(intToArray(contador));
   439  05AC  0865               	movf	_contador+1,w
   440  05AD  00AD               	movwf	intToArray@numero+1
   441  05AE  0864               	movf	_contador,w
   442  05AF  00AC               	movwf	intToArray@numero
   443  05B0  2625               	fcall	_intToArray
   444  05B1  1283               	bcf	3,5	;RP0=0, select bank0
   445  05B2  1303               	bcf	3,6	;RP1=0, select bank0
   446  05B3  082C               	movf	?_intToArray,w
   447  05B4  00C1               	movwf	escribirSalida@arreglo
   448  05B5  082D               	movf	?_intToArray+1,w
   449  05B6  00C2               	movwf	escribirSalida@arreglo+1
   450  05B7  26C5               	fcall	_escribirSalida
   451                           
   452                           ;main.c: 119: _delay((unsigned long)((20)*(4000000/4000.0)));
   453  05B8  301A               	movlw	26
   454  05B9  00FD               	movwf	??_main+1
   455  05BA  30F8               	movlw	248
   456  05BB  00FC               	movwf	??_main
   457  05BC                     u597:	
   458  05BC  0BFC               	decfsz	??_main,f
   459  05BD  2DBC               	goto	u597
   460  05BE  0BFD               	decfsz	??_main+1,f
   461  05BF  2DBC               	goto	u597
   462  05C0  0000               	nop
   463                           
   464                           ;main.c: 120: contador++;
   465  05C1  3001               	movlw	1
   466  05C2  1283               	bcf	3,5	;RP0=0, select bank0
   467  05C3  1303               	bcf	3,6	;RP1=0, select bank0
   468  05C4  07E4               	addwf	_contador,f
   469  05C5  1803               	skipnc
   470  05C6  0AE5               	incf	_contador+1,f
   471  05C7  3000               	movlw	0
   472  05C8  07E5               	addwf	_contador+1,f
   473                           
   474                           ;main.c: 121: if(contador > 999999 )
   475  05C9  2DA8               	goto	l832
   476  05CA                     __end_of_main:	
   477                           ;main.c: 122: {
   478                           ;main.c: 123: contador = 0;
   479                           
   480                           
   481                           	psect	text1
   482  053A                     __ptext1:	
   483 ;; *************** function _resetearSalidas *****************
   484 ;; Defined at:
   485 ;;		line 37 in file "main.c"
   486 ;; Parameters:    Size  Location     Type
   487 ;;  cantidadSali    2    0[COMMON] int 
   488 ;; Auto vars:     Size  Location     Type
   489 ;;  i               2    3[COMMON] int 
   490 ;; Return value:  Size  Location     Type
   491 ;;                  1    wreg      void 
   492 ;; Registers used:
   493 ;;		wreg, status,2, status,0
   494 ;; Tracked objects:
   495 ;;		On entry : 0/0
   496 ;;		On exit  : 0/0
   497 ;;		Unchanged: 0/0
   498 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   499 ;;      Params:         2       0       0       0
   500 ;;      Locals:         2       0       0       0
   501 ;;      Temps:          1       0       0       0
   502 ;;      Totals:         5       0       0       0
   503 ;;Total ram usage:        5 bytes
   504 ;; Hardware stack levels used:    1
   505 ;; This function calls:
   506 ;;		Nothing
   507 ;; This function is called by:
   508 ;;		_main
   509 ;; This function uses a non-reentrant model
   510 ;;
   511                           
   512                           
   513                           ;psect for function _resetearSalidas
   514  053A                     _resetearSalidas:	
   515                           
   516                           ;main.c: 39: for(int i = 0; i < cantidadSalidas; i = i + 1)
   517                           
   518                           ;incstack = 0
   519                           ; Regs used in _resetearSalidas: [wreg+status,2+status,0]
   520  053A  01F3               	clrf	resetearSalidas@i
   521  053B  01F4               	clrf	resetearSalidas@i+1
   522  053C                     l754:	
   523  053C  0874               	movf	resetearSalidas@i+1,w
   524  053D  3A80               	xorlw	128
   525  053E  00F2               	movwf	??_resetearSalidas
   526  053F  0871               	movf	resetearSalidas@cantidadSalidas+1,w
   527  0540  3A80               	xorlw	128
   528  0541  0272               	subwf	??_resetearSalidas,w
   529  0542  1D03               	skipz
   530  0543  2D46               	goto	u455
   531  0544  0870               	movf	resetearSalidas@cantidadSalidas,w
   532  0545  0273               	subwf	resetearSalidas@i,w
   533  0546                     u455:	
   534  0546  1803               	btfsc	3,0
   535  0547  2D56               	goto	l31
   536                           
   537                           ;main.c: 40: {
   538                           ;main.c: 41: RB2 = 0;
   539  0548  1283               	bcf	3,5	;RP0=0, select bank0
   540  0549  1303               	bcf	3,6	;RP1=0, select bank0
   541  054A  1106               	bcf	6,2	;volatile
   542                           
   543                           ;main.c: 42: RB1 = 1;
   544  054B  1486               	bsf	6,1	;volatile
   545                           
   546                           ;main.c: 43: RB1 = 0;
   547  054C  1086               	bcf	6,1	;volatile
   548  054D  0873               	movf	resetearSalidas@i,w
   549  054E  3E01               	addlw	1
   550  054F  00F3               	movwf	resetearSalidas@i
   551  0550  0874               	movf	resetearSalidas@i+1,w
   552  0551  1803               	skipnc
   553  0552  3E01               	addlw	1
   554  0553  3E00               	addlw	0
   555  0554  00F4               	movwf	resetearSalidas@i+1
   556  0555  2D3C               	goto	l754
   557  0556                     l31:	
   558                           
   559                           ;main.c: 44: }
   560                           ;main.c: 45: RB3 = 1;
   561  0556  1283               	bcf	3,5	;RP0=0, select bank0
   562  0557  1303               	bcf	3,6	;RP1=0, select bank0
   563  0558  1586               	bsf	6,3	;volatile
   564                           
   565                           ;main.c: 46: RB3 = 0;
   566  0559  1186               	bcf	6,3	;volatile
   567  055A  0008               	return
   568  055B                     __end_of_resetearSalidas:	
   569                           
   570                           	psect	text2
   571  0625                     __ptext2:	
   572 ;; *************** function _intToArray *****************
   573 ;; Defined at:
   574 ;;		line 49 in file "main.c"
   575 ;; Parameters:    Size  Location     Type
   576 ;;  numero          2   12[BANK0 ] int 
   577 ;; Auto vars:     Size  Location     Type
   578 ;;  i               2   31[BANK0 ] int 
   579 ;;  resultado      12   19[BANK0 ] int [6]
   580 ;; Return value:  Size  Location     Type
   581 ;;                  2   12[BANK0 ] int 
   582 ;; Registers used:
   583 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   584 ;; Tracked objects:
   585 ;;		On entry : 0/0
   586 ;;		On exit  : 0/0
   587 ;;		Unchanged: 0/0
   588 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   589 ;;      Params:         0       2       0       0
   590 ;;      Locals:         0      16       0       0
   591 ;;      Temps:          0       3       0       0
   592 ;;      Totals:         0      21       0       0
   593 ;;Total ram usage:       21 bytes
   594 ;; Hardware stack levels used:    1
   595 ;; Hardware stack levels required when called:    2
   596 ;; This function calls:
   597 ;;		___awdiv
   598 ;;		___wmul
   599 ;;		_powKase
   600 ;; This function is called by:
   601 ;;		_main
   602 ;; This function uses a non-reentrant model
   603 ;;
   604                           
   605                           
   606                           ;psect for function _intToArray
   607  0625                     _intToArray:	
   608                           
   609                           ;main.c: 51: int resultado[6];
   610                           ;main.c: 52: resultado[0] = 0;
   611                           
   612                           ;incstack = 0
   613                           ; Regs used in _intToArray: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   614  0625  1283               	bcf	3,5	;RP0=0, select bank0
   615  0626  1303               	bcf	3,6	;RP1=0, select bank0
   616  0627  01B3               	clrf	intToArray@resultado
   617  0628  01B4               	clrf	intToArray@resultado+1
   618                           
   619                           ;main.c: 53: resultado[1] = 0;
   620  0629  01B5               	clrf	intToArray@resultado+2
   621  062A  01B6               	clrf	intToArray@resultado+3
   622                           
   623                           ;main.c: 54: resultado[2] = 0;
   624  062B  01B7               	clrf	intToArray@resultado+4
   625  062C  01B8               	clrf	intToArray@resultado+5
   626                           
   627                           ;main.c: 55: resultado[3] = 0;
   628  062D  01B9               	clrf	intToArray@resultado+6
   629  062E  01BA               	clrf	intToArray@resultado+7
   630                           
   631                           ;main.c: 56: resultado[4] = 0;
   632  062F  01BB               	clrf	intToArray@resultado+8
   633  0630  01BC               	clrf	intToArray@resultado+9
   634                           
   635                           ;main.c: 57: resultado[5] = 0;
   636  0631  01BD               	clrf	intToArray@resultado+10
   637  0632  01BE               	clrf	intToArray@resultado+11
   638                           
   639                           ;main.c: 59: if (numero != 0)
   640  0633  082C               	movf	intToArray@numero,w
   641  0634  042D               	iorwf	intToArray@numero+1,w
   642  0635  1903               	btfsc	3,2
   643  0636  2EBE               	goto	l776
   644                           
   645                           ;main.c: 60: {
   646                           ;main.c: 61: for (int i = 0; i < 6; i++)
   647  0637  01BF               	clrf	intToArray@i
   648  0638  01C0               	clrf	intToArray@i+1
   649  0639  0840               	movf	intToArray@i+1,w
   650  063A  3A80               	xorlw	128
   651  063B  00FF               	movwf	127
   652  063C  3080               	movlw	128
   653  063D  027F               	subwf	127,w
   654  063E  1D03               	skipz
   655  063F  2E42               	goto	u475
   656  0640  3006               	movlw	6
   657  0641  023F               	subwf	intToArray@i,w
   658  0642                     u475:	
   659  0642  1803               	btfsc	3,0
   660  0643  2EBE               	goto	l776
   661  0644                     l766:	
   662                           
   663                           ;main.c: 62: {
   664                           ;main.c: 63: resultado[i] = numero / powKase(10, (5 - i) );
   665  0644  1283               	bcf	3,5	;RP0=0, select bank0
   666  0645  1303               	bcf	3,6	;RP1=0, select bank0
   667  0646  093F               	comf	intToArray@i,w
   668  0647  00AE               	movwf	??_intToArray
   669  0648  0940               	comf	intToArray@i+1,w
   670  0649  00AF               	movwf	??_intToArray+1
   671  064A  0AAE               	incf	??_intToArray,f
   672  064B  1903               	skipnz
   673  064C  0AAF               	incf	??_intToArray+1,f
   674  064D  082E               	movf	??_intToArray,w
   675  064E  3E05               	addlw	5
   676  064F  00F8               	movwf	powKase@exponente
   677  0650  082F               	movf	??_intToArray+1,w
   678  0651  1803               	skipnc
   679  0652  3E01               	addlw	1
   680  0653  3E00               	addlw	0
   681  0654  00F9               	movwf	powKase@exponente+1
   682  0655  300A               	movlw	10
   683  0656  00F6               	movwf	powKase@base
   684  0657  3000               	movlw	0
   685  0658  00F7               	movwf	powKase@base+1
   686  0659  255B               	fcall	_powKase
   687  065A  0877               	movf	?_powKase+1,w
   688  065B  1283               	bcf	3,5	;RP0=0, select bank0
   689  065C  1303               	bcf	3,6	;RP1=0, select bank0
   690  065D  00A5               	movwf	___awdiv@divisor+1
   691  065E  0876               	movf	?_powKase,w
   692  065F  00A4               	movwf	___awdiv@divisor
   693  0660  082D               	movf	intToArray@numero+1,w
   694  0661  00A7               	movwf	___awdiv@dividend+1
   695  0662  082C               	movf	intToArray@numero,w
   696  0663  00A6               	movwf	___awdiv@dividend
   697  0664  25CA               	fcall	___awdiv
   698  0665  1283               	bcf	3,5	;RP0=0, select bank0
   699  0666  1303               	bcf	3,6	;RP1=0, select bank0
   700  0667  083F               	movf	intToArray@i,w
   701  0668  00B0               	movwf	??_intToArray+2
   702  0669  0730               	addwf	??_intToArray+2,w
   703  066A  3E33               	addlw	(low (intToArray@resultado| 0))& (0+255)
   704  066B  0084               	movwf	4
   705  066C  0824               	movf	?___awdiv,w
   706  066D  1383               	bcf	3,7	;select IRP bank0
   707  066E  0080               	movwf	0
   708  066F  0A84               	incf	4,f
   709  0670  0825               	movf	?___awdiv+1,w
   710  0671  0080               	movwf	0
   711                           
   712                           ;main.c: 64: numero = numero - powKase(10, (5 - i) ) * resultado[i];
   713  0672  093F               	comf	intToArray@i,w
   714  0673  00AE               	movwf	??_intToArray
   715  0674  0940               	comf	intToArray@i+1,w
   716  0675  00AF               	movwf	??_intToArray+1
   717  0676  0AAE               	incf	??_intToArray,f
   718  0677  1903               	skipnz
   719  0678  0AAF               	incf	??_intToArray+1,f
   720  0679  082E               	movf	??_intToArray,w
   721  067A  3E05               	addlw	5
   722  067B  00F8               	movwf	powKase@exponente
   723  067C  082F               	movf	??_intToArray+1,w
   724  067D  1803               	skipnc
   725  067E  3E01               	addlw	1
   726  067F  3E00               	addlw	0
   727  0680  00F9               	movwf	powKase@exponente+1
   728  0681  300A               	movlw	10
   729  0682  00F6               	movwf	powKase@base
   730  0683  3000               	movlw	0
   731  0684  00F7               	movwf	powKase@base+1
   732  0685  255B               	fcall	_powKase
   733  0686  0877               	movf	?_powKase+1,w
   734  0687  1283               	bcf	3,5	;RP0=0, select bank0
   735  0688  1303               	bcf	3,6	;RP1=0, select bank0
   736  0689  00B2               	movwf	_intToArray$452+1
   737  068A  0876               	movf	?_powKase,w
   738  068B  00B1               	movwf	_intToArray$452
   739                           
   740                           ;main.c: 64: numero = numero - powKase(10, (5 - i) ) * resultado[i];
   741  068C  0832               	movf	_intToArray$452+1,w
   742  068D  00F1               	movwf	___wmul@multiplier+1
   743  068E  0831               	movf	_intToArray$452,w
   744  068F  00F0               	movwf	___wmul@multiplier
   745  0690  083F               	movf	intToArray@i,w
   746  0691  00AE               	movwf	??_intToArray
   747  0692  072E               	addwf	??_intToArray,w
   748  0693  3E33               	addlw	(low (intToArray@resultado| 0))& (0+255)
   749  0694  0084               	movwf	4
   750  0695  1383               	bcf	3,7	;select IRP bank0
   751  0696  0800               	movf	0,w
   752  0697  00F2               	movwf	___wmul@multiplicand
   753  0698  0A84               	incf	4,f
   754  0699  0800               	movf	0,w
   755  069A  00F3               	movwf	___wmul@multiplicand+1
   756  069B  2519               	fcall	___wmul
   757  069C  0970               	comf	?___wmul,w
   758  069D  1283               	bcf	3,5	;RP0=0, select bank0
   759  069E  1303               	bcf	3,6	;RP1=0, select bank0
   760  069F  00AF               	movwf	??_intToArray+1
   761  06A0  0971               	comf	?___wmul+1,w
   762  06A1  00B0               	movwf	??_intToArray+2
   763  06A2  0AAF               	incf	??_intToArray+1,f
   764  06A3  1903               	skipnz
   765  06A4  0AB0               	incf	??_intToArray+2,f
   766  06A5  082C               	movf	intToArray@numero,w
   767  06A6  072F               	addwf	??_intToArray+1,w
   768  06A7  00AC               	movwf	intToArray@numero
   769  06A8  082D               	movf	intToArray@numero+1,w
   770  06A9  1803               	skipnc
   771  06AA  0A2D               	incf	intToArray@numero+1,w
   772  06AB  0730               	addwf	??_intToArray+2,w
   773  06AC  00AD               	movwf	intToArray@numero+1
   774  06AD  3001               	movlw	1
   775  06AE  07BF               	addwf	intToArray@i,f
   776  06AF  1803               	skipnc
   777  06B0  0AC0               	incf	intToArray@i+1,f
   778  06B1  3000               	movlw	0
   779  06B2  07C0               	addwf	intToArray@i+1,f
   780  06B3  0840               	movf	intToArray@i+1,w
   781  06B4  3A80               	xorlw	128
   782  06B5  00FF               	movwf	127
   783  06B6  3080               	movlw	128
   784  06B7  027F               	subwf	127,w
   785  06B8  1D03               	skipz
   786  06B9  2EBC               	goto	u485
   787  06BA  3006               	movlw	6
   788  06BB  023F               	subwf	intToArray@i,w
   789  06BC                     u485:	
   790  06BC  1C03               	skipc
   791  06BD  2E44               	goto	l766
   792  06BE                     l776:	
   793                           
   794                           ;main.c: 65: }
   795                           ;main.c: 66: }
   796                           ;main.c: 67: return resultado;
   797  06BE  3033               	movlw	(low (intToArray@resultado| 0))& (0+255)
   798  06BF  1283               	bcf	3,5	;RP0=0, select bank0
   799  06C0  1303               	bcf	3,6	;RP1=0, select bank0
   800  06C1  00AC               	movwf	?_intToArray
   801  06C2  3000               	movlw	0
   802  06C3  00AD               	movwf	?_intToArray+1
   803  06C4  0008               	return
   804  06C5                     __end_of_intToArray:	
   805                           
   806                           	psect	text3
   807  06C5                     __ptext3:	
   808 ;; *************** function _escribirSalida *****************
   809 ;; Defined at:
   810 ;;		line 70 in file "main.c"
   811 ;; Parameters:    Size  Location     Type
   812 ;;  arreglo         2   33[BANK0 ] PTR int 
   813 ;;		 -> RAM(512), 
   814 ;; Auto vars:     Size  Location     Type
   815 ;;  i               2   64[BANK0 ] int 
   816 ;;  j               2   62[BANK0 ] int 
   817 ;;  i               2   60[BANK0 ] int 
   818 ;;  resultado      16   42[BANK0 ] int [8]
   819 ;;  numero          2   58[BANK0 ] int 
   820 ;; Return value:  Size  Location     Type
   821 ;;                  1    wreg      void 
   822 ;; Registers used:
   823 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   824 ;; Tracked objects:
   825 ;;		On entry : 0/0
   826 ;;		On exit  : 0/0
   827 ;;		Unchanged: 0/0
   828 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   829 ;;      Params:         0       2       0       0
   830 ;;      Locals:         0      26       0       0
   831 ;;      Temps:          0       5       0       0
   832 ;;      Totals:         0      33       0       0
   833 ;;Total ram usage:       33 bytes
   834 ;; Hardware stack levels used:    1
   835 ;; Hardware stack levels required when called:    2
   836 ;; This function calls:
   837 ;;		___awdiv
   838 ;;		___wmul
   839 ;;		_powKase
   840 ;; This function is called by:
   841 ;;		_main
   842 ;; This function uses a non-reentrant model
   843 ;;
   844                           
   845                           
   846                           ;psect for function _escribirSalida
   847  06C5                     _escribirSalida:	
   848                           
   849                           ;main.c: 72: int resultado[8];
   850                           ;main.c: 73: int numero;
   851                           ;main.c: 74: resultado[0] = 0;
   852                           
   853                           ;incstack = 0
   854                           ; Regs used in _escribirSalida: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   855  06C5  1283               	bcf	3,5	;RP0=0, select bank0
   856  06C6  1303               	bcf	3,6	;RP1=0, select bank0
   857  06C7  01CA               	clrf	escribirSalida@resultado
   858  06C8  01CB               	clrf	escribirSalida@resultado+1
   859                           
   860                           ;main.c: 75: resultado[1] = 0;
   861  06C9  01CC               	clrf	escribirSalida@resultado+2
   862  06CA  01CD               	clrf	escribirSalida@resultado+3
   863                           
   864                           ;main.c: 76: resultado[2] = 0;
   865  06CB  01CE               	clrf	escribirSalida@resultado+4
   866  06CC  01CF               	clrf	escribirSalida@resultado+5
   867                           
   868                           ;main.c: 77: resultado[3] = 0;
   869  06CD  01D0               	clrf	escribirSalida@resultado+6
   870  06CE  01D1               	clrf	escribirSalida@resultado+7
   871                           
   872                           ;main.c: 78: resultado[4] = 0;
   873  06CF  01D2               	clrf	escribirSalida@resultado+8
   874  06D0  01D3               	clrf	escribirSalida@resultado+9
   875                           
   876                           ;main.c: 79: resultado[5] = 0;
   877  06D1  01D4               	clrf	escribirSalida@resultado+10
   878  06D2  01D5               	clrf	escribirSalida@resultado+11
   879                           
   880                           ;main.c: 80: resultado[6] = 0;
   881  06D3  01D6               	clrf	escribirSalida@resultado+12
   882  06D4  01D7               	clrf	escribirSalida@resultado+13
   883                           
   884                           ;main.c: 81: resultado[7] = 0;
   885  06D5  01D8               	clrf	escribirSalida@resultado+14
   886  06D6  01D9               	clrf	escribirSalida@resultado+15
   887                           
   888                           ;main.c: 82: for(int i = 5; i >= 0; i = i - 1)
   889  06D7  3005               	movlw	5
   890  06D8  00DC               	movwf	escribirSalida@i
   891  06D9  3000               	movlw	0
   892  06DA  00DD               	movwf	escribirSalida@i+1
   893  06DB  1BDD               	btfsc	escribirSalida@i+1,7
   894  06DC  2FCD               	goto	l42
   895  06DD                     l788:	
   896                           
   897                           ;main.c: 83: {
   898                           ;main.c: 84: numero = codificacion[arreglo[i]];
   899  06DD  085D               	movf	escribirSalida@i+1,w
   900  06DE  00C4               	movwf	??_escribirSalida+1
   901  06DF  085C               	movf	escribirSalida@i,w
   902  06E0  00C3               	movwf	??_escribirSalida
   903  06E1  1003               	clrc
   904  06E2  0DC3               	rlf	??_escribirSalida,f
   905  06E3  0DC4               	rlf	??_escribirSalida+1,f
   906  06E4  0843               	movf	??_escribirSalida,w
   907  06E5  0741               	addwf	escribirSalida@arreglo,w
   908  06E6  00C5               	movwf	??_escribirSalida+2
   909  06E7  0844               	movf	??_escribirSalida+1,w
   910  06E8  1803               	skipnc
   911  06E9  0A44               	incf	??_escribirSalida+1,w
   912  06EA  0742               	addwf	escribirSalida@arreglo+1,w
   913  06EB  00C6               	movwf	??_escribirSalida+3
   914  06EC  0845               	movf	??_escribirSalida+2,w
   915  06ED  0084               	movwf	4
   916  06EE  1783               	bsf	3,7
   917  06EF  1C46               	btfss	??_escribirSalida+3,0
   918  06F0  1383               	bcf	3,7
   919  06F1  0800               	movf	0,w
   920  06F2  00C7               	movwf	??_escribirSalida+4
   921  06F3  0747               	addwf	??_escribirSalida+4,w
   922  06F4  3EA0               	addlw	(low (_codificacion| 0))& (0+255)
   923  06F5  0084               	movwf	4
   924  06F6  1383               	bcf	3,7	;select IRP bank1
   925  06F7  0800               	movf	0,w
   926  06F8  00DA               	movwf	escribirSalida@numero
   927  06F9  0A84               	incf	4,f
   928  06FA  0800               	movf	0,w
   929  06FB  00DB               	movwf	escribirSalida@numero+1
   930                           
   931                           ;main.c: 85: if (numero != 0)
   932  06FC  085A               	movf	escribirSalida@numero,w
   933  06FD  045B               	iorwf	escribirSalida@numero+1,w
   934  06FE  1903               	btfsc	3,2
   935  06FF  2F87               	goto	l808
   936                           
   937                           ;main.c: 86: {
   938                           ;main.c: 87: for (int i = 0; i < 8; i++)
   939  0700  01E0               	clrf	escribirSalida@i_52
   940  0701  01E1               	clrf	escribirSalida@i_52+1
   941  0702  0861               	movf	escribirSalida@i_52+1,w
   942  0703  3A80               	xorlw	128
   943  0704  00FF               	movwf	127
   944  0705  3080               	movlw	128
   945  0706  027F               	subwf	127,w
   946  0707  1D03               	skipz
   947  0708  2F0B               	goto	u515
   948  0709  3008               	movlw	8
   949  070A  0260               	subwf	escribirSalida@i_52,w
   950  070B                     u515:	
   951  070B  1803               	btfsc	3,0
   952  070C  2F87               	goto	l808
   953  070D                     l798:	
   954                           
   955                           ;main.c: 88: {
   956                           ;main.c: 89: resultado[i] = numero / powKase(10, (7 - i) );
   957  070D  1283               	bcf	3,5	;RP0=0, select bank0
   958  070E  1303               	bcf	3,6	;RP1=0, select bank0
   959  070F  0960               	comf	escribirSalida@i_52,w
   960  0710  00C3               	movwf	??_escribirSalida
   961  0711  0961               	comf	escribirSalida@i_52+1,w
   962  0712  00C4               	movwf	??_escribirSalida+1
   963  0713  0AC3               	incf	??_escribirSalida,f
   964  0714  1903               	skipnz
   965  0715  0AC4               	incf	??_escribirSalida+1,f
   966  0716  0843               	movf	??_escribirSalida,w
   967  0717  3E07               	addlw	7
   968  0718  00F8               	movwf	powKase@exponente
   969  0719  0844               	movf	??_escribirSalida+1,w
   970  071A  1803               	skipnc
   971  071B  3E01               	addlw	1
   972  071C  3E00               	addlw	0
   973  071D  00F9               	movwf	powKase@exponente+1
   974  071E  300A               	movlw	10
   975  071F  00F6               	movwf	powKase@base
   976  0720  3000               	movlw	0
   977  0721  00F7               	movwf	powKase@base+1
   978  0722  255B               	fcall	_powKase
   979  0723  0877               	movf	?_powKase+1,w
   980  0724  1283               	bcf	3,5	;RP0=0, select bank0
   981  0725  1303               	bcf	3,6	;RP1=0, select bank0
   982  0726  00A5               	movwf	___awdiv@divisor+1
   983  0727  0876               	movf	?_powKase,w
   984  0728  00A4               	movwf	___awdiv@divisor
   985  0729  085B               	movf	escribirSalida@numero+1,w
   986  072A  00A7               	movwf	___awdiv@dividend+1
   987  072B  085A               	movf	escribirSalida@numero,w
   988  072C  00A6               	movwf	___awdiv@dividend
   989  072D  25CA               	fcall	___awdiv
   990  072E  1283               	bcf	3,5	;RP0=0, select bank0
   991  072F  1303               	bcf	3,6	;RP1=0, select bank0
   992  0730  0860               	movf	escribirSalida@i_52,w
   993  0731  00C5               	movwf	??_escribirSalida+2
   994  0732  0745               	addwf	??_escribirSalida+2,w
   995  0733  3E4A               	addlw	(low (escribirSalida@resultado| 0))& (0+255)
   996  0734  0084               	movwf	4
   997  0735  0824               	movf	?___awdiv,w
   998  0736  1383               	bcf	3,7	;select IRP bank0
   999  0737  0080               	movwf	0
  1000  0738  0A84               	incf	4,f
  1001  0739  0825               	movf	?___awdiv+1,w
  1002  073A  0080               	movwf	0
  1003                           
  1004                           ;main.c: 90: numero = numero - powKase(10, (7 - i) ) * resultado[i];
  1005  073B  0960               	comf	escribirSalida@i_52,w
  1006  073C  00C3               	movwf	??_escribirSalida
  1007  073D  0961               	comf	escribirSalida@i_52+1,w
  1008  073E  00C4               	movwf	??_escribirSalida+1
  1009  073F  0AC3               	incf	??_escribirSalida,f
  1010  0740  1903               	skipnz
  1011  0741  0AC4               	incf	??_escribirSalida+1,f
  1012  0742  0843               	movf	??_escribirSalida,w
  1013  0743  3E07               	addlw	7
  1014  0744  00F8               	movwf	powKase@exponente
  1015  0745  0844               	movf	??_escribirSalida+1,w
  1016  0746  1803               	skipnc
  1017  0747  3E01               	addlw	1
  1018  0748  3E00               	addlw	0
  1019  0749  00F9               	movwf	powKase@exponente+1
  1020  074A  300A               	movlw	10
  1021  074B  00F6               	movwf	powKase@base
  1022  074C  3000               	movlw	0
  1023  074D  00F7               	movwf	powKase@base+1
  1024  074E  255B               	fcall	_powKase
  1025  074F  0877               	movf	?_powKase+1,w
  1026  0750  1283               	bcf	3,5	;RP0=0, select bank0
  1027  0751  1303               	bcf	3,6	;RP1=0, select bank0
  1028  0752  00C9               	movwf	_escribirSalida$453+1
  1029  0753  0876               	movf	?_powKase,w
  1030  0754  00C8               	movwf	_escribirSalida$453
  1031                           
  1032                           ;main.c: 90: numero = numero - powKase(10, (7 - i) ) * resultado[i];
  1033  0755  0849               	movf	_escribirSalida$453+1,w
  1034  0756  00F1               	movwf	___wmul@multiplier+1
  1035  0757  0848               	movf	_escribirSalida$453,w
  1036  0758  00F0               	movwf	___wmul@multiplier
  1037  0759  0860               	movf	escribirSalida@i_52,w
  1038  075A  00C3               	movwf	??_escribirSalida
  1039  075B  0743               	addwf	??_escribirSalida,w
  1040  075C  3E4A               	addlw	(low (escribirSalida@resultado| 0))& (0+255)
  1041  075D  0084               	movwf	4
  1042  075E  1383               	bcf	3,7	;select IRP bank0
  1043  075F  0800               	movf	0,w
  1044  0760  00F2               	movwf	___wmul@multiplicand
  1045  0761  0A84               	incf	4,f
  1046  0762  0800               	movf	0,w
  1047  0763  00F3               	movwf	___wmul@multiplicand+1
  1048  0764  2519               	fcall	___wmul
  1049  0765  0970               	comf	?___wmul,w
  1050  0766  1283               	bcf	3,5	;RP0=0, select bank0
  1051  0767  1303               	bcf	3,6	;RP1=0, select bank0
  1052  0768  00C4               	movwf	??_escribirSalida+1
  1053  0769  0971               	comf	?___wmul+1,w
  1054  076A  00C5               	movwf	??_escribirSalida+2
  1055  076B  0AC4               	incf	??_escribirSalida+1,f
  1056  076C  1903               	skipnz
  1057  076D  0AC5               	incf	??_escribirSalida+2,f
  1058  076E  085A               	movf	escribirSalida@numero,w
  1059  076F  0744               	addwf	??_escribirSalida+1,w
  1060  0770  00DA               	movwf	escribirSalida@numero
  1061  0771  085B               	movf	escribirSalida@numero+1,w
  1062  0772  1803               	skipnc
  1063  0773  0A5B               	incf	escribirSalida@numero+1,w
  1064  0774  0745               	addwf	??_escribirSalida+2,w
  1065  0775  00DB               	movwf	escribirSalida@numero+1
  1066  0776  3001               	movlw	1
  1067  0777  07E0               	addwf	escribirSalida@i_52,f
  1068  0778  1803               	skipnc
  1069  0779  0AE1               	incf	escribirSalida@i_52+1,f
  1070  077A  3000               	movlw	0
  1071  077B  07E1               	addwf	escribirSalida@i_52+1,f
  1072  077C  0861               	movf	escribirSalida@i_52+1,w
  1073  077D  3A80               	xorlw	128
  1074  077E  00FF               	movwf	127
  1075  077F  3080               	movlw	128
  1076  0780  027F               	subwf	127,w
  1077  0781  1D03               	skipz
  1078  0782  2F85               	goto	u525
  1079  0783  3008               	movlw	8
  1080  0784  0260               	subwf	escribirSalida@i_52,w
  1081  0785                     u525:	
  1082  0785  1C03               	skipc
  1083  0786  2F0D               	goto	l798
  1084  0787                     l808:	
  1085                           
  1086                           ;main.c: 91: }
  1087                           ;main.c: 92: }
  1088                           ;main.c: 93: for (int j = 0; j < 8; j = j + 1)
  1089  0787  1283               	bcf	3,5	;RP0=0, select bank0
  1090  0788  1303               	bcf	3,6	;RP1=0, select bank0
  1091  0789  01DE               	clrf	escribirSalida@j
  1092  078A  01DF               	clrf	escribirSalida@j+1
  1093  078B  085F               	movf	escribirSalida@j+1,w
  1094  078C  3A80               	xorlw	128
  1095  078D  00FF               	movwf	127
  1096  078E  3080               	movlw	128
  1097  078F  027F               	subwf	127,w
  1098  0790  1D03               	skipz
  1099  0791  2F94               	goto	u535
  1100  0792  3008               	movlw	8
  1101  0793  025E               	subwf	escribirSalida@j,w
  1102  0794                     u535:	
  1103  0794  1803               	btfsc	3,0
  1104  0795  2FC1               	goto	l824
  1105  0796                     l814:	
  1106                           
  1107                           ;main.c: 94: {
  1108                           ;main.c: 95: RB2 = resultado[j] - 2;
  1109  0796  1283               	bcf	3,5	;RP0=0, select bank0
  1110  0797  1303               	bcf	3,6	;RP1=0, select bank0
  1111  0798  085E               	movf	escribirSalida@j,w
  1112  0799  00C3               	movwf	??_escribirSalida
  1113  079A  0743               	addwf	??_escribirSalida,w
  1114  079B  3E4A               	addlw	(low (escribirSalida@resultado| 0))& (0+255)
  1115  079C  0084               	movwf	4
  1116  079D  1383               	bcf	3,7	;select IRP bank0
  1117  079E  0800               	movf	0,w
  1118  079F  00C4               	movwf	??_escribirSalida+1
  1119  07A0  0A84               	incf	4,f
  1120  07A1  0800               	movf	0,w
  1121  07A2  00C5               	movwf	??_escribirSalida+2
  1122  07A3  1C44               	btfss	??_escribirSalida+1,0
  1123  07A4  2FA9               	goto	u540
  1124  07A5  1283               	bcf	3,5	;RP0=0, select bank0
  1125  07A6  1303               	bcf	3,6	;RP1=0, select bank0
  1126  07A7  1506               	bsf	6,2	;volatile
  1127  07A8  2FAC               	goto	l816
  1128  07A9                     u540:	
  1129  07A9  1283               	bcf	3,5	;RP0=0, select bank0
  1130  07AA  1303               	bcf	3,6	;RP1=0, select bank0
  1131  07AB  1106               	bcf	6,2	;volatile
  1132  07AC                     l816:	
  1133                           
  1134                           ;main.c: 96: RB1 = 1;
  1135  07AC  1486               	bsf	6,1	;volatile
  1136                           
  1137                           ;main.c: 97: RB1 = 0;
  1138  07AD  1086               	bcf	6,1	;volatile
  1139  07AE  085E               	movf	escribirSalida@j,w
  1140  07AF  3E01               	addlw	1
  1141  07B0  00DE               	movwf	escribirSalida@j
  1142  07B1  085F               	movf	escribirSalida@j+1,w
  1143  07B2  1803               	skipnc
  1144  07B3  3E01               	addlw	1
  1145  07B4  3E00               	addlw	0
  1146  07B5  00DF               	movwf	escribirSalida@j+1
  1147  07B6  085F               	movf	escribirSalida@j+1,w
  1148  07B7  3A80               	xorlw	128
  1149  07B8  00FF               	movwf	127
  1150  07B9  3080               	movlw	128
  1151  07BA  027F               	subwf	127,w
  1152  07BB  1D03               	skipz
  1153  07BC  2FBF               	goto	u565
  1154  07BD  3008               	movlw	8
  1155  07BE  025E               	subwf	escribirSalida@j,w
  1156  07BF                     u565:	
  1157  07BF  1C03               	skipc
  1158  07C0  2F96               	goto	l814
  1159  07C1                     l824:	
  1160  07C1  1283               	bcf	3,5	;RP0=0, select bank0
  1161  07C2  1303               	bcf	3,6	;RP1=0, select bank0
  1162  07C3  085C               	movf	escribirSalida@i,w
  1163  07C4  3EFF               	addlw	255
  1164  07C5  00DC               	movwf	escribirSalida@i
  1165  07C6  085D               	movf	escribirSalida@i+1,w
  1166  07C7  1803               	skipnc
  1167  07C8  3E01               	addlw	1
  1168  07C9  3EFF               	addlw	255
  1169  07CA  00DD               	movwf	escribirSalida@i+1
  1170  07CB  1FDD               	btfss	escribirSalida@i+1,7
  1171  07CC  2EDD               	goto	l788
  1172  07CD                     l42:	
  1173                           
  1174                           ;main.c: 98: }
  1175                           ;main.c: 99: }
  1176                           ;main.c: 100: RB3 = 1;
  1177  07CD  1586               	bsf	6,3	;volatile
  1178                           
  1179                           ;main.c: 101: RB3 = 0;
  1180  07CE  1186               	bcf	6,3	;volatile
  1181  07CF  0008               	return
  1182  07D0                     __end_of_escribirSalida:	
  1183                           
  1184                           	psect	text4
  1185  055B                     __ptext4:	
  1186 ;; *************** function _powKase *****************
  1187 ;; Defined at:
  1188 ;;		line 27 in file "main.c"
  1189 ;; Parameters:    Size  Location     Type
  1190 ;;  base            2    6[COMMON] int 
  1191 ;;  exponente       2    8[COMMON] int 
  1192 ;; Auto vars:     Size  Location     Type
  1193 ;;  i               2    2[BANK0 ] int 
  1194 ;;  resultado       2    0[BANK0 ] int 
  1195 ;; Return value:  Size  Location     Type
  1196 ;;                  2    6[COMMON] int 
  1197 ;; Registers used:
  1198 ;;		wreg, status,2, status,0, pclath, cstack
  1199 ;; Tracked objects:
  1200 ;;		On entry : 0/0
  1201 ;;		On exit  : 0/0
  1202 ;;		Unchanged: 0/0
  1203 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1204 ;;      Params:         4       0       0       0
  1205 ;;      Locals:         0       4       0       0
  1206 ;;      Temps:          1       0       0       0
  1207 ;;      Totals:         5       4       0       0
  1208 ;;Total ram usage:        9 bytes
  1209 ;; Hardware stack levels used:    1
  1210 ;; Hardware stack levels required when called:    1
  1211 ;; This function calls:
  1212 ;;		___wmul
  1213 ;; This function is called by:
  1214 ;;		_intToArray
  1215 ;;		_escribirSalida
  1216 ;; This function uses a non-reentrant model
  1217 ;;
  1218                           
  1219                           
  1220                           ;psect for function _powKase
  1221  055B                     _powKase:	
  1222                           
  1223                           ;main.c: 29: int resultado = 1;
  1224                           
  1225                           ;incstack = 0
  1226                           ; Regs used in _powKase: [wreg+status,2+status,0+pclath+cstack]
  1227  055B  3001               	movlw	1
  1228  055C  1283               	bcf	3,5	;RP0=0, select bank0
  1229  055D  1303               	bcf	3,6	;RP1=0, select bank0
  1230  055E  00A0               	movwf	powKase@resultado
  1231  055F  3000               	movlw	0
  1232  0560  00A1               	movwf	powKase@resultado+1
  1233                           
  1234                           ;main.c: 30: for (int i = 1; i <= exponente; i = i + 1)
  1235  0561  3001               	movlw	1
  1236  0562  00A2               	movwf	powKase@i
  1237  0563  3000               	movlw	0
  1238  0564                     L1:	
  1239  0564  00A3               	movwf	powKase@i+1
  1240  0565  0879               	movf	powKase@exponente+1,w
  1241  0566  3A80               	xorlw	128
  1242  0567  00FA               	movwf	??_powKase
  1243  0568  0823               	movf	powKase@i+1,w
  1244  0569  3A80               	xorlw	128
  1245  056A  027A               	subwf	??_powKase,w
  1246  056B  1D03               	skipz
  1247  056C  2D6F               	goto	u345
  1248  056D  0822               	movf	powKase@i,w
  1249  056E  0278               	subwf	powKase@exponente,w
  1250  056F                     u345:	
  1251  056F  1C03               	btfss	3,0
  1252  0570  2D8A               	goto	l702
  1253                           
  1254                           ;main.c: 31: {
  1255                           ;main.c: 32: resultado = resultado * base;
  1256  0571  1283               	bcf	3,5	;RP0=0, select bank0
  1257  0572  1303               	bcf	3,6	;RP1=0, select bank0
  1258  0573  0821               	movf	powKase@resultado+1,w
  1259  0574  00F1               	movwf	___wmul@multiplier+1
  1260  0575  0820               	movf	powKase@resultado,w
  1261  0576  00F0               	movwf	___wmul@multiplier
  1262  0577  0877               	movf	powKase@base+1,w
  1263  0578  00F3               	movwf	___wmul@multiplicand+1
  1264  0579  0876               	movf	powKase@base,w
  1265  057A  00F2               	movwf	___wmul@multiplicand
  1266  057B  2519               	fcall	___wmul
  1267  057C  0871               	movf	?___wmul+1,w
  1268  057D  1283               	bcf	3,5	;RP0=0, select bank0
  1269  057E  1303               	bcf	3,6	;RP1=0, select bank0
  1270  057F  00A1               	movwf	powKase@resultado+1
  1271  0580  0870               	movf	?___wmul,w
  1272  0581  00A0               	movwf	powKase@resultado
  1273  0582  0822               	movf	powKase@i,w
  1274  0583  3E01               	addlw	1
  1275  0584  00A2               	movwf	powKase@i
  1276  0585  0823               	movf	powKase@i+1,w
  1277  0586  1803               	skipnc
  1278  0587  3E01               	addlw	1
  1279  0588  3E00               	addlw	0
  1280  0589  2D64               	goto	L1
  1281  058A                     l702:	
  1282                           
  1283                           ;main.c: 33: }
  1284                           ;main.c: 34: return resultado;
  1285  058A  1283               	bcf	3,5	;RP0=0, select bank0
  1286  058B  1303               	bcf	3,6	;RP1=0, select bank0
  1287  058C  0821               	movf	powKase@resultado+1,w
  1288  058D  00F7               	movwf	?_powKase+1
  1289  058E  0820               	movf	powKase@resultado,w
  1290  058F  00F6               	movwf	?_powKase
  1291  0590  0008               	return
  1292  0591                     __end_of_powKase:	
  1293                           
  1294                           	psect	text5
  1295  0519                     __ptext5:	
  1296 ;; *************** function ___wmul *****************
  1297 ;; Defined at:
  1298 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\Umul16.c"
  1299 ;; Parameters:    Size  Location     Type
  1300 ;;  multiplier      2    0[COMMON] unsigned int 
  1301 ;;  multiplicand    2    2[COMMON] unsigned int 
  1302 ;; Auto vars:     Size  Location     Type
  1303 ;;  product         2    4[COMMON] unsigned int 
  1304 ;; Return value:  Size  Location     Type
  1305 ;;                  2    0[COMMON] unsigned int 
  1306 ;; Registers used:
  1307 ;;		wreg, status,2, status,0
  1308 ;; Tracked objects:
  1309 ;;		On entry : 0/0
  1310 ;;		On exit  : 0/0
  1311 ;;		Unchanged: 0/0
  1312 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1313 ;;      Params:         4       0       0       0
  1314 ;;      Locals:         2       0       0       0
  1315 ;;      Temps:          0       0       0       0
  1316 ;;      Totals:         6       0       0       0
  1317 ;;Total ram usage:        6 bytes
  1318 ;; Hardware stack levels used:    1
  1319 ;; This function calls:
  1320 ;;		Nothing
  1321 ;; This function is called by:
  1322 ;;		_powKase
  1323 ;;		_intToArray
  1324 ;;		_escribirSalida
  1325 ;; This function uses a non-reentrant model
  1326 ;;
  1327                           
  1328                           
  1329                           ;psect for function ___wmul
  1330  0519                     ___wmul:	
  1331                           
  1332                           ;incstack = 0
  1333                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  1334  0519  01F4               	clrf	___wmul@product
  1335  051A  01F5               	clrf	___wmul@product+1
  1336  051B                     l682:	
  1337  051B  1C70               	btfss	___wmul@multiplier,0
  1338  051C  2D23               	goto	l142
  1339  051D  0872               	movf	___wmul@multiplicand,w
  1340  051E  07F4               	addwf	___wmul@product,f
  1341  051F  1803               	skipnc
  1342  0520  0AF5               	incf	___wmul@product+1,f
  1343  0521  0873               	movf	___wmul@multiplicand+1,w
  1344  0522  07F5               	addwf	___wmul@product+1,f
  1345  0523                     l142:	
  1346  0523  3001               	movlw	1
  1347  0524                     u315:	
  1348  0524  1003               	clrc
  1349  0525  0DF2               	rlf	___wmul@multiplicand,f
  1350  0526  0DF3               	rlf	___wmul@multiplicand+1,f
  1351  0527  3EFF               	addlw	-1
  1352  0528  1D03               	skipz
  1353  0529  2D24               	goto	u315
  1354  052A  3001               	movlw	1
  1355  052B                     u325:	
  1356  052B  1003               	clrc
  1357  052C  0CF1               	rrf	___wmul@multiplier+1,f
  1358  052D  0CF0               	rrf	___wmul@multiplier,f
  1359  052E  3EFF               	addlw	-1
  1360  052F  1D03               	skipz
  1361  0530  2D2B               	goto	u325
  1362  0531  0870               	movf	___wmul@multiplier,w
  1363  0532  0471               	iorwf	___wmul@multiplier+1,w
  1364  0533  1D03               	btfss	3,2
  1365  0534  2D1B               	goto	l682
  1366  0535  0875               	movf	___wmul@product+1,w
  1367  0536  00F1               	movwf	?___wmul+1
  1368  0537  0874               	movf	___wmul@product,w
  1369  0538  00F0               	movwf	?___wmul
  1370  0539  0008               	return
  1371  053A                     __end_of___wmul:	
  1372                           
  1373                           	psect	text6
  1374  05CA                     __ptext6:	
  1375 ;; *************** function ___awdiv *****************
  1376 ;; Defined at:
  1377 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\awdiv.c"
  1378 ;; Parameters:    Size  Location     Type
  1379 ;;  divisor         2    4[BANK0 ] int 
  1380 ;;  dividend        2    6[BANK0 ] int 
  1381 ;; Auto vars:     Size  Location     Type
  1382 ;;  quotient        2   10[BANK0 ] int 
  1383 ;;  sign            1    9[BANK0 ] unsigned char 
  1384 ;;  counter         1    8[BANK0 ] unsigned char 
  1385 ;; Return value:  Size  Location     Type
  1386 ;;                  2    4[BANK0 ] int 
  1387 ;; Registers used:
  1388 ;;		wreg, status,2, status,0
  1389 ;; Tracked objects:
  1390 ;;		On entry : 0/0
  1391 ;;		On exit  : 0/0
  1392 ;;		Unchanged: 0/0
  1393 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1394 ;;      Params:         0       4       0       0
  1395 ;;      Locals:         0       4       0       0
  1396 ;;      Temps:          1       0       0       0
  1397 ;;      Totals:         1       8       0       0
  1398 ;;Total ram usage:        9 bytes
  1399 ;; Hardware stack levels used:    1
  1400 ;; This function calls:
  1401 ;;		Nothing
  1402 ;; This function is called by:
  1403 ;;		_intToArray
  1404 ;;		_escribirSalida
  1405 ;; This function uses a non-reentrant model
  1406 ;;
  1407                           
  1408                           
  1409                           ;psect for function ___awdiv
  1410  05CA                     ___awdiv:	
  1411                           
  1412                           ;incstack = 0
  1413                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  1414  05CA  1283               	bcf	3,5	;RP0=0, select bank0
  1415  05CB  1303               	bcf	3,6	;RP1=0, select bank0
  1416  05CC  01A9               	clrf	___awdiv@sign
  1417  05CD  1FA5               	btfss	___awdiv@divisor+1,7
  1418  05CE  2DD6               	goto	l714
  1419  05CF  09A4               	comf	___awdiv@divisor,f
  1420  05D0  09A5               	comf	___awdiv@divisor+1,f
  1421  05D1  0AA4               	incf	___awdiv@divisor,f
  1422  05D2  1903               	skipnz
  1423  05D3  0AA5               	incf	___awdiv@divisor+1,f
  1424  05D4  01A9               	clrf	___awdiv@sign
  1425  05D5  0AA9               	incf	___awdiv@sign,f
  1426  05D6                     l714:	
  1427  05D6  1FA7               	btfss	___awdiv@dividend+1,7
  1428  05D7  2DE1               	goto	l720
  1429  05D8  09A6               	comf	___awdiv@dividend,f
  1430  05D9  09A7               	comf	___awdiv@dividend+1,f
  1431  05DA  0AA6               	incf	___awdiv@dividend,f
  1432  05DB  1903               	skipnz
  1433  05DC  0AA7               	incf	___awdiv@dividend+1,f
  1434  05DD  3001               	movlw	1
  1435  05DE  00FB               	movwf	??___awdiv
  1436  05DF  087B               	movf	??___awdiv,w
  1437  05E0  06A9               	xorwf	___awdiv@sign,f
  1438  05E1                     l720:	
  1439  05E1  01AA               	clrf	___awdiv@quotient
  1440  05E2  01AB               	clrf	___awdiv@quotient+1
  1441  05E3  0824               	movf	___awdiv@divisor,w
  1442  05E4  0425               	iorwf	___awdiv@divisor+1,w
  1443  05E5  1903               	btfsc	3,2
  1444  05E6  2E18               	goto	l742
  1445  05E7  01A8               	clrf	___awdiv@counter
  1446  05E8  0AA8               	incf	___awdiv@counter,f
  1447  05E9                     l730:	
  1448  05E9  1BA5               	btfsc	___awdiv@divisor+1,7
  1449  05EA  2DF7               	goto	l732
  1450  05EB  3001               	movlw	1
  1451  05EC                     u385:	
  1452  05EC  1003               	clrc
  1453  05ED  0DA4               	rlf	___awdiv@divisor,f
  1454  05EE  0DA5               	rlf	___awdiv@divisor+1,f
  1455  05EF  3EFF               	addlw	-1
  1456  05F0  1D03               	skipz
  1457  05F1  2DEC               	goto	u385
  1458  05F2  3001               	movlw	1
  1459  05F3  00FB               	movwf	??___awdiv
  1460  05F4  087B               	movf	??___awdiv,w
  1461  05F5  07A8               	addwf	___awdiv@counter,f
  1462  05F6  2DE9               	goto	l730
  1463  05F7                     l732:	
  1464  05F7  3001               	movlw	1
  1465  05F8                     u405:	
  1466  05F8  1003               	clrc
  1467  05F9  0DAA               	rlf	___awdiv@quotient,f
  1468  05FA  0DAB               	rlf	___awdiv@quotient+1,f
  1469  05FB  3EFF               	addlw	-1
  1470  05FC  1D03               	skipz
  1471  05FD  2DF8               	goto	u405
  1472  05FE  0825               	movf	___awdiv@divisor+1,w
  1473  05FF  0227               	subwf	___awdiv@dividend+1,w
  1474  0600  1D03               	skipz
  1475  0601  2E04               	goto	u415
  1476  0602  0824               	movf	___awdiv@divisor,w
  1477  0603  0226               	subwf	___awdiv@dividend,w
  1478  0604                     u415:	
  1479  0604  1C03               	skipc
  1480  0605  2E0D               	goto	l738
  1481  0606  0824               	movf	___awdiv@divisor,w
  1482  0607  02A6               	subwf	___awdiv@dividend,f
  1483  0608  0825               	movf	___awdiv@divisor+1,w
  1484  0609  1C03               	skipc
  1485  060A  03A7               	decf	___awdiv@dividend+1,f
  1486  060B  02A7               	subwf	___awdiv@dividend+1,f
  1487  060C  142A               	bsf	___awdiv@quotient,0
  1488  060D                     l738:	
  1489  060D  3001               	movlw	1
  1490  060E                     u425:	
  1491  060E  1003               	clrc
  1492  060F  0CA5               	rrf	___awdiv@divisor+1,f
  1493  0610  0CA4               	rrf	___awdiv@divisor,f
  1494  0611  3EFF               	addlw	-1
  1495  0612  1D03               	skipz
  1496  0613  2E0E               	goto	u425
  1497  0614  3001               	movlw	1
  1498  0615  02A8               	subwf	___awdiv@counter,f
  1499  0616  1D03               	btfss	3,2
  1500  0617  2DF7               	goto	l732
  1501  0618                     l742:	
  1502  0618  0829               	movf	___awdiv@sign,w
  1503  0619  1903               	btfsc	3,2
  1504  061A  2E20               	goto	l746
  1505  061B  09AA               	comf	___awdiv@quotient,f
  1506  061C  09AB               	comf	___awdiv@quotient+1,f
  1507  061D  0AAA               	incf	___awdiv@quotient,f
  1508  061E  1903               	skipnz
  1509  061F  0AAB               	incf	___awdiv@quotient+1,f
  1510  0620                     l746:	
  1511  0620  082B               	movf	___awdiv@quotient+1,w
  1512  0621  00A5               	movwf	?___awdiv+1
  1513  0622  082A               	movf	___awdiv@quotient,w
  1514  0623  00A4               	movwf	?___awdiv
  1515  0624  0008               	return
  1516  0625                     __end_of___awdiv:	
  1517  007E                     btemp	set	126	;btemp
  1518  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        20
    BSS         2
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     68      70
    BANK1            80      0      20
    BANK2            48      0       0

Pointer List with Targets:

    escribirSalida@arreglo	PTR int  size(2) Largest target is 512
		 -> RAM(DATA[512]), 


Critical Paths under _main in COMMON

    _intToArray->___awdiv
    _escribirSalida->___awdiv
    _powKase->___wmul
    ___awdiv->_powKase

Critical Paths under _main in BANK0

    _main->_escribirSalida
    _intToArray->___awdiv
    _escribirSalida->_intToArray
    ___awdiv->_powKase

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0    5114
                                             12 COMMON     2     2      0
                                             66 BANK0      2     2      0
                     _escribirSalida
                         _intToArray
                    _resetearSalidas
 ---------------------------------------------------------------------------------
 (1) _resetearSalidas                                      5     3      2     121
                                              0 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (1) _intToArray                                          21    19      2    2359
                                             12 BANK0     21    19      2
                            ___awdiv
                             ___wmul
                            _powKase
 ---------------------------------------------------------------------------------
 (1) _escribirSalida                                      33    31      2    2611
                                             33 BANK0     33    31      2
                            ___awdiv
                             ___wmul
                         _intToArray (ARG)
                            _powKase
 ---------------------------------------------------------------------------------
 (2) _powKase                                              9     5      4     970
                                              6 COMMON     5     1      4
                                              0 BANK0      4     4      0
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     410
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4     512
                                             11 COMMON     1     1      0
                                              4 BANK0      8     4      4
                            _powKase (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _escribirSalida
     ___awdiv
       _powKase (ARG)
         ___wmul
     ___wmul
     _intToArray (ARG)
       ___awdiv
         _powKase (ARG)
           ___wmul
       ___wmul
       _powKase
         ___wmul
     _powKase (ARG)
       ___wmul
   _intToArray
     ___awdiv
       _powKase (ARG)
         ___wmul
     ___wmul
     _powKase
       ___wmul
   _resetearSalidas

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               30      0       0       9        0.0%
BITBANK2            30      0       0       8        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0      14       7       25.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     44      46       3       87.5%
BITBANK0            50      0       0       5        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      68      10        0.0%
ABS                  0      0      68       4        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA              80      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Wed Sep 13 15:03:15 2017

                   __CFG_CP$OFF 0000                              l31 0556                              l42 07CD  
                  ___awdiv@sign 0029             ___wmul@multiplicand 0072         __size_of_escribirSalida 010B  
                           l142 0523                             l702 058A                             l720 05E1  
                           l730 05E9                             l714 05D6                             l732 05F7  
                           l742 0618                             l814 0796                             l816 07AC  
                           l824 07C1                             l808 0787                             l832 05A8  
                           l746 0620                             l738 060D                             l682 051B  
                           l754 053C                             l766 0644                             l776 06BE  
                           l788 06DD                             l798 070D                             _RB0 0030  
                           _RB1 0031                             _RB2 0032                             _RB3 0033  
                           u315 0524                             u405 05F8                             u325 052B  
                           u415 0604                             u425 060E                             u345 056F  
                  __CFG_CPD$OFF 0000                             u515 070B                             u540 07A9  
                           u525 0785                             u535 0794                             u455 0546  
                           u385 05EC                             u475 0642                             u565 07BF  
                           u485 06BC                             u597 05BC                             fsr0 0004  
                           indf 0000                    __CFG_LVP$OFF 0000                            _main 0591  
                          btemp 007E                   __CFG_BOREN$ON 0000                            start 0000  
                         ?_main 0070                 __end_of___awdiv 0625                   __CFG_WDTE$OFF 0000  
                         _CMCON 001F                 ___awdiv@divisor 0024                 ___awdiv@counter 0028  
                         _TRISA 0085                           _TRISB 0086                 __end_of_powKase 0591  
                         status 0003                           wtemp0 007E                  __CFG_MCLRE$OFF 0000  
               __initialization 07D0                ?_resetearSalidas 0070                    __end_of_main 05CA  
         escribirSalida@arreglo 0041                          ??_main 007C                     intToArray@i 003F  
              ___awdiv@dividend 0026                  __CFG_PWRTE$OFF 0000                          ___wmul 0519  
                     ??___awdiv 007B                ___awdiv@quotient 002A                  _escribirSalida 06C5  
                     ??_powKase 007A         __end_of__initialization 07FE                  __pcstackCOMMON 0070  
                  __pidataBANK1 0505          __end_of_escribirSalida 07D0                      __pbssBANK0 0064  
                    __pmaintext 0591                         ?___wmul 0070                 ?_escribirSalida 0041  
                  _codificacion 00A0                      _intToArray 0625                         ___awdiv 05CA  
               __size_of___wmul 0021                  _intToArray$452 0031                         __ptext1 053A  
                       __ptext2 0625                         __ptext3 06C5                         __ptext4 055B  
                   powKase@base 0076                         __ptext5 0519                         __ptext6 05CA  
                       _powKase 055B            end_of_initialization 07FE                powKase@exponente 0078  
      __size_of_resetearSalidas 0021              _escribirSalida$453 0048                powKase@resultado 0020  
                   ?_intToArray 002C                  __end_of___wmul 053A             start_initialization 07D0  
          escribirSalida@numero 005A                intToArray@numero 002C                ??_escribirSalida 0043  
                      ??___wmul 0074                     __pdataBANK1 00A0                       ___latbits 0000  
                 __pcstackBANK0 0020             __size_of_intToArray 00A0               ??_resetearSalidas 0072  
            escribirSalida@i_52 0060         escribirSalida@resultado 004A                        ?___awdiv 0024  
              resetearSalidas@i 0073                        ?_powKase 0076                  ___wmul@product 0074  
           intToArray@resultado 0033               ___wmul@multiplier 0070             main@palabaraBinaria 0062  
                  ??_intToArray 002E                __size_of___awdiv 005B                __size_of_powKase 0036  
            __end_of_intToArray 06C5                        _contador 0064                   __size_of_main 0039  
               _resetearSalidas 053A                        powKase@i 0022  resetearSalidas@cantidadSalidas 0070  
               escribirSalida@i 005C                 escribirSalida@j 005E              __CFG_FOSC$INTOSCIO 0000  
       __end_of_resetearSalidas 055B  
