

Microchip Technology PIC LITE Macro Assembler V1.42 build -159332390 
                                                                                               Fri Nov 03 08:13:56 2017

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	16F628A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	maintext,global,class=CODE,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,delta=2
    15                           	psect	text2,local,class=CODE,merge=1,delta=2
    16                           	psect	intentry,global,class=CODE,delta=2
    17                           	psect	text3,local,class=CODE,merge=1,delta=2
    18                           	psect	text4,local,class=CODE,merge=1,delta=2,group=2
    19                           	psect	text5,local,class=CODE,merge=1,delta=2,group=2
    20                           	psect	text6,local,class=CODE,merge=1,delta=2,group=2
    21                           	dabs	1,0x7E,2
    22  0000                     
    23                           ; Version 1.42
    24                           ; Generated 13/04/2017 GMT
    25                           ; 
    26                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    27                           ; All rights reserved.
    28                           ; 
    29                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    30                           ; 
    31                           ; Redistribution and use in source and binary forms, with or without modification, are
    32                           ; permitted provided that the following conditions are met:
    33                           ; 
    34                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    35                           ;        conditions and the following disclaimer.
    36                           ; 
    37                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    38                           ;        of conditions and the following disclaimer in the documentation and/or other
    39                           ;        materials provided with the distribution.
    40                           ; 
    41                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    42                           ;        software without specific prior written permission.
    43                           ; 
    44                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    45                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    46                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    47                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    48                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    49                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    50                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    51                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    52                           ; 
    53                           ; 
    54                           ; Code-generator required, PIC16F628A Definitions
    55                           ; 
    56                           ; SFR Addresses
    57  0000                     	;# 
    58  0001                     	;# 
    59  0002                     	;# 
    60  0003                     	;# 
    61  0004                     	;# 
    62  0005                     	;# 
    63  0006                     	;# 
    64  000A                     	;# 
    65  000B                     	;# 
    66  000C                     	;# 
    67  000E                     	;# 
    68  000E                     	;# 
    69  000F                     	;# 
    70  0010                     	;# 
    71  0011                     	;# 
    72  0012                     	;# 
    73  0015                     	;# 
    74  0015                     	;# 
    75  0016                     	;# 
    76  0017                     	;# 
    77  0018                     	;# 
    78  0019                     	;# 
    79  001A                     	;# 
    80  001F                     	;# 
    81  0081                     	;# 
    82  0085                     	;# 
    83  0086                     	;# 
    84  008C                     	;# 
    85  008E                     	;# 
    86  0092                     	;# 
    87  0098                     	;# 
    88  0099                     	;# 
    89  009A                     	;# 
    90  009B                     	;# 
    91  009C                     	;# 
    92  009D                     	;# 
    93  009F                     	;# 
    94                           
    95                           	psect	idataBANK0
    96  0382                     __pidataBANK0:	
    97                           
    98                           ;initializer for _codificacion
    99  0382  347E               	retlw	126
   100  0383  3400               	retlw	0
   101  0384  3422               	retlw	34
   102  0385  3400               	retlw	0
   103  0386  34BC               	retlw	188
   104  0387  3400               	retlw	0
   105  0388  34B6               	retlw	182
   106  0389  3400               	retlw	0
   107  038A  34E2               	retlw	226
   108  038B  3400               	retlw	0
   109  038C  34D6               	retlw	214
   110  038D  3400               	retlw	0
   111  038E  34DE               	retlw	222
   112  038F  3400               	retlw	0
   113  0390  3432               	retlw	50
   114  0391  3400               	retlw	0
   115  0392  34FE               	retlw	254
   116  0393  3400               	retlw	0
   117  0394  34F2               	retlw	242
   118  0395  3400               	retlw	0
   119  0010                     _T1CONbits	set	16
   120  001F                     _CMCON	set	31
   121  000E                     _TMR1L	set	14
   122  000F                     _TMR1H	set	15
   123  000C                     _PIR1bits	set	12
   124  0001                     _TMR0	set	1
   125  000B                     _INTCONbits	set	11
   126  0029                     _RA1	set	41
   127  0028                     _RA0	set	40
   128  0034                     _RB4	set	52
   129  0033                     _RB3	set	51
   130  0031                     _RB1	set	49
   131  0032                     _RB2	set	50
   132  008C                     _PIE1bits	set	140
   133  0081                     _OPTION_REGbits	set	129
   134  0085                     _TRISA	set	133
   135  0086                     _TRISB	set	134
   136                           
   137                           ; #config settings
   138  0000                     
   139                           	psect	cinit
   140  0011                     start_initialization:	
   141  0011                     __initialization:	
   142                           
   143                           ; Initialize objects allocated to BANK0
   144  0011  2382               	fcall	__pidataBANK0	;fetch initializer
   145  0012  00CC               	movwf	__pdataBANK0& (0+127)
   146  0013  2383               	fcall	__pidataBANK0+1	;fetch initializer
   147  0014  00CD               	movwf	(__pdataBANK0+1)& (0+127)
   148  0015  2384               	fcall	__pidataBANK0+2	;fetch initializer
   149  0016  00CE               	movwf	(__pdataBANK0+2)& (0+127)
   150  0017  2385               	fcall	__pidataBANK0+3	;fetch initializer
   151  0018  00CF               	movwf	(__pdataBANK0+3)& (0+127)
   152  0019  2386               	fcall	__pidataBANK0+4	;fetch initializer
   153  001A  00D0               	movwf	(__pdataBANK0+4)& (0+127)
   154  001B  2387               	fcall	__pidataBANK0+5	;fetch initializer
   155  001C  00D1               	movwf	(__pdataBANK0+5)& (0+127)
   156  001D  2388               	fcall	__pidataBANK0+6	;fetch initializer
   157  001E  00D2               	movwf	(__pdataBANK0+6)& (0+127)
   158  001F  2389               	fcall	__pidataBANK0+7	;fetch initializer
   159  0020  00D3               	movwf	(__pdataBANK0+7)& (0+127)
   160  0021  238A               	fcall	__pidataBANK0+8	;fetch initializer
   161  0022  00D4               	movwf	(__pdataBANK0+8)& (0+127)
   162  0023  238B               	fcall	__pidataBANK0+9	;fetch initializer
   163  0024  00D5               	movwf	(__pdataBANK0+9)& (0+127)
   164  0025  238C               	fcall	__pidataBANK0+10	;fetch initializer
   165  0026  00D6               	movwf	(__pdataBANK0+10)& (0+127)
   166  0027  238D               	fcall	__pidataBANK0+11	;fetch initializer
   167  0028  00D7               	movwf	(__pdataBANK0+11)& (0+127)
   168  0029  238E               	fcall	__pidataBANK0+12	;fetch initializer
   169  002A  00D8               	movwf	(__pdataBANK0+12)& (0+127)
   170  002B  238F               	fcall	__pidataBANK0+13	;fetch initializer
   171  002C  00D9               	movwf	(__pdataBANK0+13)& (0+127)
   172  002D  2390               	fcall	__pidataBANK0+14	;fetch initializer
   173  002E  00DA               	movwf	(__pdataBANK0+14)& (0+127)
   174  002F  2391               	fcall	__pidataBANK0+15	;fetch initializer
   175  0030  00DB               	movwf	(__pdataBANK0+15)& (0+127)
   176  0031  2392               	fcall	__pidataBANK0+16	;fetch initializer
   177  0032  00DC               	movwf	(__pdataBANK0+16)& (0+127)
   178  0033  2393               	fcall	__pidataBANK0+17	;fetch initializer
   179  0034  00DD               	movwf	(__pdataBANK0+17)& (0+127)
   180  0035  2394               	fcall	__pidataBANK0+18	;fetch initializer
   181  0036  00DE               	movwf	(__pdataBANK0+18)& (0+127)
   182  0037  2395               	fcall	__pidataBANK0+19	;fetch initializer
   183  0038  00DF               	movwf	(__pdataBANK0+19)& (0+127)
   184                           
   185                           ; Clear objects allocated to BANK1
   186  0039  1383               	bcf	3,7	;select IRP bank0
   187  003A  30A0               	movlw	low __pbssBANK1
   188  003B  0084               	movwf	4
   189  003C  30B0               	movlw	low (__pbssBANK1+16)
   190  003D  2396               	fcall	clear_ram0
   191                           
   192                           ; Clear objects allocated to BANK0
   193  003E  3060               	movlw	low __pbssBANK0
   194  003F  0084               	movwf	4
   195  0040  306E               	movlw	low (__pbssBANK0+14)
   196  0041  2396               	fcall	clear_ram0
   197  0042                     end_of_initialization:	
   198                           ;End of C runtime variable initialization code
   199                           
   200  0042                     __end_of__initialization:	
   201  0042  0183               	clrf	3
   202  0043  2AA5               	ljmp	_main	;jump to C main() function
   203                           
   204                           	psect	bssBANK0
   205  0060                     __pbssBANK0:	
   206  0060                     _velocidad:	
   207  0060                     	ds	4
   208  0064                     _contador:	
   209  0064                     	ds	4
   210  0068                     _pwm:	
   211  0068                     	ds	2
   212  006A                     _contadorTemporizador:	
   213  006A                     	ds	2
   214  006C                     _contadorLed:	
   215  006C                     	ds	2
   216                           
   217                           	psect	dataBANK0
   218  004C                     __pdataBANK0:	
   219  004C                     _codificacion:	
   220  004C                     	ds	20
   221                           
   222                           	psect	bssBANK1
   223  00A0                     __pbssBANK1:	
   224  00A0                     escribirSalida@F803:	
   225  00A0                     	ds	16
   226                           
   227                           	psect	clrtext
   228  0396                     clear_ram0:	
   229                           ;	Called with FSR containing the base address, and
   230                           ;	W with the last address+1
   231                           
   232  0396  0064               	clrwdt	;clear the watchdog before getting into this loop
   233  0397                     clrloop0:	
   234  0397  0180               	clrf	0	;clear RAM location pointed to by FSR
   235  0398  0A84               	incf	4,f	;increment pointer
   236  0399  0604               	xorwf	4,w	;XOR with final address
   237  039A  1903               	btfsc	3,2	;have we reached the end yet?
   238  039B  3400               	retlw	0	;all done for this memory range, return
   239  039C  0604               	xorwf	4,w	;XOR again to restore value
   240  039D  2B97               	goto	clrloop0	;do the next byte
   241                           
   242                           	psect	cstackBANK1
   243  00B0                     __pcstackBANK1:	
   244  00B0                     ?_resetearSalidas:	
   245  00B0                     resetearSalidas@cantidadSalidas:	
   246                           ; 1 bytes @ 0x0
   247                           
   248                           
   249                           ; 2 bytes @ 0x0
   250  00B0                     	ds	2
   251  00B2                     ??_resetearSalidas:	
   252                           
   253                           ; 1 bytes @ 0x2
   254  00B2                     	ds	1
   255  00B3                     resetearSalidas@i:	
   256                           
   257                           ; 2 bytes @ 0x3
   258  00B3                     	ds	2
   259  00B5                     ??_main:	
   260                           
   261                           ; 1 bytes @ 0x5
   262  00B5                     	ds	3
   263  00B8                     main@palabaraBinaria:	
   264                           
   265                           ; 2 bytes @ 0x8
   266  00B8                     	ds	2
   267                           
   268                           	psect	cstackCOMMON
   269  0070                     __pcstackCOMMON:	
   270  0070                     ?_escribirSalida:	
   271  0070                     ?_enconder:	
   272                           ; 1 bytes @ 0x0
   273                           
   274  0070                     ?_main:	
   275                           ; 1 bytes @ 0x0
   276                           
   277  0070                     ?___wmul:	
   278                           ; 1 bytes @ 0x0
   279                           
   280  0070                     ?___lmul:	
   281                           ; 2 bytes @ 0x0
   282                           
   283  0070                     ?___lldiv:	
   284                           ; 4 bytes @ 0x0
   285                           
   286  0070                     ___wmul@multiplier:	
   287                           ; 4 bytes @ 0x0
   288                           
   289  0070                     ___lmul@multiplier:	
   290                           ; 2 bytes @ 0x0
   291                           
   292  0070                     ___lldiv@divisor:	
   293                           ; 4 bytes @ 0x0
   294                           
   295                           
   296                           ; 4 bytes @ 0x0
   297  0070                     	ds	2
   298  0072                     ___wmul@multiplicand:	
   299                           
   300                           ; 2 bytes @ 0x2
   301  0072                     	ds	2
   302  0074                     ??___wmul:	
   303  0074                     ___wmul@product:	
   304                           ; 1 bytes @ 0x4
   305                           
   306  0074                     ___lmul@multiplicand:	
   307                           ; 2 bytes @ 0x4
   308                           
   309  0074                     ___lldiv@dividend:	
   310                           ; 4 bytes @ 0x4
   311                           
   312                           
   313                           ; 4 bytes @ 0x4
   314  0074                     	ds	4
   315  0078                     ??___lmul:	
   316  0078                     ??___lldiv:	
   317                           ; 1 bytes @ 0x8
   318                           
   319                           
   320                           ; 1 bytes @ 0x8
   321  0078                     	ds	1
   322  0079                     ___lmul@product:	
   323  0079                     ___lldiv@quotient:	
   324                           ; 4 bytes @ 0x9
   325                           
   326                           
   327                           ; 4 bytes @ 0x9
   328  0079                     	ds	4
   329  007D                     ___lldiv@counter:	
   330                           
   331                           ; 1 bytes @ 0xD
   332  007D                     	ds	1
   333                           
   334                           	psect	cstackBANK0
   335  0020                     __pcstackBANK0:	
   336  0020                     ??_escribirSalida:	
   337                           
   338                           ; 1 bytes @ 0x0
   339  0020                     	ds	6
   340  0026                     escribirSalida@resultado:	
   341                           
   342                           ; 16 bytes @ 0x6
   343  0026                     	ds	16
   344  0036                     escribirSalida@velocidadUnidad:	
   345                           
   346                           ; 2 bytes @ 0x16
   347  0036                     	ds	2
   348  0038                     escribirSalida@velocidadDecena:	
   349                           
   350                           ; 2 bytes @ 0x18
   351  0038                     	ds	2
   352  003A                     escribirSalida@numero:	
   353                           
   354                           ; 2 bytes @ 0x1A
   355  003A                     	ds	2
   356  003C                     escribirSalida@i_182:	
   357                           
   358                           ; 2 bytes @ 0x1C
   359  003C                     	ds	2
   360  003E                     escribirSalida@i_184:	
   361                           
   362                           ; 2 bytes @ 0x1E
   363  003E                     	ds	2
   364  0040                     escribirSalida@i:	
   365                           
   366                           ; 2 bytes @ 0x20
   367  0040                     	ds	2
   368  0042                     escribirSalida@i_183:	
   369                           
   370                           ; 2 bytes @ 0x22
   371  0042                     	ds	2
   372  0044                     ??_enconder:	
   373                           
   374                           ; 1 bytes @ 0x24
   375  0044                     	ds	8
   376                           
   377                           	psect	maintext
   378  02A5                     __pmaintext:	
   379 ;;
   380 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   381 ;;
   382 ;; *************** function _main *****************
   383 ;; Defined at:
   384 ;;		line 128 in file "main.c"
   385 ;; Parameters:    Size  Location     Type
   386 ;;		None
   387 ;; Auto vars:     Size  Location     Type
   388 ;;  palabaraBina    2    8[BANK1 ] int 
   389 ;; Return value:  Size  Location     Type
   390 ;;                  1    wreg      void 
   391 ;; Registers used:
   392 ;;		wreg, status,2, status,0, pclath, cstack
   393 ;; Tracked objects:
   394 ;;		On entry : B00/0
   395 ;;		On exit  : 0/0
   396 ;;		Unchanged: 0/0
   397 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   398 ;;      Params:         0       0       0       0
   399 ;;      Locals:         0       0       2       0
   400 ;;      Temps:          0       0       3       0
   401 ;;      Totals:         0       0       5       0
   402 ;;Total ram usage:        5 bytes
   403 ;; Hardware stack levels required when called:    4
   404 ;; This function calls:
   405 ;;		_resetearSalidas
   406 ;; This function is called by:
   407 ;;		Startup code after reset
   408 ;; This function uses a non-reentrant model
   409 ;;
   410                           
   411                           
   412                           ;psect for function _main
   413  02A5                     _main:	
   414                           
   415                           ;main.c: 130: CMCON = 7;
   416                           
   417                           ;incstack = 0
   418                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   419  02A5  3007               	movlw	7
   420  02A6  1283               	bcf	3,5	;RP0=0, select bank0
   421  02A7  1303               	bcf	3,6	;RP1=0, select bank0
   422  02A8  009F               	movwf	31	;volatile
   423                           
   424                           ;main.c: 131: TRISB = 0b00100001;
   425  02A9  3021               	movlw	33
   426  02AA  1683               	bsf	3,5	;RP0=1, select bank1
   427  02AB  1303               	bcf	3,6	;RP1=0, select bank1
   428  02AC  0086               	movwf	6	;volatile
   429                           
   430                           ;main.c: 132: TRISA = 0b00000010;
   431  02AD  3002               	movlw	2
   432  02AE  0085               	movwf	5	;volatile
   433                           
   434                           ;main.c: 134: RA0 = 0;
   435  02AF  1283               	bcf	3,5	;RP0=0, select bank0
   436  02B0  1303               	bcf	3,6	;RP1=0, select bank0
   437  02B1  1005               	bcf	5,0	;volatile
   438                           
   439                           ;main.c: 136: INTCONbits.GIE = 1;
   440  02B2  178B               	bsf	11,7	;volatile
   441                           
   442                           ;main.c: 137: INTCONbits.PEIE = 1;
   443  02B3  170B               	bsf	11,6	;volatile
   444                           
   445                           ;main.c: 138: INTCONbits.T0IE = 1;
   446  02B4  168B               	bsf	11,5	;volatile
   447                           
   448                           ;main.c: 139: INTCONbits.INTE = 1;
   449  02B5  160B               	bsf	11,4	;volatile
   450                           
   451                           ;main.c: 140: INTCONbits.T0IF = 0;
   452  02B6  110B               	bcf	11,2	;volatile
   453                           
   454                           ;main.c: 141: INTCONbits.INTF = 0;
   455  02B7  108B               	bcf	11,1	;volatile
   456                           
   457                           ;main.c: 143: OPTION_REGbits.T0CS = 0;
   458  02B8  1683               	bsf	3,5	;RP0=1, select bank1
   459  02B9  1303               	bcf	3,6	;RP1=0, select bank1
   460  02BA  1281               	bcf	1,5	;volatile
   461                           
   462                           ;main.c: 144: OPTION_REGbits.T0SE = 0;
   463  02BB  1201               	bcf	1,4	;volatile
   464                           
   465                           ;main.c: 146: OPTION_REGbits.PSA = 0;
   466  02BC  1181               	bcf	1,3	;volatile
   467                           
   468                           ;main.c: 148: OPTION_REGbits.PS0 = 1;
   469  02BD  1401               	bsf	1,0	;volatile
   470                           
   471                           ;main.c: 149: OPTION_REGbits.PS1 = 1;
   472  02BE  1481               	bsf	1,1	;volatile
   473                           
   474                           ;main.c: 150: OPTION_REGbits.PS2 = 1;
   475  02BF  1501               	bsf	1,2	;volatile
   476                           
   477                           ;main.c: 152: PIE1bits.TMR1IE = 1;
   478  02C0  140C               	bsf	12,0	;volatile
   479                           
   480                           ;main.c: 153: PIR1bits.TMR1IF = 0;
   481  02C1  1283               	bcf	3,5	;RP0=0, select bank0
   482  02C2  1303               	bcf	3,6	;RP1=0, select bank0
   483  02C3  100C               	bcf	12,0	;volatile
   484                           
   485                           ;main.c: 156: T1CONbits.T1CKPS1 = 0;
   486  02C4  1290               	bcf	16,5	;volatile
   487                           
   488                           ;main.c: 157: T1CONbits.T1CKPS0 = 1;
   489  02C5  1610               	bsf	16,4	;volatile
   490                           
   491                           ;main.c: 158: T1CONbits.T1OSCEN = 1;
   492  02C6  1590               	bsf	16,3	;volatile
   493                           
   494                           ;main.c: 159: T1CONbits.TMR1CS = 0;
   495  02C7  1090               	bcf	16,1	;volatile
   496                           
   497                           ;main.c: 160: T1CONbits.TMR1ON = 1;
   498  02C8  1410               	bsf	16,0	;volatile
   499                           
   500                           ;main.c: 161: T1CONbits.nT1SYNC = 1;
   501  02C9  1510               	bsf	16,2	;volatile
   502                           
   503                           ;main.c: 162: TMR1H = 255;
   504  02CA  30FF               	movlw	255
   505  02CB  008F               	movwf	15	;volatile
   506                           
   507                           ;main.c: 164: TMR1L = 6;
   508  02CC  3006               	movlw	6
   509  02CD  008E               	movwf	14	;volatile
   510                           
   511                           ;main.c: 166: TMR0 = 12;
   512  02CE  300C               	movlw	12
   513  02CF  0081               	movwf	1	;volatile
   514                           
   515                           ;main.c: 168: int palabaraBinaria = 16;
   516  02D0  3010               	movlw	16
   517  02D1  1683               	bsf	3,5	;RP0=1, select bank1
   518  02D2  1303               	bcf	3,6	;RP1=0, select bank1
   519  02D3  00B8               	movwf	main@palabaraBinaria^(0+128)
   520  02D4  3000               	movlw	0
   521  02D5  00B9               	movwf	(main@palabaraBinaria^(0+128)+1)
   522                           
   523                           ;main.c: 170: resetearSalidas(palabaraBinaria);
   524  02D6  0839               	movf	(main@palabaraBinaria+1)^(0+128),w
   525  02D7  00B1               	movwf	(resetearSalidas@cantidadSalidas+1)^(0+128)
   526  02D8  0838               	movf	main@palabaraBinaria^(0+128),w
   527  02D9  00B0               	movwf	resetearSalidas@cantidadSalidas^(0+128)
   528  02DA  233C               	fcall	_resetearSalidas
   529  02DB                     l1010:	
   530                           ;main.c: 171: while (1)
   531                           
   532                           
   533                           ;main.c: 172: {
   534                           ;main.c: 173: if(RA1)
   535  02DB  1283               	bcf	3,5	;RP0=0, select bank0
   536  02DC  1303               	bcf	3,6	;RP1=0, select bank0
   537  02DD  1C85               	btfss	5,1	;volatile
   538  02DE  2ADB               	goto	l1010
   539                           
   540                           ;main.c: 174: {
   541                           ;main.c: 175: pwm += 50;
   542  02DF  3032               	movlw	50
   543  02E0  07E8               	addwf	_pwm,f
   544  02E1  1803               	skipnc
   545  02E2  0AE9               	incf	_pwm+1,f
   546  02E3  3000               	movlw	0
   547  02E4  07E9               	addwf	_pwm+1,f
   548                           
   549                           ;main.c: 176: if(pwm >= 200)
   550  02E5  3000               	movlw	0
   551  02E6  0269               	subwf	_pwm+1,w
   552  02E7  30C8               	movlw	200
   553  02E8  1903               	skipnz
   554  02E9  0268               	subwf	_pwm,w
   555  02EA  1C03               	skipc
   556  02EB  2AEE               	goto	l1016
   557                           
   558                           ;main.c: 177: {
   559                           ;main.c: 178: pwm = 0;
   560  02EC  01E8               	clrf	_pwm
   561  02ED  01E9               	clrf	_pwm+1
   562  02EE                     l1016:	
   563                           
   564                           ;main.c: 179: }
   565                           ;main.c: 180: _delay((unsigned long)((200)*(4000000/4000.0)));
   566  02EE  3002               	movlw	2
   567  02EF  1683               	bsf	3,5	;RP0=1, select bank1
   568  02F0  1303               	bcf	3,6	;RP1=0, select bank1
   569  02F1  00B7               	movwf	(??_main^(0+128)+2)
   570  02F2  3004               	movlw	4
   571  02F3  00B6               	movwf	(??_main^(0+128)+1)
   572  02F4  30BA               	movlw	186
   573  02F5  00B5               	movwf	??_main^(0+128)
   574  02F6                     u897:	
   575  02F6  0BB5               	decfsz	??_main^(0+128),f
   576  02F7  2AF6               	goto	u897
   577  02F8  0BB6               	decfsz	(??_main^(0+128)+1),f
   578  02F9  2AF6               	goto	u897
   579  02FA  0BB7               	decfsz	(??_main^(0+128)+2),f
   580  02FB  2AF6               	goto	u897
   581  02FC  2ADB               	goto	l1010
   582  02FD                     __end_of_main:	
   583                           
   584                           	psect	text1
   585  033C                     __ptext1:	
   586 ;; *************** function _resetearSalidas *****************
   587 ;; Defined at:
   588 ;;		line 46 in file "main.c"
   589 ;; Parameters:    Size  Location     Type
   590 ;;  cantidadSali    2    0[BANK1 ] int 
   591 ;; Auto vars:     Size  Location     Type
   592 ;;  i               2    3[BANK1 ] int 
   593 ;; Return value:  Size  Location     Type
   594 ;;                  1    wreg      void 
   595 ;; Registers used:
   596 ;;		wreg, status,2, status,0
   597 ;; Tracked objects:
   598 ;;		On entry : 0/0
   599 ;;		On exit  : 0/0
   600 ;;		Unchanged: 0/0
   601 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   602 ;;      Params:         0       0       2       0
   603 ;;      Locals:         0       0       2       0
   604 ;;      Temps:          0       0       1       0
   605 ;;      Totals:         0       0       5       0
   606 ;;Total ram usage:        5 bytes
   607 ;; Hardware stack levels used:    1
   608 ;; Hardware stack levels required when called:    3
   609 ;; This function calls:
   610 ;;		Nothing
   611 ;; This function is called by:
   612 ;;		_main
   613 ;; This function uses a non-reentrant model
   614 ;;
   615                           
   616                           
   617                           ;psect for function _resetearSalidas
   618  033C                     _resetearSalidas:	
   619                           
   620                           ;main.c: 48: for(int i = 0; i < cantidadSalidas; i = i + 1)
   621                           
   622                           ;incstack = 0
   623                           ; Regs used in _resetearSalidas: [wreg+status,2+status,0]
   624  033C  1683               	bsf	3,5	;RP0=1, select bank1
   625  033D  1303               	bcf	3,6	;RP1=0, select bank1
   626  033E  01B3               	clrf	resetearSalidas@i^(0+128)
   627  033F  01B4               	clrf	(resetearSalidas@i+1)^(0+128)
   628  0340                     l830:	
   629  0340  0834               	movf	(resetearSalidas@i+1)^(0+128),w
   630  0341  3A80               	xorlw	128
   631  0342  00B2               	movwf	??_resetearSalidas^(0+128)
   632  0343  0831               	movf	(resetearSalidas@cantidadSalidas+1)^(0+128),w
   633  0344  3A80               	xorlw	128
   634  0345  0232               	subwf	??_resetearSalidas^(0+128),w
   635  0346  1D03               	skipz
   636  0347  2B4A               	goto	u565
   637  0348  0830               	movf	resetearSalidas@cantidadSalidas^(0+128),w
   638  0349  0233               	subwf	resetearSalidas@i^(0+128),w
   639  034A                     u565:	
   640  034A  1803               	btfsc	3,0
   641  034B  2B5C               	goto	l60
   642                           
   643                           ;main.c: 49: {
   644                           ;main.c: 50: RB2 = 0;
   645  034C  1283               	bcf	3,5	;RP0=0, select bank0
   646  034D  1303               	bcf	3,6	;RP1=0, select bank0
   647  034E  1106               	bcf	6,2	;volatile
   648                           
   649                           ;main.c: 51: RB1 = 1;
   650  034F  1486               	bsf	6,1	;volatile
   651                           
   652                           ;main.c: 52: RB1 = 0;
   653  0350  1086               	bcf	6,1	;volatile
   654  0351  1683               	bsf	3,5	;RP0=1, select bank1
   655  0352  1303               	bcf	3,6	;RP1=0, select bank1
   656  0353  0833               	movf	resetearSalidas@i^(0+128),w
   657  0354  3E01               	addlw	1
   658  0355  00B3               	movwf	resetearSalidas@i^(0+128)
   659  0356  0834               	movf	(resetearSalidas@i+1)^(0+128),w
   660  0357  1803               	skipnc
   661  0358  3E01               	addlw	1
   662  0359  3E00               	addlw	0
   663  035A  00B4               	movwf	(resetearSalidas@i+1)^(0+128)
   664  035B  2B40               	goto	l830
   665  035C                     l60:	
   666                           
   667                           ;main.c: 53: }
   668                           ;main.c: 54: RB3 = 1;
   669  035C  1283               	bcf	3,5	;RP0=0, select bank0
   670  035D  1303               	bcf	3,6	;RP1=0, select bank0
   671  035E  1586               	bsf	6,3	;volatile
   672                           
   673                           ;main.c: 55: RB3 = 0;
   674  035F  1186               	bcf	6,3	;volatile
   675  0360  0008               	return
   676  0361                     __end_of_resetearSalidas:	
   677                           
   678                           	psect	text2
   679  01B3                     __ptext2:	
   680 ;; *************** function _enconder *****************
   681 ;; Defined at:
   682 ;;		line 94 in file "main.c"
   683 ;; Parameters:    Size  Location     Type
   684 ;;		None
   685 ;; Auto vars:     Size  Location     Type
   686 ;;		None
   687 ;; Return value:  Size  Location     Type
   688 ;;                  1    wreg      void 
   689 ;; Registers used:
   690 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   691 ;; Tracked objects:
   692 ;;		On entry : 0/0
   693 ;;		On exit  : 0/0
   694 ;;		Unchanged: 0/0
   695 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   696 ;;      Params:         0       0       0       0
   697 ;;      Locals:         0       0       0       0
   698 ;;      Temps:          0       8       0       0
   699 ;;      Totals:         0       8       0       0
   700 ;;Total ram usage:        8 bytes
   701 ;; Hardware stack levels used:    1
   702 ;; Hardware stack levels required when called:    2
   703 ;; This function calls:
   704 ;;		___lmul
   705 ;;		_escribirSalida
   706 ;; This function is called by:
   707 ;;		Interrupt level 1
   708 ;; This function uses a non-reentrant model
   709 ;;
   710                           
   711                           
   712                           ;psect for function _enconder
   713  01B3                     _enconder:	
   714                           
   715                           ;main.c: 96: if(INTCONbits.INTF == 1)
   716  01B3  1C8B               	btfss	11,1	;volatile
   717  01B4  29EB               	goto	i1l940
   718                           
   719                           ;main.c: 97: {
   720                           ;main.c: 98: INTCONbits.INTF = 0;
   721  01B5  108B               	bcf	11,1	;volatile
   722                           
   723                           ;main.c: 99: contadorLed = contadorLed + 1;
   724  01B6  086C               	movf	_contadorLed,w
   725  01B7  3E01               	addlw	1
   726  01B8  00EC               	movwf	_contadorLed
   727  01B9  086D               	movf	_contadorLed+1,w
   728  01BA  1803               	skipnc
   729  01BB  3E01               	addlw	1
   730  01BC  3E00               	addlw	0
   731  01BD  00ED               	movwf	_contadorLed+1
   732                           
   733                           ;main.c: 100: contador = contador + 1;
   734  01BE  3001               	movlw	1
   735  01BF  00C4               	movwf	??_enconder
   736  01C0  3000               	movlw	0
   737  01C1  00C5               	movwf	??_enconder+1
   738  01C2  3000               	movlw	0
   739  01C3  00C6               	movwf	??_enconder+2
   740  01C4  3000               	movlw	0
   741  01C5  00C7               	movwf	??_enconder+3
   742  01C6  0864               	movf	_contador,w
   743  01C7  07C4               	addwf	??_enconder,f
   744  01C8  0865               	movf	_contador+1,w
   745  01C9  1803               	skipnc
   746  01CA  0F65               	incfsz	_contador+1,w
   747  01CB  29CD               	goto	u80_20
   748  01CC  29CE               	goto	u80_21
   749  01CD                     u80_20:	
   750  01CD  07C5               	addwf	??_enconder+1,f
   751  01CE                     u80_21:	
   752  01CE  0866               	movf	_contador+2,w
   753  01CF  1803               	skipnc
   754  01D0  0F66               	incfsz	_contador+2,w
   755  01D1  29D3               	goto	u80_22
   756  01D2  29D4               	goto	u80_23
   757  01D3                     u80_22:	
   758  01D3  07C6               	addwf	??_enconder+2,f
   759  01D4                     u80_23:	
   760  01D4  0867               	movf	_contador+3,w
   761  01D5  1803               	skipnc
   762  01D6  0A67               	incf	_contador+3,w
   763  01D7  07C7               	addwf	??_enconder+3,f
   764  01D8  0847               	movf	??_enconder+3,w
   765  01D9  00E7               	movwf	_contador+3
   766  01DA  0846               	movf	??_enconder+2,w
   767  01DB  00E6               	movwf	_contador+2
   768  01DC  0845               	movf	??_enconder+1,w
   769  01DD  00E5               	movwf	_contador+1
   770  01DE  0844               	movf	??_enconder,w
   771  01DF  00E4               	movwf	_contador
   772                           
   773                           ;main.c: 101: if(contadorLed >= 1024)
   774  01E0  3004               	movlw	4
   775  01E1  026D               	subwf	_contadorLed+1,w
   776  01E2  3000               	movlw	0
   777  01E3  1903               	skipnz
   778  01E4  026C               	subwf	_contadorLed,w
   779  01E5  1C03               	skipc
   780  01E6  29EB               	goto	i1l940
   781                           
   782                           ;main.c: 102: {
   783                           ;main.c: 103: contadorLed = 0;
   784  01E7  01EC               	clrf	_contadorLed
   785  01E8  01ED               	clrf	_contadorLed+1
   786                           
   787                           ;main.c: 104: RB4 = ~RB4;
   788  01E9  3010               	movlw	16
   789  01EA  0686               	xorwf	6,f
   790  01EB                     i1l940:	
   791                           
   792                           ;main.c: 105: }
   793                           ;main.c: 106: }
   794                           ;main.c: 107: if(INTCONbits.T0IF == 1)
   795  01EB  1D0B               	btfss	11,2	;volatile
   796  01EC  2A2C               	goto	i1l952
   797                           
   798                           ;main.c: 108: {
   799                           ;main.c: 109: INTCONbits.T0IF = 0;
   800  01ED  110B               	bcf	11,2	;volatile
   801                           
   802                           ;main.c: 110: TMR0 = 12;
   803  01EE  300C               	movlw	12
   804  01EF  0081               	movwf	1	;volatile
   805                           
   806                           ;main.c: 111: contadorTemporizador++;
   807  01F0  3001               	movlw	1
   808  01F1  07EA               	addwf	_contadorTemporizador,f
   809  01F2  1803               	skipnc
   810  01F3  0AEB               	incf	_contadorTemporizador+1,f
   811  01F4  3000               	movlw	0
   812  01F5  07EB               	addwf	_contadorTemporizador+1,f
   813                           
   814                           ;main.c: 112: if (contadorTemporizador >= 16)
   815  01F6  3000               	movlw	0
   816  01F7  026B               	subwf	_contadorTemporizador+1,w
   817  01F8  3010               	movlw	16
   818  01F9  1903               	skipnz
   819  01FA  026A               	subwf	_contadorTemporizador,w
   820  01FB  1C03               	skipc
   821  01FC  2A2C               	goto	i1l952
   822                           
   823                           ;main.c: 113: {
   824                           ;main.c: 114: contadorTemporizador = 0;
   825  01FD  01EA               	clrf	_contadorTemporizador
   826  01FE  01EB               	clrf	_contadorTemporizador+1
   827                           
   828                           ;main.c: 115: velocidad = (contador * 60 ) / 1024 ;
   829  01FF  0867               	movf	_contador+3,w
   830  0200  00F3               	movwf	___lmul@multiplier+3
   831  0201  0866               	movf	_contador+2,w
   832  0202  00F2               	movwf	___lmul@multiplier+2
   833  0203  0865               	movf	_contador+1,w
   834  0204  00F1               	movwf	___lmul@multiplier+1
   835  0205  0864               	movf	_contador,w
   836  0206  00F0               	movwf	___lmul@multiplier
   837  0207  3000               	movlw	0
   838  0208  00F7               	movwf	___lmul@multiplicand+3
   839  0209  3000               	movlw	0
   840  020A  00F6               	movwf	___lmul@multiplicand+2
   841  020B  3000               	movlw	0
   842  020C  00F5               	movwf	___lmul@multiplicand+1
   843  020D  303C               	movlw	60
   844  020E  00F4               	movwf	___lmul@multiplicand
   845  020F  22FD               	fcall	___lmul
   846  0210  0870               	movf	?___lmul,w
   847  0211  1283               	bcf	3,5	;RP0=0, select bank0
   848  0212  1303               	bcf	3,6	;RP1=0, select bank0
   849  0213  00C4               	movwf	??_enconder
   850  0214  0871               	movf	?___lmul+1,w
   851  0215  00C5               	movwf	??_enconder+1
   852  0216  0872               	movf	?___lmul+2,w
   853  0217  00C6               	movwf	??_enconder+2
   854  0218  0873               	movf	?___lmul+3,w
   855  0219  00C7               	movwf	??_enconder+3
   856  021A  300A               	movlw	10
   857  021B                     u84_25:	
   858  021B  1003               	clrc
   859  021C  0CC7               	rrf	??_enconder+3,f
   860  021D  0CC6               	rrf	??_enconder+2,f
   861  021E  0CC5               	rrf	??_enconder+1,f
   862  021F  0CC4               	rrf	??_enconder,f
   863  0220  3EFF               	addlw	-1
   864  0221  1D03               	skipz
   865  0222  2A1B               	goto	u84_25
   866  0223  0847               	movf	??_enconder+3,w
   867  0224  00E3               	movwf	_velocidad+3
   868  0225  0846               	movf	??_enconder+2,w
   869  0226  00E2               	movwf	_velocidad+2
   870  0227  0845               	movf	??_enconder+1,w
   871  0228  00E1               	movwf	_velocidad+1
   872  0229  0844               	movf	??_enconder,w
   873  022A  00E0               	movwf	_velocidad
   874                           
   875                           ;main.c: 116: escribirSalida();
   876  022B  2044               	fcall	_escribirSalida
   877  022C                     i1l952:	
   878                           
   879                           ;main.c: 117: }
   880                           ;main.c: 118: }
   881                           ;main.c: 119: if(PIR1bits.TMR1IF == 1)
   882  022C  1283               	bcf	3,5	;RP0=0, select bank0
   883  022D  1303               	bcf	3,6	;RP1=0, select bank0
   884  022E  1C0C               	btfss	12,0	;volatile
   885  022F  2A3C               	goto	i1l88
   886                           
   887                           ;main.c: 120: {
   888                           ;main.c: 121: TMR1H = 255;
   889  0230  30FF               	movlw	255
   890  0231  008F               	movwf	15	;volatile
   891                           
   892                           ;main.c: 122: (RA0) ? TMR1L = 6 + pwm: TMR1L = 6;
   893  0232  1C05               	btfss	5,0	;volatile
   894  0233  2A37               	goto	i1l960
   895  0234  0868               	movf	_pwm,w
   896  0235  3E06               	addlw	6
   897  0236  2A38               	goto	L1
   898  0237                     i1l960:	
   899  0237  3006               	movlw	6
   900  0238                     L1:	
   901  0238  008E               	movwf	14	;volatile
   902                           
   903                           ;main.c: 123: PIR1bits.TMR1IF = 0;
   904  0239  100C               	bcf	12,0	;volatile
   905                           
   906                           ;main.c: 124: RA0 = !RA0;
   907  023A  3001               	movlw	1
   908  023B  0685               	xorwf	5,f
   909  023C                     i1l88:	
   910  023C  084B               	movf	??_enconder+7,w
   911  023D  00FF               	movwf	127
   912  023E  084A               	movf	??_enconder+6,w
   913  023F  008A               	movwf	10
   914  0240  0849               	movf	??_enconder+5,w
   915  0241  0084               	movwf	4
   916  0242  0E48               	swapf	(??_enconder+4)^0,w
   917  0243  0083               	movwf	3
   918  0244  0EFE               	swapf	126,f
   919  0245  0E7E               	swapf	126,w
   920  0246  0009               	retfie
   921  0247                     __end_of_enconder:	
   922                           
   923                           	psect	intentry
   924  0004                     __pintentry:	
   925                           ;incstack = 0
   926                           ; Regs used in _enconder: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   927                           
   928  0004                     interrupt_function:	
   929  007E                     saved_w	set	btemp
   930  0004  00FE               	movwf	btemp
   931  0005  0E03               	swapf	3,w
   932  0006  1283               	bcf	3,5	;RP0=0, select bank0
   933  0007  1303               	bcf	3,6	;RP1=0, select bank0
   934  0008  00C8               	movwf	??_enconder+4
   935  0009  0804               	movf	4,w
   936  000A  00C9               	movwf	??_enconder+5
   937  000B  080A               	movf	10,w
   938  000C  00CA               	movwf	??_enconder+6
   939  000D  087F               	movf	btemp+1,w
   940  000E  00CB               	movwf	??_enconder+7
   941  000F  29B3               	ljmp	_enconder
   942                           
   943                           	psect	text3
   944  0044                     __ptext3:	
   945 ;; *************** function _escribirSalida *****************
   946 ;; Defined at:
   947 ;;		line 58 in file "main.c"
   948 ;; Parameters:    Size  Location     Type
   949 ;;		None
   950 ;; Auto vars:     Size  Location     Type
   951 ;;  i               2   30[BANK0 ] int 
   952 ;;  i               2   34[BANK0 ] int 
   953 ;;  i               2   28[BANK0 ] int 
   954 ;;  i               2   32[BANK0 ] int 
   955 ;;  resultado      16    6[BANK0 ] int [8]
   956 ;;  numero          2   26[BANK0 ] int 
   957 ;;  velocidadDec    2   24[BANK0 ] int 
   958 ;;  velocidadUni    2   22[BANK0 ] int 
   959 ;; Return value:  Size  Location     Type
   960 ;;                  1    wreg      void 
   961 ;; Registers used:
   962 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   963 ;; Tracked objects:
   964 ;;		On entry : 0/0
   965 ;;		On exit  : 0/0
   966 ;;		Unchanged: 0/0
   967 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   968 ;;      Params:         0       0       0       0
   969 ;;      Locals:         0      30       0       0
   970 ;;      Temps:          0       6       0       0
   971 ;;      Totals:         0      36       0       0
   972 ;;Total ram usage:       36 bytes
   973 ;; Hardware stack levels used:    1
   974 ;; Hardware stack levels required when called:    1
   975 ;; This function calls:
   976 ;;		___lldiv
   977 ;;		___wmul
   978 ;; This function is called by:
   979 ;;		_enconder
   980 ;; This function uses a non-reentrant model
   981 ;;
   982                           
   983                           
   984                           ;psect for function _escribirSalida
   985  0044                     _escribirSalida:	
   986                           
   987                           ;main.c: 60: int resultado[8] = {0,0,0,0,0,0,0,0};
   988                           
   989                           ;incstack = 0
   990                           ; Regs used in _escribirSalida: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   991  0044  3026               	movlw	escribirSalida@resultado& (0+255)
   992  0045  0084               	movwf	4
   993  0046  30A0               	movlw	low escribirSalida@F803
   994  0047  1283               	bcf	3,5	;RP0=0, select bank0
   995  0048  1303               	bcf	3,6	;RP1=0, select bank0
   996  0049  00A0               	movwf	??_escribirSalida
   997  004A  0804               	movf	4,w
   998  004B  00A1               	movwf	??_escribirSalida+1
   999  004C  3010               	movlw	16
  1000  004D  00A2               	movwf	??_escribirSalida+2
  1001  004E                     u57_20:	
  1002  004E  0820               	movf	??_escribirSalida,w
  1003  004F  0084               	movwf	4
  1004  0050  1383               	bcf	3,7	;select IRP bank1
  1005  0051  0800               	movf	0,w
  1006  0052  00A3               	movwf	??_escribirSalida+3
  1007  0053  0AA0               	incf	??_escribirSalida,f
  1008  0054  0821               	movf	??_escribirSalida+1,w
  1009  0055  0084               	movwf	4
  1010  0056  0823               	movf	??_escribirSalida+3,w
  1011  0057  0080               	movwf	0
  1012  0058  0AA1               	incf	??_escribirSalida+1,f
  1013  0059  0BA2               	decfsz	??_escribirSalida+2,f
  1014  005A  284E               	goto	u57_20
  1015                           
  1016                           ;main.c: 61: int velocidadDecena = velocidad/10;
  1017  005B  3000               	movlw	0
  1018  005C  00F3               	movwf	___lldiv@divisor+3
  1019  005D  3000               	movlw	0
  1020  005E  00F2               	movwf	___lldiv@divisor+2
  1021  005F  3000               	movlw	0
  1022  0060  00F1               	movwf	___lldiv@divisor+1
  1023  0061  300A               	movlw	10
  1024  0062  00F0               	movwf	___lldiv@divisor
  1025  0063  0863               	movf	_velocidad+3,w
  1026  0064  00F7               	movwf	___lldiv@dividend+3
  1027  0065  0862               	movf	_velocidad+2,w
  1028  0066  00F6               	movwf	___lldiv@dividend+2
  1029  0067  0861               	movf	_velocidad+1,w
  1030  0068  00F5               	movwf	___lldiv@dividend+1
  1031  0069  0860               	movf	_velocidad,w
  1032  006A  00F4               	movwf	___lldiv@dividend
  1033  006B  2247               	fcall	___lldiv
  1034  006C  0871               	movf	?___lldiv+1,w
  1035  006D  1283               	bcf	3,5	;RP0=0, select bank0
  1036  006E  1303               	bcf	3,6	;RP1=0, select bank0
  1037  006F  00B9               	movwf	escribirSalida@velocidadDecena+1
  1038  0070  0870               	movf	?___lldiv,w
  1039  0071  00B8               	movwf	escribirSalida@velocidadDecena
  1040                           
  1041                           ;main.c: 62: int velocidadUnidad = velocidad - velocidadDecena * 10;
  1042  0072  0839               	movf	escribirSalida@velocidadDecena+1,w
  1043  0073  00F1               	movwf	___wmul@multiplier+1
  1044  0074  0838               	movf	escribirSalida@velocidadDecena,w
  1045  0075  00F0               	movwf	___wmul@multiplier
  1046  0076  300A               	movlw	10
  1047  0077  00F2               	movwf	___wmul@multiplicand
  1048  0078  3000               	movlw	0
  1049  0079  00F3               	movwf	___wmul@multiplicand+1
  1050  007A  2361               	fcall	___wmul
  1051  007B  0970               	comf	?___wmul,w
  1052  007C  1283               	bcf	3,5	;RP0=0, select bank0
  1053  007D  1303               	bcf	3,6	;RP1=0, select bank0
  1054  007E  00A0               	movwf	??_escribirSalida
  1055  007F  0971               	comf	?___wmul+1,w
  1056  0080  00A1               	movwf	??_escribirSalida+1
  1057  0081  0AA0               	incf	??_escribirSalida,f
  1058  0082  1903               	skipnz
  1059  0083  0AA1               	incf	??_escribirSalida+1,f
  1060  0084  0860               	movf	_velocidad,w
  1061  0085  0720               	addwf	??_escribirSalida,w
  1062  0086  00B6               	movwf	escribirSalida@velocidadUnidad
  1063  0087  0861               	movf	_velocidad+1,w
  1064  0088  1803               	skipnc
  1065  0089  0A61               	incf	_velocidad+1,w
  1066  008A  0721               	addwf	??_escribirSalida+1,w
  1067  008B  00B7               	movwf	escribirSalida@velocidadUnidad+1
  1068                           
  1069                           ;main.c: 63: int numero = codificacion[velocidadUnidad];
  1070  008C  0836               	movf	escribirSalida@velocidadUnidad,w
  1071  008D  00A0               	movwf	??_escribirSalida
  1072  008E  0720               	addwf	??_escribirSalida,w
  1073  008F  3E4C               	addlw	(low (_codificacion| 0))& (0+255)
  1074  0090  0084               	movwf	4
  1075  0091  1383               	bcf	3,7	;select IRP bank0
  1076  0092  0800               	movf	0,w
  1077  0093  00BA               	movwf	escribirSalida@numero
  1078  0094  0A84               	incf	4,f
  1079  0095  0800               	movf	0,w
  1080  0096  00BB               	movwf	escribirSalida@numero+1
  1081                           
  1082                           ;main.c: 64: for (int i = 0; i < 8; i++)
  1083  0097  01C0               	clrf	escribirSalida@i
  1084  0098  01C1               	clrf	escribirSalida@i+1
  1085  0099  0841               	movf	escribirSalida@i+1,w
  1086  009A  3A80               	xorlw	128
  1087  009B  00FF               	movwf	127
  1088  009C  3080               	movlw	128
  1089  009D  027F               	subwf	127,w
  1090  009E  1D03               	skipz
  1091  009F  28A2               	goto	u58_25
  1092  00A0  3008               	movlw	8
  1093  00A1  0240               	subwf	escribirSalida@i,w
  1094  00A2                     u58_25:	
  1095  00A2  1803               	btfsc	3,0
  1096  00A3  28D9               	goto	i1l852
  1097  00A4                     i1l846:	
  1098                           
  1099                           ;main.c: 65: {
  1100                           ;main.c: 66: resultado[i] = (numero >> (7 - i)) & 1;
  1101  00A4  1283               	bcf	3,5	;RP0=0, select bank0
  1102  00A5  1303               	bcf	3,6	;RP1=0, select bank0
  1103  00A6  0340               	decf	escribirSalida@i,w
  1104  00A7  3AFF               	xorlw	255
  1105  00A8  3E07               	addlw	7
  1106  00A9  00A0               	movwf	??_escribirSalida
  1107  00AA  0AA0               	incf	??_escribirSalida,f
  1108  00AB  083B               	movf	escribirSalida@numero+1,w
  1109  00AC  00A2               	movwf	??_escribirSalida+2
  1110  00AD  083A               	movf	escribirSalida@numero,w
  1111  00AE  00A1               	movwf	??_escribirSalida+1
  1112  00AF  28B3               	goto	u59_24
  1113  00B0                     u59_25:	
  1114  00B0  0D22               	rlf	??_escribirSalida+2,w
  1115  00B1  0CA2               	rrf	??_escribirSalida+2,f
  1116  00B2  0CA1               	rrf	??_escribirSalida+1,f
  1117  00B3                     u59_24:	
  1118  00B3  0BA0               	decfsz	??_escribirSalida,f
  1119  00B4  28B0               	goto	u59_25
  1120  00B5  3001               	movlw	1
  1121  00B6  1283               	bcf	3,5	;RP0=0, select bank0
  1122  00B7  1303               	bcf	3,6	;RP1=0, select bank0
  1123  00B8  0521               	andwf	??_escribirSalida+1,w
  1124  00B9  00A3               	movwf	??_escribirSalida+3
  1125  00BA  3000               	movlw	0
  1126  00BB  0522               	andwf	??_escribirSalida+2,w
  1127  00BC  00A4               	movwf	??_escribirSalida+4
  1128  00BD  0840               	movf	escribirSalida@i,w
  1129  00BE  00A5               	movwf	??_escribirSalida+5
  1130  00BF  0725               	addwf	??_escribirSalida+5,w
  1131  00C0  3E26               	addlw	(low (escribirSalida@resultado| 0))& (0+255)
  1132  00C1  0084               	movwf	4
  1133  00C2  0823               	movf	??_escribirSalida+3,w
  1134  00C3  1383               	bcf	3,7	;select IRP bank0
  1135  00C4  0080               	movwf	0
  1136  00C5  0A84               	incf	4,f
  1137  00C6  0824               	movf	??_escribirSalida+4,w
  1138  00C7  0080               	movwf	0
  1139  00C8  3001               	movlw	1
  1140  00C9  07C0               	addwf	escribirSalida@i,f
  1141  00CA  1803               	skipnc
  1142  00CB  0AC1               	incf	escribirSalida@i+1,f
  1143  00CC  3000               	movlw	0
  1144  00CD  07C1               	addwf	escribirSalida@i+1,f
  1145  00CE  0841               	movf	escribirSalida@i+1,w
  1146  00CF  3A80               	xorlw	128
  1147  00D0  00FF               	movwf	127
  1148  00D1  3080               	movlw	128
  1149  00D2  027F               	subwf	127,w
  1150  00D3  1D03               	skipz
  1151  00D4  28D7               	goto	u60_25
  1152  00D5  3008               	movlw	8
  1153  00D6  0240               	subwf	escribirSalida@i,w
  1154  00D7                     u60_25:	
  1155  00D7  1C03               	skipc
  1156  00D8  28A4               	goto	i1l846
  1157  00D9                     i1l852:	
  1158                           
  1159                           ;main.c: 67: }
  1160                           ;main.c: 68: for (int i = 0; i < 8; i++)
  1161  00D9  1283               	bcf	3,5	;RP0=0, select bank0
  1162  00DA  1303               	bcf	3,6	;RP1=0, select bank0
  1163  00DB  01BC               	clrf	escribirSalida@i_182
  1164  00DC  01BD               	clrf	escribirSalida@i_182+1
  1165  00DD  083D               	movf	escribirSalida@i_182+1,w
  1166  00DE  3A80               	xorlw	128
  1167  00DF  00FF               	movwf	127
  1168  00E0  3080               	movlw	128
  1169  00E1  027F               	subwf	127,w
  1170  00E2  1D03               	skipz
  1171  00E3  28E6               	goto	u61_25
  1172  00E4  3008               	movlw	8
  1173  00E5  023C               	subwf	escribirSalida@i_182,w
  1174  00E6                     u61_25:	
  1175  00E6  1803               	btfsc	3,0
  1176  00E7  2913               	goto	i1l69
  1177  00E8                     i1l858:	
  1178                           
  1179                           ;main.c: 69: {
  1180                           ;main.c: 70: RB2 = resultado[7 -i];
  1181  00E8  1283               	bcf	3,5	;RP0=0, select bank0
  1182  00E9  1303               	bcf	3,6	;RP1=0, select bank0
  1183  00EA  033C               	decf	escribirSalida@i_182,w
  1184  00EB  3AFF               	xorlw	255
  1185  00EC  00A0               	movwf	??_escribirSalida
  1186  00ED  0720               	addwf	??_escribirSalida,w
  1187  00EE  3E0E               	addlw	14
  1188  00EF  3E26               	addlw	(low (escribirSalida@resultado| 0))& (0+255)
  1189  00F0  0084               	movwf	4
  1190  00F1  1383               	bcf	3,7	;select IRP bank0
  1191  00F2  0800               	movf	0,w
  1192  00F3  00A1               	movwf	??_escribirSalida+1
  1193  00F4  0A84               	incf	4,f
  1194  00F5  0800               	movf	0,w
  1195  00F6  00A2               	movwf	??_escribirSalida+2
  1196  00F7  1C21               	btfss	??_escribirSalida+1,0
  1197  00F8  28FD               	goto	u62_20
  1198  00F9  1283               	bcf	3,5	;RP0=0, select bank0
  1199  00FA  1303               	bcf	3,6	;RP1=0, select bank0
  1200  00FB  1506               	bsf	6,2	;volatile
  1201  00FC  2900               	goto	i1l860
  1202  00FD                     u62_20:	
  1203  00FD  1283               	bcf	3,5	;RP0=0, select bank0
  1204  00FE  1303               	bcf	3,6	;RP1=0, select bank0
  1205  00FF  1106               	bcf	6,2	;volatile
  1206  0100                     i1l860:	
  1207                           
  1208                           ;main.c: 71: RB1 = 1;
  1209  0100  1486               	bsf	6,1	;volatile
  1210                           
  1211                           ;main.c: 72: RB1 = 0;
  1212  0101  1086               	bcf	6,1	;volatile
  1213  0102  3001               	movlw	1
  1214  0103  07BC               	addwf	escribirSalida@i_182,f
  1215  0104  1803               	skipnc
  1216  0105  0ABD               	incf	escribirSalida@i_182+1,f
  1217  0106  3000               	movlw	0
  1218  0107  07BD               	addwf	escribirSalida@i_182+1,f
  1219  0108  083D               	movf	escribirSalida@i_182+1,w
  1220  0109  3A80               	xorlw	128
  1221  010A  00FF               	movwf	127
  1222  010B  3080               	movlw	128
  1223  010C  027F               	subwf	127,w
  1224  010D  1D03               	skipz
  1225  010E  2911               	goto	u64_25
  1226  010F  3008               	movlw	8
  1227  0110  023C               	subwf	escribirSalida@i_182,w
  1228  0111                     u64_25:	
  1229  0111  1C03               	skipc
  1230  0112  28E8               	goto	i1l858
  1231  0113                     i1l69:	
  1232                           
  1233                           ;main.c: 73: }
  1234                           ;main.c: 74: RB3 = 1;
  1235  0113  1283               	bcf	3,5	;RP0=0, select bank0
  1236  0114  1303               	bcf	3,6	;RP1=0, select bank0
  1237  0115  1586               	bsf	6,3	;volatile
  1238                           
  1239                           ;main.c: 75: RB3 = 0;
  1240  0116  1186               	bcf	6,3	;volatile
  1241                           
  1242                           ;main.c: 76: numero = codificacion[velocidadDecena];
  1243  0117  0838               	movf	escribirSalida@velocidadDecena,w
  1244  0118  00A0               	movwf	??_escribirSalida
  1245  0119  0720               	addwf	??_escribirSalida,w
  1246  011A  3E4C               	addlw	(low (_codificacion| 0))& (0+255)
  1247  011B  0084               	movwf	4
  1248  011C  1383               	bcf	3,7	;select IRP bank0
  1249  011D  0800               	movf	0,w
  1250  011E  00BA               	movwf	escribirSalida@numero
  1251  011F  0A84               	incf	4,f
  1252  0120  0800               	movf	0,w
  1253  0121  00BB               	movwf	escribirSalida@numero+1
  1254                           
  1255                           ;main.c: 77: for (int i = 0; i < 8; i++)
  1256  0122  01C2               	clrf	escribirSalida@i_183
  1257  0123  01C3               	clrf	escribirSalida@i_183+1
  1258  0124  0843               	movf	escribirSalida@i_183+1,w
  1259  0125  3A80               	xorlw	128
  1260  0126  00FF               	movwf	127
  1261  0127  3080               	movlw	128
  1262  0128  027F               	subwf	127,w
  1263  0129  1D03               	skipz
  1264  012A  292D               	goto	u65_25
  1265  012B  3008               	movlw	8
  1266  012C  0242               	subwf	escribirSalida@i_183,w
  1267  012D                     u65_25:	
  1268  012D  1803               	btfsc	3,0
  1269  012E  2964               	goto	i1l882
  1270  012F                     i1l876:	
  1271                           
  1272                           ;main.c: 78: {
  1273                           ;main.c: 79: resultado[i] = (numero >> (7 - i)) & 1;
  1274  012F  1283               	bcf	3,5	;RP0=0, select bank0
  1275  0130  1303               	bcf	3,6	;RP1=0, select bank0
  1276  0131  0342               	decf	escribirSalida@i_183,w
  1277  0132  3AFF               	xorlw	255
  1278  0133  3E07               	addlw	7
  1279  0134  00A0               	movwf	??_escribirSalida
  1280  0135  0AA0               	incf	??_escribirSalida,f
  1281  0136  083B               	movf	escribirSalida@numero+1,w
  1282  0137  00A2               	movwf	??_escribirSalida+2
  1283  0138  083A               	movf	escribirSalida@numero,w
  1284  0139  00A1               	movwf	??_escribirSalida+1
  1285  013A  293E               	goto	u66_24
  1286  013B                     u66_25:	
  1287  013B  0D22               	rlf	??_escribirSalida+2,w
  1288  013C  0CA2               	rrf	??_escribirSalida+2,f
  1289  013D  0CA1               	rrf	??_escribirSalida+1,f
  1290  013E                     u66_24:	
  1291  013E  0BA0               	decfsz	??_escribirSalida,f
  1292  013F  293B               	goto	u66_25
  1293  0140  3001               	movlw	1
  1294  0141  1283               	bcf	3,5	;RP0=0, select bank0
  1295  0142  1303               	bcf	3,6	;RP1=0, select bank0
  1296  0143  0521               	andwf	??_escribirSalida+1,w
  1297  0144  00A3               	movwf	??_escribirSalida+3
  1298  0145  3000               	movlw	0
  1299  0146  0522               	andwf	??_escribirSalida+2,w
  1300  0147  00A4               	movwf	??_escribirSalida+4
  1301  0148  0842               	movf	escribirSalida@i_183,w
  1302  0149  00A5               	movwf	??_escribirSalida+5
  1303  014A  0725               	addwf	??_escribirSalida+5,w
  1304  014B  3E26               	addlw	(low (escribirSalida@resultado| 0))& (0+255)
  1305  014C  0084               	movwf	4
  1306  014D  0823               	movf	??_escribirSalida+3,w
  1307  014E  1383               	bcf	3,7	;select IRP bank0
  1308  014F  0080               	movwf	0
  1309  0150  0A84               	incf	4,f
  1310  0151  0824               	movf	??_escribirSalida+4,w
  1311  0152  0080               	movwf	0
  1312  0153  3001               	movlw	1
  1313  0154  07C2               	addwf	escribirSalida@i_183,f
  1314  0155  1803               	skipnc
  1315  0156  0AC3               	incf	escribirSalida@i_183+1,f
  1316  0157  3000               	movlw	0
  1317  0158  07C3               	addwf	escribirSalida@i_183+1,f
  1318  0159  0843               	movf	escribirSalida@i_183+1,w
  1319  015A  3A80               	xorlw	128
  1320  015B  00FF               	movwf	127
  1321  015C  3080               	movlw	128
  1322  015D  027F               	subwf	127,w
  1323  015E  1D03               	skipz
  1324  015F  2962               	goto	u67_25
  1325  0160  3008               	movlw	8
  1326  0161  0242               	subwf	escribirSalida@i_183,w
  1327  0162                     u67_25:	
  1328  0162  1C03               	skipc
  1329  0163  292F               	goto	i1l876
  1330  0164                     i1l882:	
  1331                           
  1332                           ;main.c: 80: }
  1333                           ;main.c: 81: for (int i = 0; i < 8; i++)
  1334  0164  1283               	bcf	3,5	;RP0=0, select bank0
  1335  0165  1303               	bcf	3,6	;RP1=0, select bank0
  1336  0166  01BE               	clrf	escribirSalida@i_184
  1337  0167  01BF               	clrf	escribirSalida@i_184+1
  1338  0168  083F               	movf	escribirSalida@i_184+1,w
  1339  0169  3A80               	xorlw	128
  1340  016A  00FF               	movwf	127
  1341  016B  3080               	movlw	128
  1342  016C  027F               	subwf	127,w
  1343  016D  1D03               	skipz
  1344  016E  2971               	goto	u68_25
  1345  016F  3008               	movlw	8
  1346  0170  023E               	subwf	escribirSalida@i_184,w
  1347  0171                     u68_25:	
  1348  0171  1803               	btfsc	3,0
  1349  0172  299E               	goto	i1l73
  1350  0173                     i1l888:	
  1351                           
  1352                           ;main.c: 82: {
  1353                           ;main.c: 83: RB2 = resultado[7 -i];
  1354  0173  1283               	bcf	3,5	;RP0=0, select bank0
  1355  0174  1303               	bcf	3,6	;RP1=0, select bank0
  1356  0175  033E               	decf	escribirSalida@i_184,w
  1357  0176  3AFF               	xorlw	255
  1358  0177  00A0               	movwf	??_escribirSalida
  1359  0178  0720               	addwf	??_escribirSalida,w
  1360  0179  3E0E               	addlw	14
  1361  017A  3E26               	addlw	(low (escribirSalida@resultado| 0))& (0+255)
  1362  017B  0084               	movwf	4
  1363  017C  1383               	bcf	3,7	;select IRP bank0
  1364  017D  0800               	movf	0,w
  1365  017E  00A1               	movwf	??_escribirSalida+1
  1366  017F  0A84               	incf	4,f
  1367  0180  0800               	movf	0,w
  1368  0181  00A2               	movwf	??_escribirSalida+2
  1369  0182  1C21               	btfss	??_escribirSalida+1,0
  1370  0183  2988               	goto	u69_20
  1371  0184  1283               	bcf	3,5	;RP0=0, select bank0
  1372  0185  1303               	bcf	3,6	;RP1=0, select bank0
  1373  0186  1506               	bsf	6,2	;volatile
  1374  0187  298B               	goto	i1l890
  1375  0188                     u69_20:	
  1376  0188  1283               	bcf	3,5	;RP0=0, select bank0
  1377  0189  1303               	bcf	3,6	;RP1=0, select bank0
  1378  018A  1106               	bcf	6,2	;volatile
  1379  018B                     i1l890:	
  1380                           
  1381                           ;main.c: 84: RB1 = 1;
  1382  018B  1486               	bsf	6,1	;volatile
  1383                           
  1384                           ;main.c: 85: RB1 = 0;
  1385  018C  1086               	bcf	6,1	;volatile
  1386  018D  3001               	movlw	1
  1387  018E  07BE               	addwf	escribirSalida@i_184,f
  1388  018F  1803               	skipnc
  1389  0190  0ABF               	incf	escribirSalida@i_184+1,f
  1390  0191  3000               	movlw	0
  1391  0192  07BF               	addwf	escribirSalida@i_184+1,f
  1392  0193  083F               	movf	escribirSalida@i_184+1,w
  1393  0194  3A80               	xorlw	128
  1394  0195  00FF               	movwf	127
  1395  0196  3080               	movlw	128
  1396  0197  027F               	subwf	127,w
  1397  0198  1D03               	skipz
  1398  0199  299C               	goto	u71_25
  1399  019A  3008               	movlw	8
  1400  019B  023E               	subwf	escribirSalida@i_184,w
  1401  019C                     u71_25:	
  1402  019C  1C03               	skipc
  1403  019D  2973               	goto	i1l888
  1404  019E                     i1l73:	
  1405                           
  1406                           ;main.c: 86: }
  1407                           ;main.c: 87: RB3 = 1;
  1408  019E  1283               	bcf	3,5	;RP0=0, select bank0
  1409  019F  1303               	bcf	3,6	;RP1=0, select bank0
  1410  01A0  1586               	bsf	6,3	;volatile
  1411                           
  1412                           ;main.c: 88: RB3 = 0;
  1413  01A1  1186               	bcf	6,3	;volatile
  1414                           
  1415                           ;main.c: 89: velocidad = 0;
  1416  01A2  3000               	movlw	0
  1417  01A3  00E3               	movwf	_velocidad+3
  1418  01A4  3000               	movlw	0
  1419  01A5  00E2               	movwf	_velocidad+2
  1420  01A6  3000               	movlw	0
  1421  01A7  00E1               	movwf	_velocidad+1
  1422  01A8  3000               	movlw	0
  1423  01A9  00E0               	movwf	_velocidad
  1424                           
  1425                           ;main.c: 90: contador = 0;
  1426  01AA  3000               	movlw	0
  1427  01AB  00E7               	movwf	_contador+3
  1428  01AC  3000               	movlw	0
  1429  01AD  00E6               	movwf	_contador+2
  1430  01AE  3000               	movlw	0
  1431  01AF  00E5               	movwf	_contador+1
  1432  01B0  3000               	movlw	0
  1433  01B1  00E4               	movwf	_contador
  1434  01B2  0008               	return
  1435  01B3                     __end_of_escribirSalida:	
  1436                           
  1437                           	psect	text4
  1438  0361                     __ptext4:	
  1439 ;; *************** function ___wmul *****************
  1440 ;; Defined at:
  1441 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\Umul16.c"
  1442 ;; Parameters:    Size  Location     Type
  1443 ;;  multiplier      2    0[COMMON] unsigned int 
  1444 ;;  multiplicand    2    2[COMMON] unsigned int 
  1445 ;; Auto vars:     Size  Location     Type
  1446 ;;  product         2    4[COMMON] unsigned int 
  1447 ;; Return value:  Size  Location     Type
  1448 ;;                  2    0[COMMON] unsigned int 
  1449 ;; Registers used:
  1450 ;;		wreg, status,2, status,0
  1451 ;; Tracked objects:
  1452 ;;		On entry : 0/0
  1453 ;;		On exit  : 0/0
  1454 ;;		Unchanged: 0/0
  1455 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1456 ;;      Params:         4       0       0       0
  1457 ;;      Locals:         2       0       0       0
  1458 ;;      Temps:          0       0       0       0
  1459 ;;      Totals:         6       0       0       0
  1460 ;;Total ram usage:        6 bytes
  1461 ;; Hardware stack levels used:    1
  1462 ;; This function calls:
  1463 ;;		Nothing
  1464 ;; This function is called by:
  1465 ;;		_escribirSalida
  1466 ;;		_powKase
  1467 ;; This function uses a non-reentrant model
  1468 ;;
  1469                           
  1470                           
  1471                           ;psect for function ___wmul
  1472  0361                     ___wmul:	
  1473                           
  1474                           ;incstack = 0
  1475                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  1476  0361  01F4               	clrf	___wmul@product
  1477  0362  01F5               	clrf	___wmul@product+1
  1478  0363                     i1l790:	
  1479  0363  1C70               	btfss	___wmul@multiplier,0
  1480  0364  2B6B               	goto	i1l182
  1481  0365  0872               	movf	___wmul@multiplicand,w
  1482  0366  07F4               	addwf	___wmul@product,f
  1483  0367  1803               	skipnc
  1484  0368  0AF5               	incf	___wmul@product+1,f
  1485  0369  0873               	movf	___wmul@multiplicand+1,w
  1486  036A  07F5               	addwf	___wmul@product+1,f
  1487  036B                     i1l182:	
  1488  036B  3001               	movlw	1
  1489  036C                     u46_25:	
  1490  036C  1003               	clrc
  1491  036D  0DF2               	rlf	___wmul@multiplicand,f
  1492  036E  0DF3               	rlf	___wmul@multiplicand+1,f
  1493  036F  3EFF               	addlw	-1
  1494  0370  1D03               	skipz
  1495  0371  2B6C               	goto	u46_25
  1496  0372  3001               	movlw	1
  1497  0373                     u47_25:	
  1498  0373  1003               	clrc
  1499  0374  0CF1               	rrf	___wmul@multiplier+1,f
  1500  0375  0CF0               	rrf	___wmul@multiplier,f
  1501  0376  3EFF               	addlw	-1
  1502  0377  1D03               	skipz
  1503  0378  2B73               	goto	u47_25
  1504  0379  0870               	movf	___wmul@multiplier,w
  1505  037A  0471               	iorwf	___wmul@multiplier+1,w
  1506  037B  1D03               	btfss	3,2
  1507  037C  2B63               	goto	i1l790
  1508  037D  0875               	movf	___wmul@product+1,w
  1509  037E  00F1               	movwf	?___wmul+1
  1510  037F  0874               	movf	___wmul@product,w
  1511  0380  00F0               	movwf	?___wmul
  1512  0381  0008               	return
  1513  0382                     __end_of___wmul:	
  1514                           
  1515                           	psect	text5
  1516  0247                     __ptext5:	
  1517 ;; *************** function ___lldiv *****************
  1518 ;; Defined at:
  1519 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lldiv.c"
  1520 ;; Parameters:    Size  Location     Type
  1521 ;;  divisor         4    0[COMMON] unsigned long 
  1522 ;;  dividend        4    4[COMMON] unsigned long 
  1523 ;; Auto vars:     Size  Location     Type
  1524 ;;  quotient        4    9[COMMON] unsigned long 
  1525 ;;  counter         1   13[COMMON] unsigned char 
  1526 ;; Return value:  Size  Location     Type
  1527 ;;                  4    0[COMMON] unsigned long 
  1528 ;; Registers used:
  1529 ;;		wreg, status,2, status,0
  1530 ;; Tracked objects:
  1531 ;;		On entry : 0/0
  1532 ;;		On exit  : 0/0
  1533 ;;		Unchanged: 0/0
  1534 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1535 ;;      Params:         8       0       0       0
  1536 ;;      Locals:         5       0       0       0
  1537 ;;      Temps:          1       0       0       0
  1538 ;;      Totals:        14       0       0       0
  1539 ;;Total ram usage:       14 bytes
  1540 ;; Hardware stack levels used:    1
  1541 ;; This function calls:
  1542 ;;		Nothing
  1543 ;; This function is called by:
  1544 ;;		_escribirSalida
  1545 ;; This function uses a non-reentrant model
  1546 ;;
  1547                           
  1548                           
  1549                           ;psect for function ___lldiv
  1550  0247                     ___lldiv:	
  1551                           
  1552                           ;incstack = 0
  1553                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  1554  0247  3000               	movlw	0
  1555  0248  00FC               	movwf	___lldiv@quotient+3
  1556  0249  3000               	movlw	0
  1557  024A  00FB               	movwf	___lldiv@quotient+2
  1558  024B  3000               	movlw	0
  1559  024C  00FA               	movwf	___lldiv@quotient+1
  1560  024D  3000               	movlw	0
  1561  024E  00F9               	movwf	___lldiv@quotient
  1562  024F  0873               	movf	___lldiv@divisor+3,w
  1563  0250  0472               	iorwf	___lldiv@divisor+2,w
  1564  0251  0471               	iorwf	___lldiv@divisor+1,w
  1565  0252  0470               	iorwf	___lldiv@divisor,w
  1566  0253  1903               	skipnz
  1567  0254  2A9C               	goto	i1l822
  1568  0255  01FD               	clrf	___lldiv@counter
  1569  0256  0AFD               	incf	___lldiv@counter,f
  1570  0257                     i1l808:	
  1571  0257  1BF3               	btfsc	___lldiv@divisor+3,7
  1572  0258  2A67               	goto	i1l810
  1573  0259  3001               	movlw	1
  1574  025A  00F8               	movwf	??___lldiv
  1575  025B                     u50_25:	
  1576  025B  1003               	clrc
  1577  025C  0DF0               	rlf	___lldiv@divisor,f
  1578  025D  0DF1               	rlf	___lldiv@divisor+1,f
  1579  025E  0DF2               	rlf	___lldiv@divisor+2,f
  1580  025F  0DF3               	rlf	___lldiv@divisor+3,f
  1581  0260  0BF8               	decfsz	??___lldiv,f
  1582  0261  2A5B               	goto	u50_25
  1583  0262  3001               	movlw	1
  1584  0263  00F8               	movwf	??___lldiv
  1585  0264  0878               	movf	??___lldiv,w
  1586  0265  07FD               	addwf	___lldiv@counter,f
  1587  0266  2A57               	goto	i1l808
  1588  0267                     i1l810:	
  1589  0267  3001               	movlw	1
  1590  0268  00F8               	movwf	??___lldiv
  1591  0269                     u52_25:	
  1592  0269  1003               	clrc
  1593  026A  0DF9               	rlf	___lldiv@quotient,f
  1594  026B  0DFA               	rlf	___lldiv@quotient+1,f
  1595  026C  0DFB               	rlf	___lldiv@quotient+2,f
  1596  026D  0DFC               	rlf	___lldiv@quotient+3,f
  1597  026E  0BF8               	decfsz	??___lldiv,f
  1598  026F  2A69               	goto	u52_25
  1599  0270  0873               	movf	___lldiv@divisor+3,w
  1600  0271  0277               	subwf	___lldiv@dividend+3,w
  1601  0272  1D03               	skipz
  1602  0273  2A7E               	goto	u53_25
  1603  0274  0872               	movf	___lldiv@divisor+2,w
  1604  0275  0276               	subwf	___lldiv@dividend+2,w
  1605  0276  1D03               	skipz
  1606  0277  2A7E               	goto	u53_25
  1607  0278  0871               	movf	___lldiv@divisor+1,w
  1608  0279  0275               	subwf	___lldiv@dividend+1,w
  1609  027A  1D03               	skipz
  1610  027B  2A7E               	goto	u53_25
  1611  027C  0870               	movf	___lldiv@divisor,w
  1612  027D  0274               	subwf	___lldiv@dividend,w
  1613  027E                     u53_25:	
  1614  027E  1C03               	skipc
  1615  027F  2A8F               	goto	i1l818
  1616  0280  0870               	movf	___lldiv@divisor,w
  1617  0281  02F4               	subwf	___lldiv@dividend,f
  1618  0282  0871               	movf	___lldiv@divisor+1,w
  1619  0283  1C03               	skipc
  1620  0284  0F71               	incfsz	___lldiv@divisor+1,w
  1621  0285  02F5               	subwf	___lldiv@dividend+1,f
  1622  0286  0872               	movf	___lldiv@divisor+2,w
  1623  0287  1C03               	skipc
  1624  0288  0F72               	incfsz	___lldiv@divisor+2,w
  1625  0289  02F6               	subwf	___lldiv@dividend+2,f
  1626  028A  0873               	movf	___lldiv@divisor+3,w
  1627  028B  1C03               	skipc
  1628  028C  0F73               	incfsz	___lldiv@divisor+3,w
  1629  028D  02F7               	subwf	___lldiv@dividend+3,f
  1630  028E  1479               	bsf	___lldiv@quotient,0
  1631  028F                     i1l818:	
  1632  028F  3001               	movlw	1
  1633  0290                     u54_25:	
  1634  0290  1003               	clrc
  1635  0291  0CF3               	rrf	___lldiv@divisor+3,f
  1636  0292  0CF2               	rrf	___lldiv@divisor+2,f
  1637  0293  0CF1               	rrf	___lldiv@divisor+1,f
  1638  0294  0CF0               	rrf	___lldiv@divisor,f
  1639  0295  3EFF               	addlw	-1
  1640  0296  1D03               	skipz
  1641  0297  2A90               	goto	u54_25
  1642  0298  3001               	movlw	1
  1643  0299  02FD               	subwf	___lldiv@counter,f
  1644  029A  1D03               	btfss	3,2
  1645  029B  2A67               	goto	i1l810
  1646  029C                     i1l822:	
  1647  029C  087C               	movf	___lldiv@quotient+3,w
  1648  029D  00F3               	movwf	?___lldiv+3
  1649  029E  087B               	movf	___lldiv@quotient+2,w
  1650  029F  00F2               	movwf	?___lldiv+2
  1651  02A0  087A               	movf	___lldiv@quotient+1,w
  1652  02A1  00F1               	movwf	?___lldiv+1
  1653  02A2  0879               	movf	___lldiv@quotient,w
  1654  02A3  00F0               	movwf	?___lldiv
  1655  02A4  0008               	return
  1656  02A5                     __end_of___lldiv:	
  1657                           
  1658                           	psect	text6
  1659  02FD                     __ptext6:	
  1660 ;; *************** function ___lmul *****************
  1661 ;; Defined at:
  1662 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\Umul32.c"
  1663 ;; Parameters:    Size  Location     Type
  1664 ;;  multiplier      4    0[COMMON] unsigned long 
  1665 ;;  multiplicand    4    4[COMMON] unsigned long 
  1666 ;; Auto vars:     Size  Location     Type
  1667 ;;  product         4    9[COMMON] unsigned long 
  1668 ;; Return value:  Size  Location     Type
  1669 ;;                  4    0[COMMON] unsigned long 
  1670 ;; Registers used:
  1671 ;;		wreg, status,2, status,0
  1672 ;; Tracked objects:
  1673 ;;		On entry : 0/0
  1674 ;;		On exit  : 0/0
  1675 ;;		Unchanged: 0/0
  1676 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1677 ;;      Params:         8       0       0       0
  1678 ;;      Locals:         4       0       0       0
  1679 ;;      Temps:          1       0       0       0
  1680 ;;      Totals:        13       0       0       0
  1681 ;;Total ram usage:       13 bytes
  1682 ;; Hardware stack levels used:    1
  1683 ;; This function calls:
  1684 ;;		Nothing
  1685 ;; This function is called by:
  1686 ;;		_enconder
  1687 ;; This function uses a non-reentrant model
  1688 ;;
  1689                           
  1690                           
  1691                           ;psect for function ___lmul
  1692  02FD                     ___lmul:	
  1693                           
  1694                           ;incstack = 0
  1695                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  1696  02FD  3000               	movlw	0
  1697  02FE  00FC               	movwf	___lmul@product+3
  1698  02FF  3000               	movlw	0
  1699  0300  00FB               	movwf	___lmul@product+2
  1700  0301  3000               	movlw	0
  1701  0302  00FA               	movwf	___lmul@product+1
  1702  0303  3000               	movlw	0
  1703  0304  00F9               	movwf	___lmul@product
  1704  0305                     i1l902:	
  1705  0305  1C70               	btfss	___lmul@multiplier,0
  1706  0306  2B1B               	goto	i1l906
  1707  0307  0874               	movf	___lmul@multiplicand,w
  1708  0308  07F9               	addwf	___lmul@product,f
  1709  0309  0875               	movf	___lmul@multiplicand+1,w
  1710  030A  1103               	clrz
  1711  030B  1803               	skipnc
  1712  030C  3E01               	addlw	1
  1713  030D  1D03               	btfss	3,2
  1714  030E  07FA               	addwf	___lmul@product+1,f
  1715  030F  0876               	movf	___lmul@multiplicand+2,w
  1716  0310  1103               	clrz
  1717  0311  1803               	skipnc
  1718  0312  3E01               	addlw	1
  1719  0313  1D03               	btfss	3,2
  1720  0314  07FB               	addwf	___lmul@product+2,f
  1721  0315  0877               	movf	___lmul@multiplicand+3,w
  1722  0316  1103               	clrz
  1723  0317  1803               	skipnc
  1724  0318  3E01               	addlw	1
  1725  0319  1D03               	btfss	3,2
  1726  031A  07FC               	addwf	___lmul@product+3,f
  1727  031B                     i1l906:	
  1728  031B  3001               	movlw	1
  1729  031C  00F8               	movwf	??___lmul
  1730  031D                     u74_25:	
  1731  031D  1003               	clrc
  1732  031E  0DF4               	rlf	___lmul@multiplicand,f
  1733  031F  0DF5               	rlf	___lmul@multiplicand+1,f
  1734  0320  0DF6               	rlf	___lmul@multiplicand+2,f
  1735  0321  0DF7               	rlf	___lmul@multiplicand+3,f
  1736  0322  0BF8               	decfsz	??___lmul,f
  1737  0323  2B1D               	goto	u74_25
  1738  0324  3001               	movlw	1
  1739  0325                     u75_25:	
  1740  0325  1003               	clrc
  1741  0326  0CF3               	rrf	___lmul@multiplier+3,f
  1742  0327  0CF2               	rrf	___lmul@multiplier+2,f
  1743  0328  0CF1               	rrf	___lmul@multiplier+1,f
  1744  0329  0CF0               	rrf	___lmul@multiplier,f
  1745  032A  3EFF               	addlw	-1
  1746  032B  1D03               	skipz
  1747  032C  2B25               	goto	u75_25
  1748  032D  0873               	movf	___lmul@multiplier+3,w
  1749  032E  0472               	iorwf	___lmul@multiplier+2,w
  1750  032F  0471               	iorwf	___lmul@multiplier+1,w
  1751  0330  0470               	iorwf	___lmul@multiplier,w
  1752  0331  1D03               	skipz
  1753  0332  2B05               	goto	i1l902
  1754  0333  087C               	movf	___lmul@product+3,w
  1755  0334  00F3               	movwf	?___lmul+3
  1756  0335  087B               	movf	___lmul@product+2,w
  1757  0336  00F2               	movwf	?___lmul+2
  1758  0337  087A               	movf	___lmul@product+1,w
  1759  0338  00F1               	movwf	?___lmul+1
  1760  0339  0879               	movf	___lmul@product,w
  1761  033A  00F0               	movwf	?___lmul
  1762  033B  0008               	return
  1763  033C                     __end_of___lmul:	
  1764  007E                     btemp	set	126	;btemp
  1765  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        20
    BSS         30
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     44      78
    BANK1            80     10      26
    BANK2            48      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _enconder in COMMON

    _escribirSalida->___lldiv

Critical Paths under _main in BANK0

    None.

Critical Paths under _enconder in BANK0

    _enconder->_escribirSalida

Critical Paths under _main in BANK1

    _main->_resetearSalidas

Critical Paths under _enconder in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _enconder in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0     144
                                              5 BANK1      5     5      0
                    _resetearSalidas
 ---------------------------------------------------------------------------------
 (1) _resetearSalidas                                      5     3      2     121
                                              0 BANK1      5     3      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _enconder                                             8     8      0    1295
                                             36 BANK0      8     8      0
                             ___lmul
                     _escribirSalida
 ---------------------------------------------------------------------------------
 (3) _escribirSalida                                      36    36      0    1097
                                              0 BANK0     36    36      0
                            ___lldiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     304
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             14     6      8     268
                                              0 COMMON    14     6      8
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              13     5      8     198
                                              0 COMMON    13     5      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _resetearSalidas

 _enconder (ROOT)
   ___lmul
   _escribirSalida
     ___lldiv
     ___wmul

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               30      0       0       9        0.0%
BITBANK2            30      0       0       8        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      A      1A       7       32.5%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     2C      4E       3       97.5%
BITBANK0            50      0       0       5        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      76      10        0.0%
ABS                  0      0      76       4        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA              80      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Fri Nov 03 08:13:56 2017

                   __CFG_CP$OFF 0000                              l60 035C                              fsr 0004  
           ___wmul@multiplicand 0072         __size_of_escribirSalida 016F                             l830 0340  
                           _RA0 0028                             _RA1 0029                             _RB1 0031  
                           _RB2 0032                             _RB3 0033                             _RB4 0034  
                  __CFG_CPD$OFF 0000                             u565 034A                             u897 02F6  
                           fsr0 0004                             _pwm 0068                             indf 0000  
                  __CFG_LVP$OFF 0000                            l1010 02DB                            l1016 02EE  
                          i1l73 019E                            i1l69 0113                            i1l88 023C  
                          _TMR0 0001                            _main 02A5                            btemp 007E  
                 __CFG_BOREN$ON 0000                            start 0010                           ?_main 0070  
                 __CFG_WDTE$OFF 0000                           _CMCON 001F                 __end_of___lldiv 02A5  
                         i1l182 036B                           i1l810 0267                           i1l902 0305  
                         i1l822 029C                           i1l808 0257                           i1l906 031B  
                         i1l818 028F                           i1l860 0100                           i1l852 00D9  
                         i1l940 01EB                           i1l790 0363                           i1l846 00A4  
                         i1l960 0237                           i1l952 022C                           i1l890 018B  
                         i1l882 0164                           i1l858 00E8                           i1l876 012F  
                         i1l888 0173                           _TMR1H 000F                           _TMR1L 000E  
                         u50_25 025B                           u52_25 0269                           u60_25 00D7  
                         u53_25 027E                           u61_25 00E6                           u62_20 00FD  
                         u54_25 0290                           u46_25 036C                           u47_25 0373  
                         u71_25 019C                           u80_20 01CD                           u80_21 01CE  
                         u80_22 01D3                           u80_23 01D4                           u64_25 0111  
                         u57_20 004E                           _TRISA 0085                           _TRISB 0086  
                         u65_25 012D                           u66_24 013E                           u74_25 031D  
                         u66_25 013B                           u58_25 00A2                           u59_24 00B3  
                         u75_25 0325                           u67_25 0162                           u59_25 00B0  
                         u68_25 0171                           u84_25 021B                           u69_20 0188  
           ___lmul@multiplicand 0074                           pclath 000A                           status 0003  
                         wtemp0 007E                  __CFG_MCLRE$OFF 0000                 __initialization 0011  
              ?_resetearSalidas 00B0                    __end_of_main 02FD                          ??_main 00B5  
                __CFG_PWRTE$OFF 0000                __end_of_enconder 0247                          ___lmul 02FD  
                        ___wmul 0361                       ??___lldiv 0078                  _escribirSalida 0044  
                        saved_w 007E         __end_of__initialization 0042                  __pcstackCOMMON 0070  
                  __pidataBANK0 0382          __end_of_escribirSalida 01B3             escribirSalida@i_182 003C  
           escribirSalida@i_183 0042             escribirSalida@i_184 003E                  _OPTION_REGbits 0081  
                    __pbssBANK0 0060                      __pbssBANK1 00A0                      __pmaintext 02A5  
                       ?___lmul 0070                         ?___wmul 0070                      __pintentry 0004  
               ?_escribirSalida 0070                  ___lmul@product 0079                       ?_enconder 0070  
                  _codificacion 004C                 __size_of___lmul 003F                         ___lldiv 0247  
               __size_of___wmul 0021                         __ptext1 033C                         __ptext2 01B3  
                       __ptext3 0044                         __ptext4 0361                         __ptext5 0247  
                       __ptext6 02FD                       _T1CONbits 0010                         clrloop0 0397  
                    ??_enconder 0044            end_of_initialization 0042   escribirSalida@velocidadDecena 0038  
               ___lldiv@divisor 0070                 ___lldiv@counter 007D   escribirSalida@velocidadUnidad 0036  
      __size_of_resetearSalidas 0025                  __end_of___lmul 033C                  __end_of___wmul 0382  
          _contadorTemporizador 006A             start_initialization 0011            escribirSalida@numero 003A  
              ??_escribirSalida 0020                        ??___lmul 0078                        ??___wmul 0074  
                   __pdataBANK0 004C                       ___latbits 0000                   __pcstackBANK0 0020  
                 __pcstackBANK1 00B0              escribirSalida@F803 00A0               ??_resetearSalidas 00B2  
             __size_of_enconder 0094         escribirSalida@resultado 0026                        ?___lldiv 0070  
              resetearSalidas@i 00B3               interrupt_function 0004                  ___wmul@product 0074  
                     clear_ram0 0396                        _PIE1bits 008C                        _PIR1bits 000C  
                     _velocidad 0060               ___wmul@multiplier 0070                     _contadorLed 006C  
             ___lmul@multiplier 0070             main@palabaraBinaria 00B8                __size_of___lldiv 005E  
                      _enconder 01B3                        _contador 0064                   __size_of_main 0058  
               _resetearSalidas 033C                      _INTCONbits 000B                        intlevel1 0000  
              ___lldiv@dividend 0074  resetearSalidas@cantidadSalidas 00B0                 escribirSalida@i 0040  
              ___lldiv@quotient 0079              __CFG_FOSC$INTOSCIO 0000         __end_of_resetearSalidas 0361  
